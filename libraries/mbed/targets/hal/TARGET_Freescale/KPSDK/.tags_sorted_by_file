MG	drivers\adc\fsl_adc_driver.h	/^    uint32_t MG; \/*!< The value for MG register *\/$/;"	m	struct:adcCalibrationParam
PG	drivers\adc\fsl_adc_driver.h	/^    uint32_t PG; \/*!< The value for PG register *\/$/;"	m	struct:adcCalibrationParam
__FSL_ADC_DRIVER_H__	drivers\adc\fsl_adc_driver.h	32;"	d
adcCalibrationParam	drivers\adc\fsl_adc_driver.h	/^typedef struct adcCalibrationParam$/;"	s
adcChannelConfig	drivers\adc\fsl_adc_driver.h	/^typedef struct adcChannelConfig$/;"	s
adcConfig	drivers\adc\fsl_adc_driver.h	/^typedef struct adcConfig$/;"	s
adcExtendConfig	drivers\adc\fsl_adc_driver.h	/^typedef struct adcExtendConfig$/;"	s
adc_calibration_param_t	drivers\adc\fsl_adc_driver.h	/^} adc_calibration_param_t;   $/;"	t	typeref:struct:adcCalibrationParam
adc_channel_config_t	drivers\adc\fsl_adc_driver.h	/^} adc_channel_config_t;$/;"	t	typeref:struct:adcChannelConfig
adc_config_t	drivers\adc\fsl_adc_driver.h	/^} adc_config_t;$/;"	t	typeref:struct:adcConfig
adc_extend_config_t	drivers\adc\fsl_adc_driver.h	/^} adc_extend_config_t;$/;"	t	typeref:struct:adcExtendConfig
adc_isr_callback_t	drivers\adc\fsl_adc_driver.h	/^typedef void (*adc_isr_callback_t)(void);$/;"	t
calibrationParam	drivers\adc\fsl_adc_driver.h	/^    adc_calibration_param_t *calibrationParam; \/*!< NULL to enable auto-calibration or indicate mannually when initializing *\/$/;"	m	struct:adcConfig
channelId	drivers\adc\fsl_adc_driver.h	/^    adc_channel_mode_t channelId; \/*!< Channel number*\/$/;"	m	struct:adcChannelConfig
clockSourceDividerMode	drivers\adc\fsl_adc_driver.h	/^    adc_clock_divider_mode_t clockSourceDividerMode; \/*!< the selection of ADC clock divider, see to adc_clock_divider_mode_t's type defnition *\/$/;"	m	struct:adcConfig
clockSourceMode	drivers\adc\fsl_adc_driver.h	/^    adc_clock_source_mode_t clockSourceMode; \/*!< the selection of ADC clock source, see to adc_clock_source_mode_t's type definition *\/$/;"	m	struct:adcConfig
hwAverageSampleMode	drivers\adc\fsl_adc_driver.h	/^    adc_hw_average_mode_t hwAverageSampleMode;  \/*!< Selection of hardware average time*\/$/;"	m	struct:adcExtendConfig
hwCompareValue1	drivers\adc\fsl_adc_driver.h	/^    uint32_t hwCompareValue1;   \/*!< Low limit in hardware compare*\/$/;"	m	struct:adcExtendConfig
hwCompareValue2	drivers\adc\fsl_adc_driver.h	/^    uint32_t hwCompareValue2;   \/*!< High limit in hardware compare*\/$/;"	m	struct:adcExtendConfig
hwLongSampleMode	drivers\adc\fsl_adc_driver.h	/^    adc_long_sample_mode_t hwLongSampleMode;  \/*!< Selection of long sample mode*\/$/;"	m	struct:adcExtendConfig
isAsynClockEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isAsynClockEnabled;  \/*!< Switcher to enable internal asynchonous clock at initialization*\/$/;"	m	struct:adcExtendConfig
isContinuousEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isContinuousEnabled;   \/*!< switcher to enable continuous conversion*\/$/;"	m	struct:adcConfig
isDifferentialEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isDifferentialEnabled;   \/*!< The switcher to enable differential channel*\/$/;"	m	struct:adcChannelConfig
isDmaEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isDmaEnabled;  \/*! < Switcher to enable DMA support*\/$/;"	m	struct:adcExtendConfig
isHighSpeedEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHighSpeedEnabled;  \/*!< Switcher to enable high speed sample mode*\/$/;"	m	struct:adcExtendConfig
isHwAverageEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHwAverageEnabled;    \/*!< Switcher to enable hareware average*\/$/;"	m	struct:adcExtendConfig
isHwCompareEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHwCompareEnabled;  \/*!< Switcher to enable hardware compare*\/$/;"	m	struct:adcExtendConfig
isHwCompareGreaterEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHwCompareGreaterEnabled; \/*!< Switcher to enable greater compare*\/$/;"	m	struct:adcExtendConfig
isHwCompareRangeEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHwCompareRangeEnabled;  \/*!< Switcher to enable range compare*\/$/;"	m	struct:adcExtendConfig
isHwTriggerEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isHwTriggerEnabled;  \/*!< Switcher to enable hardware trigger*\/$/;"	m	struct:adcExtendConfig
isInterruptEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isInterruptEnabled;  \/*!< The switcher to enable interrupt when conversion is completed*\/$/;"	m	struct:adcChannelConfig
isLongSampleEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isLongSampleEnabled;  \/*!< Switcher to enable the long sample mode*\/$/;"	m	struct:adcExtendConfig
isLowPowerEnabled	drivers\adc\fsl_adc_driver.h	/^    bool isLowPowerEnabled;    \/*!< Switcher to enable the low power mode*\/$/;"	m	struct:adcExtendConfig
muxSelect	drivers\adc\fsl_adc_driver.h	/^    adc_group_mux_mode_t muxSelect; \/*!< Selection mux to group A(0) or group B(1)*\/$/;"	m	struct:adcChannelConfig
referenceVoltageMode	drivers\adc\fsl_adc_driver.h	/^    adc_reference_voltage_mode_t referenceVoltageMode; \/*!< the selection of ref voltage source, see to adc_reference_voltage_mode_t's type definition*\/$/;"	m	struct:adcConfig
resolutionMode	drivers\adc\fsl_adc_driver.h	/^    adc_resolution_mode_t resolutionMode; \/*!< the selection of ADC resolution, see to adc_resolution_mode_t's type definition *\/$/;"	m	struct:adcConfig
adc_context	drivers\adc\src\fsl_adc_driver.c	/^typedef struct adc_context$/;"	s	file:
adc_context_internal	drivers\adc\src\fsl_adc_driver.c	/^static adc_context_t adc_context_internal[HW_ADC_INSTANCE_COUNT];$/;"	v	file:
adc_context_t	drivers\adc\src\fsl_adc_driver.c	/^} adc_context_t;$/;"	t	typeref:struct:adc_context	file:
adc_get_calibration_param	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_get_calibration_param(uint32_t instance, adc_calibration_param_t *paramPtr)$/;"	f
adc_get_conversion_value	drivers\adc\src\fsl_adc_driver.c	/^uint32_t adc_get_conversion_value(uint32_t instance, adc_channel_config_t *channelCfgPtr)$/;"	f
adc_get_irq_id_internal	drivers\adc\src\fsl_adc_driver.c	/^static IRQn_Type adc_get_irq_id_internal(uint32_t instance)$/;"	f	file:
adc_init	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_init(uint32_t instance, adc_config_t *cfgPtr)$/;"	f
adc_init_extend	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_init_extend(uint32_t instance, adc_extend_config_t *extendCfgPtr)$/;"	f
adc_is_conversion_completed	drivers\adc\src\fsl_adc_driver.c	/^bool adc_is_conversion_completed(uint32_t instance, adc_channel_config_t *channelCfgPtr)$/;"	f
adc_isr_internal	drivers\adc\src\fsl_adc_driver.c	/^void adc_isr_internal(uint32_t instance)$/;"	f
adc_register_user_callback_isr	drivers\adc\src\fsl_adc_driver.c	/^void adc_register_user_callback_isr(uint32_t instance, adc_isr_callback_t func)$/;"	f
adc_set_calibration_param	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_set_calibration_param(uint32_t instance, adc_calibration_param_t *paramPtr)$/;"	f
adc_shutdown	drivers\adc\src\fsl_adc_driver.c	/^void adc_shutdown(uint32_t instance)$/;"	f
adc_start_conversion	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_start_conversion(uint32_t instance, adc_channel_config_t *channelCfgPtr)$/;"	f
adc_stop_conversion	drivers\adc\src\fsl_adc_driver.c	/^adc_status_t adc_stop_conversion(uint32_t instance, adc_channel_config_t *channelCfgPtr)$/;"	f
muxSelect	drivers\adc\src\fsl_adc_driver.c	/^    uint32_t            muxSelect;     \/* selection of ping-pang group *\/$/;"	m	struct:adc_context	file:
userCallback	drivers\adc\src\fsl_adc_driver.c	/^    adc_isr_callback_t 	userCallback; \/* user registed callback isr function *\/$/;"	m	struct:adc_context	file:
value	drivers\adc\src\fsl_adc_driver.c	/^    uint32_t            value;        \/* the latest value of conversion *\/$/;"	m	struct:adc_context	file:
ADC0_IRQHandler	drivers\adc\src\fsl_adc_irq.c	/^void ADC0_IRQHandler(void)$/;"	f
ADC1_IRQHandler	drivers\adc\src\fsl_adc_irq.c	/^void ADC1_IRQHandler(void)$/;"	f
ADC2_IRQHandler	drivers\adc\src\fsl_adc_irq.c	/^void ADC2_IRQHandler(void)$/;"	f
ADC3_IRQHandler	drivers\adc\src\fsl_adc_irq.c	/^void ADC3_IRQHandler(void)$/;"	f
adc_irq_ids	drivers\adc\src\fsl_adc_irq.c	/^IRQn_Type adc_irq_ids[HW_ADC_INSTANCE_COUNT] = $/;"	v
__FSL_FLEXCAN_DRIVER_H__	drivers\can\fsl_flexcan_driver.h	31;"	d
bit_rate	drivers\can\fsl_flexcan_driver.h	/^    uint32_t bit_rate;    \/*!< bit rate*\/$/;"	m	struct:flexcan_bitrate_table
flexcan_bitrate_table	drivers\can\fsl_flexcan_driver.h	/^typedef struct flexcan_bitrate_table {$/;"	s
flexcan_bitrate_table_t	drivers\can\fsl_flexcan_driver.h	/^} flexcan_bitrate_table_t;$/;"	t	typeref:struct:flexcan_bitrate_table
pre_divider	drivers\can\fsl_flexcan_driver.h	/^    uint32_t pre_divider; \/*!< Clock pre divider*\/$/;"	m	struct:flexcan_bitrate_table
propseg	drivers\can\fsl_flexcan_driver.h	/^    uint32_t propseg;     \/*!< Propagation segment*\/$/;"	m	struct:flexcan_bitrate_table
pseg1	drivers\can\fsl_flexcan_driver.h	/^    uint32_t pseg1;       \/*!< Phase segment 1*\/$/;"	m	struct:flexcan_bitrate_table
pseg2	drivers\can\fsl_flexcan_driver.h	/^    uint32_t pseg2;       \/*!< Phase segment 2*\/$/;"	m	struct:flexcan_bitrate_table
rjw	drivers\can\fsl_flexcan_driver.h	/^    uint32_t rjw;         \/*!< Resync jump width*\/$/;"	m	struct:flexcan_bitrate_table
bit_rate_table	drivers\can\src\fsl_flexcan_driver.c	/^const flexcan_bitrate_table_t bit_rate_table[] = {$/;"	v
flexcan_get_bitrate	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_get_bitrate(uint8_t instance, uint32_t *bitrate)$/;"	f
flexcan_init	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_init($/;"	f
flexcan_receive	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_receive($/;"	f
flexcan_rx_fifo_config	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_rx_fifo_config($/;"	f
flexcan_rx_mb_config	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_rx_mb_config($/;"	f
flexcan_send	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_send($/;"	f
flexcan_set_bitrate	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_set_bitrate(uint8_t instance, uint32_t bitrate)$/;"	f
flexcan_set_mask_type	drivers\can\src\fsl_flexcan_driver.c	/^void flexcan_set_mask_type(uint8_t instance, flexcan_rx_mask_type_t type)$/;"	f
flexcan_set_rx_fifo_global_mask	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_set_rx_fifo_global_mask($/;"	f
flexcan_set_rx_individual_mask	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_set_rx_individual_mask($/;"	f
flexcan_set_rx_mb_global_mask	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_set_rx_mb_global_mask($/;"	f
flexcan_shutdown	drivers\can\src\fsl_flexcan_driver.c	/^uint32_t flexcan_shutdown(uint8_t instance)$/;"	f
flexcan_start_receive	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_start_receive($/;"	f
flexcan_tx_mb_config	drivers\can\src\fsl_flexcan_driver.c	/^flexcan_status_t flexcan_tx_mb_config($/;"	f
int_fifo	drivers\can\src\fsl_flexcan_driver.c	/^bool int_fifo;$/;"	v
int_mb	drivers\can\src\fsl_flexcan_driver.c	/^bool int_mb;$/;"	v
irqSync	drivers\can\src\fsl_flexcan_driver.c	/^sync_object_t irqSync;$/;"	v
rx_mb_idx	drivers\can\src\fsl_flexcan_driver.c	/^uint32_t rx_mb_idx;$/;"	v
CAN0_Bus_Off_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN0_Bus_Off_IRQHandler(void)$/;"	f
CAN0_Error_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN0_Error_IRQHandler(void)$/;"	f
CAN0_ORed_Message_buffer_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN0_ORed_Message_buffer_IRQHandler(void)$/;"	f
CAN0_Wake_Up_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN0_Wake_Up_IRQHandler(void)$/;"	f
CAN1_Bus_Off_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN1_Bus_Off_IRQHandler(void)$/;"	f
CAN1_Error_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN1_Error_IRQHandler(void)$/;"	f
CAN1_ORed_Message_buffer_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN1_ORed_Message_buffer_IRQHandler(void)$/;"	f
CAN1_Wake_Up_IRQHandler	drivers\can\src\fsl_flexcan_irq.c	/^void CAN1_Wake_Up_IRQHandler(void)$/;"	f
flexcan_irq_handler	drivers\can\src\fsl_flexcan_irq.c	/^void flexcan_irq_handler(uint8_t instance)$/;"	f
flexcan_irq_ids	drivers\can\src\fsl_flexcan_irq.c	/^IRQn_Type flexcan_irq_ids[HW_CAN_INSTANCE_COUNT][FSL_FEATURE_CAN_INTERRUPT_COUNT] = $/;"	v
CLOCK_SETUP	drivers\clock\fsl_clock_configs.h	126;"	d
CLOCK_SETUP	drivers\clock\fsl_clock_configs.h	171;"	d
CLOCK_SETUP	drivers\clock\fsl_clock_configs.h	42;"	d
CLOCK_SETUP	drivers\clock\fsl_clock_configs.h	86;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	108;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	113;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	118;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	148;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	155;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	162;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	194;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	201;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	208;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	215;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	66;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	73;"	d
CPU_INT_FAST_CLK_HZ	drivers\clock\fsl_clock_configs.h	80;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	149;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	156;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	163;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	195;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	202;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	209;"	d
CPU_INT_IRC_CLK_HZ	drivers\clock\fsl_clock_configs.h	216;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	107;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	112;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	117;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	147;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	154;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	161;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	193;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	200;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	207;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	214;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	65;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	72;"	d
CPU_INT_SLOW_CLK_HZ	drivers\clock\fsl_clock_configs.h	79;"	d
CPU_XTAL0_CLK_HZ	drivers\clock\fsl_clock_configs.h	62;"	d
CPU_XTAL0_CLK_HZ	drivers\clock\fsl_clock_configs.h	69;"	d
CPU_XTAL0_CLK_HZ	drivers\clock\fsl_clock_configs.h	76;"	d
CPU_XTAL1_CLK_HZ	drivers\clock\fsl_clock_configs.h	63;"	d
CPU_XTAL1_CLK_HZ	drivers\clock\fsl_clock_configs.h	70;"	d
CPU_XTAL1_CLK_HZ	drivers\clock\fsl_clock_configs.h	77;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	146;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	153;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	160;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	192;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	199;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	206;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	213;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	64;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	71;"	d
CPU_XTAL32k_CLK_HZ	drivers\clock\fsl_clock_configs.h	78;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	106;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	111;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	116;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	145;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	152;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	159;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	191;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	198;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	205;"	d
CPU_XTAL_CLK_HZ	drivers\clock\fsl_clock_configs.h	212;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	109;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	114;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	119;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	150;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	157;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	164;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	196;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	203;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	210;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	217;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	67;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	74;"	d
DEFAULT_SYSTEM_CLOCK	drivers\clock\fsl_clock_configs.h	81;"	d
DISABLE_WDOG	drivers\clock\fsl_clock_configs.h	124;"	d
DISABLE_WDOG	drivers\clock\fsl_clock_configs.h	169;"	d
__FSL_CLOCK_CONFIGS_H__	drivers\clock\fsl_clock_configs.h	31;"	d
__FSL_CLOCK_MANAGER_H__	drivers\clock\fsl_clock_manager.h	32;"	d
_clock_gate_module_names	drivers\clock\fsl_clock_manager.h	/^typedef enum _clock_gate_module_names {$/;"	g
_clock_manager_error_code	drivers\clock\fsl_clock_manager.h	/^typedef enum _clock_manager_error_code {$/;"	g
_clock_names	drivers\clock\fsl_clock_manager.h	/^typedef enum _clock_names {$/;"	g
_clock_source_names	drivers\clock\fsl_clock_manager.h	/^typedef enum _clock_source_names {$/;"	g
clock_gate_module_names_t	drivers\clock\fsl_clock_manager.h	/^} clock_gate_module_names_t;$/;"	t	typeref:enum:_clock_gate_module_names
clock_manager_error_code_t	drivers\clock\fsl_clock_manager.h	/^} clock_manager_error_code_t;$/;"	t	typeref:enum:_clock_manager_error_code
clock_names_t	drivers\clock\fsl_clock_manager.h	/^} clock_names_t;$/;"	t	typeref:enum:_clock_names
clock_source_names_t	drivers\clock\fsl_clock_manager.h	/^} clock_source_names_t;$/;"	t	typeref:enum:_clock_source_names
kBusClock	drivers\clock\fsl_clock_manager.h	/^   kBusClock,                          \/**\/$/;"	e	enum:_clock_names
kClockClkoutSel	drivers\clock\fsl_clock_manager.h	/^    kClockClkoutSel,                \/* CLKOUTSEL*\/$/;"	e	enum:_clock_source_names
kClockEsdhcSrc	drivers\clock\fsl_clock_manager.h	/^    kClockEsdhcSrc,                 \/* ESDHCSRC K70*\/$/;"	e	enum:_clock_source_names
kClockLcdcSel	drivers\clock\fsl_clock_manager.h	/^    kClockLcdcSel,                  \/* LCDC_CLKSEL*\/$/;"	e	enum:_clock_source_names
kClockLcdcSrc	drivers\clock\fsl_clock_manager.h	/^    kClockLcdcSrc,                  \/* LCDCSRC*\/$/;"	e	enum:_clock_source_names
kClockManagerNoSuchClockModule	drivers\clock\fsl_clock_manager.h	/^    kClockManagerNoSuchClockModule,                 \/*!< cannot find the clock module name *\/$/;"	e	enum:_clock_manager_error_code
kClockManagerNoSuchClockName	drivers\clock\fsl_clock_manager.h	/^    kClockManagerNoSuchClockName,                   \/*!< cannot find the clock name *\/$/;"	e	enum:_clock_manager_error_code
kClockManagerNoSuchClockSource	drivers\clock\fsl_clock_manager.h	/^    kClockManagerNoSuchClockSource,                 \/*!< cannot find the clock source name *\/$/;"	e	enum:_clock_manager_error_code
kClockManagerNoSuchDivider	drivers\clock\fsl_clock_manager.h	/^    kClockManagerNoSuchDivider,                     \/*!< cannot find the divider name *\/$/;"	e	enum:_clock_manager_error_code
kClockManagerSuccess	drivers\clock\fsl_clock_manager.h	/^    kClockManagerSuccess,                           \/*!< success *\/$/;"	e	enum:_clock_manager_error_code
kClockManagerUnknown	drivers\clock\fsl_clock_manager.h	/^    kClockManagerUnknown                            \/*!< unknown error*\/$/;"	e	enum:_clock_manager_error_code
kClockModuleADC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleADC,                    \/*   instance 0 - 3*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleCMP	drivers\clock\fsl_clock_manager.h	/^    kClockModuleCMP,                    \/* *\/$/;"	e	enum:_clock_gate_module_names
kClockModuleCMT	drivers\clock\fsl_clock_manager.h	/^    kClockModuleCMT,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleCRC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleCRC,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDAC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDAC,                    \/*   instance 0, 1*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDDR	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDDR,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDMA	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDMA,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDMAMUX	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDMAMUX,                 \/*   instance 0, 1*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDRYICE	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDRYICE,                 \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleDRYICESECREG	drivers\clock\fsl_clock_manager.h	/^    kClockModuleDRYICESECREG,           \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleENET	drivers\clock\fsl_clock_manager.h	/^    kClockModuleENET,                   \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleESDHC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleESDHC,                  \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleEWM	drivers\clock\fsl_clock_manager.h	/^    kClockModuleEWM,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleFLEXBUS	drivers\clock\fsl_clock_manager.h	/^    kClockModuleFLEXBUS,                \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleFLEXCAN	drivers\clock\fsl_clock_manager.h	/^    kClockModuleFLEXCAN,                \/*   instance 0, 1*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleFTF	drivers\clock\fsl_clock_manager.h	/^    kClockModuleFTF,                    \/*  Flash memory control clock*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleFTM	drivers\clock\fsl_clock_manager.h	/^    kClockModuleFTM,                    \/*   instance 0 - 3*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleI2C	drivers\clock\fsl_clock_manager.h	/^    kClockModuleI2C,                    \/*   instance 0, 1*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleLCDC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleLCDC,                   \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleLLWU	drivers\clock\fsl_clock_manager.h	/^    kClockModuleLLWU,                   \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleLPTIMER	drivers\clock\fsl_clock_manager.h	/^    kClockModuleLPTIMER,                \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleMPU	drivers\clock\fsl_clock_manager.h	/^    kClockModuleMPU,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleMax	drivers\clock\fsl_clock_manager.h	/^    kClockModuleMax$/;"	e	enum:_clock_gate_module_names
kClockModuleNFC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleNFC,                    \/*  NAND flash control clock*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleOSC1	drivers\clock\fsl_clock_manager.h	/^    kClockModuleOSC1,                   \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModulePDB	drivers\clock\fsl_clock_manager.h	/^    kClockModulePDB,                    \/* *\/$/;"	e	enum:_clock_gate_module_names
kClockModulePIT	drivers\clock\fsl_clock_manager.h	/^    kClockModulePIT,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModulePORT	drivers\clock\fsl_clock_manager.h	/^    kClockModulePORT,                   \/*   instance 0 - 5 (A - F)*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleREGFILE	drivers\clock\fsl_clock_manager.h	/^    kClockModuleREGFILE,                \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleRNGA	drivers\clock\fsl_clock_manager.h	/^    kClockModuleRNGA,                   \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleRTC	drivers\clock\fsl_clock_manager.h	/^    kClockModuleRTC,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleSAI	drivers\clock\fsl_clock_manager.h	/^    kClockModuleSAI,                    \/*   instance 0, 1*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleSPI	drivers\clock\fsl_clock_manager.h	/^    kClockModuleSPI,                    \/*   instance 0 - 2*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleTPM	drivers\clock\fsl_clock_manager.h	/^    kClockModuleTPM,                    \/*   TPM timers 0 - 2*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleTSI	drivers\clock\fsl_clock_manager.h	/^    kClockModuleTSI,                    \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleUART	drivers\clock\fsl_clock_manager.h	/^    kClockModuleUART,                   \/*   instance 0 - 5*\/$/;"	e	enum:_clock_gate_module_names
kClockModuleUSBDCD	drivers\clock\fsl_clock_manager.h	/^    kClockModuleUSBDCD,                 \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleUSBFS	drivers\clock\fsl_clock_manager.h	/^    kClockModuleUSBFS,                  \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleUSBHS	drivers\clock\fsl_clock_manager.h	/^    kClockModuleUSBHS,                  \/**\/$/;"	e	enum:_clock_gate_module_names
kClockModuleVREF	drivers\clock\fsl_clock_manager.h	/^    kClockModuleVREF,                   \/* *\/$/;"	e	enum:_clock_gate_module_names
kClockNameCount	drivers\clock\fsl_clock_manager.h	/^   kClockNameCount$/;"	e	enum:_clock_names
kClockNfcSel	drivers\clock\fsl_clock_manager.h	/^    kClockNfcSel,                   \/* NFC_CLKSEL*\/$/;"	e	enum:_clock_source_names
kClockNfcSrc	drivers\clock\fsl_clock_manager.h	/^    kClockNfcSrc,                   \/* NFCSRC*\/$/;"	e	enum:_clock_source_names
kClockOsc32kSel	drivers\clock\fsl_clock_manager.h	/^    kClockOsc32kSel,                \/* OSC32KSEL*\/$/;"	e	enum:_clock_source_names
kClockPllfllSel	drivers\clock\fsl_clock_manager.h	/^    kClockPllfllSel,                \/* PLLFLLSEL*\/$/;"	e	enum:_clock_source_names
kClockRmiiSrc	drivers\clock\fsl_clock_manager.h	/^    kClockRmiiSrc,                  \/* RMIISRC*\/$/;"	e	enum:_clock_source_names
kClockRtcClkoutSel	drivers\clock\fsl_clock_manager.h	/^    kClockRtcClkoutSel,             \/* RTCCLKOUTSEL *\/$/;"	e	enum:_clock_source_names
kClockSdhcSrc	drivers\clock\fsl_clock_manager.h	/^    kClockSdhcSrc,                  \/* SDHCSRC  K64*\/$/;"	e	enum:_clock_source_names
kClockSourceMax	drivers\clock\fsl_clock_manager.h	/^    kClockSourceMax$/;"	e	enum:_clock_source_names
kClockTimeSrc	drivers\clock\fsl_clock_manager.h	/^    kClockTimeSrc,                  \/* TIMESRC*\/$/;"	e	enum:_clock_source_names
kClockTpmSrc	drivers\clock\fsl_clock_manager.h	/^    kClockTpmSrc,                   \/* TPMSRC*\/$/;"	e	enum:_clock_source_names
kClockTraceSel	drivers\clock\fsl_clock_manager.h	/^    kClockTraceSel,                 \/* TRACE_CLKSEL*\/$/;"	e	enum:_clock_source_names
kClockUart0Src	drivers\clock\fsl_clock_manager.h	/^    kClockUart0Src,                 \/* UART0SRC*\/$/;"	e	enum:_clock_source_names
kClockUsbSrc	drivers\clock\fsl_clock_manager.h	/^    kClockUsbSrc,                   \/* USBSRC   K64, KL25 and K22*\/$/;"	e	enum:_clock_source_names
kClockUsbfSel	drivers\clock\fsl_clock_manager.h	/^    kClockUsbfSel,                  \/* USBF_CLKSEL*\/$/;"	e	enum:_clock_source_names
kClockUsbfSrc	drivers\clock\fsl_clock_manager.h	/^    kClockUsbfSrc,                  \/* USBFSRC  K70*\/$/;"	e	enum:_clock_source_names
kClockUsbhSrc	drivers\clock\fsl_clock_manager.h	/^    kClockUsbhSrc,                  \/* USBHSRC*\/$/;"	e	enum:_clock_source_names
kCoreClock	drivers\clock\fsl_clock_manager.h	/^   kCoreClock,                         \/**\/$/;"	e	enum:_clock_names
kENET_1588_CLKIN	drivers\clock\fsl_clock_manager.h	/^   kENET_1588_CLKIN,$/;"	e	enum:_clock_names
kEXTAL1_Clock	drivers\clock\fsl_clock_manager.h	/^   kEXTAL1_Clock,$/;"	e	enum:_clock_names
kEXTAL_Clock	drivers\clock\fsl_clock_manager.h	/^   kEXTAL_Clock,$/;"	e	enum:_clock_names
kFlashClock	drivers\clock\fsl_clock_manager.h	/^   kFlashClock,                        \/**\/$/;"	e	enum:_clock_names
kFlexBusClock	drivers\clock\fsl_clock_manager.h	/^   kFlexBusClock,                      \/**\/$/;"	e	enum:_clock_names
kIrc48mClock	drivers\clock\fsl_clock_manager.h	/^   kIrc48mClock,$/;"	e	enum:_clock_names
kLpoClock	drivers\clock\fsl_clock_manager.h	/^   kLpoClock,$/;"	e	enum:_clock_names
kMcgFllClock	drivers\clock\fsl_clock_manager.h	/^   kMcgFllClock,$/;"	e	enum:_clock_names
kMcgIrClock	drivers\clock\fsl_clock_manager.h	/^   kMcgIrClock,$/;"	e	enum:_clock_names
kMcgOutClock	drivers\clock\fsl_clock_manager.h	/^   kMcgOutClock,$/;"	e	enum:_clock_names
kMcgPll0Clock	drivers\clock\fsl_clock_manager.h	/^   kMcgPll0Clock,$/;"	e	enum:_clock_names
kMcgPll1Clock	drivers\clock\fsl_clock_manager.h	/^   kMcgPll1Clock,$/;"	e	enum:_clock_names
kOsc0ErClock	drivers\clock\fsl_clock_manager.h	/^   kOsc0ErClock,$/;"	e	enum:_clock_names
kOsc1ErClock	drivers\clock\fsl_clock_manager.h	/^   kOsc1ErClock,$/;"	e	enum:_clock_names
kOsc32kClock	drivers\clock\fsl_clock_manager.h	/^   kOsc32kClock,$/;"	e	enum:_clock_names
kPlatformClock	drivers\clock\fsl_clock_manager.h	/^   kPlatformClock,                     \/**\/$/;"	e	enum:_clock_names
kReserved	drivers\clock\fsl_clock_manager.h	/^   kReserved,$/;"	e	enum:_clock_names
kRtc1hzClock	drivers\clock\fsl_clock_manager.h	/^   kRtc1hzClock,$/;"	e	enum:_clock_names
kRtc32kClock	drivers\clock\fsl_clock_manager.h	/^   kRtc32kClock,$/;"	e	enum:_clock_names
kSDHC0_CLKIN	drivers\clock\fsl_clock_manager.h	/^   kSDHC0_CLKIN,$/;"	e	enum:_clock_names
kSystemClock	drivers\clock\fsl_clock_manager.h	/^   kSystemClock,                       \/**\/$/;"	e	enum:_clock_names
kUSB_CLKIN	drivers\clock\fsl_clock_manager.h	/^   kUSB_CLKIN,$/;"	e	enum:_clock_names
clock_manager_get_frequency	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t clock_manager_get_frequency(clock_names_t clockName, $/;"	f
clock_manager_get_frequency_by_name	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t static clock_manager_get_frequency_by_name(sim_clock_names_t clockName,$/;"	f	file:
clock_manager_get_frequency_by_source	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t clock_manager_get_frequency_by_source(clock_source_names_t clockSource,$/;"	f
clock_manager_get_gate	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t clock_manager_get_gate(clock_gate_module_names_t moduleName,$/;"	f
clock_manager_get_system_clock	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t clock_manager_get_system_clock(sim_clock_names_t clockName, $/;"	f
clock_manager_set_gate	drivers\clock\src\fsl_clock_manager.c	/^clock_manager_error_code_t clock_manager_set_gate(clock_gate_module_names_t moduleName,$/;"	f
__FSL_CLOCK_MANAGER_PRIVATE_H__	drivers\clock\src\fsl_clock_manager_private.h	31;"	d
kClockModuleNameSimMap	drivers\clock\src\fsl_clock_manager_private.h	/^sim_clock_gate_module_names_t kClockModuleNameSimMap[kClockModuleMax] = {$/;"	v
kClockNameSimMap	drivers\clock\src\fsl_clock_manager_private.h	/^sim_clock_names_t kClockNameSimMap[kClockNameCount] = {$/;"	v
kClockSourceNameSimMap	drivers\clock\src\fsl_clock_manager_private.h	/^sim_clock_source_names_t kClockSourceNameSimMap[kClockSourceMax] = {$/;"	v
SPI0_IRQHandler	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^void SPI0_IRQHandler(void)$/;"	f
SPI1_IRQHandler	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^void SPI1_IRQHandler(void)$/;"	f
SPI2_IRQHandler	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^void SPI2_IRQHandler(void)$/;"	f
dspi_handle_shared_irq	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^static void dspi_handle_shared_irq(uint32_t instance)$/;"	f	file:
dspi_irq_ids	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^IRQn_Type dspi_irq_ids[HW_SPI_INSTANCE_COUNT] = {SPI0_IRQn, SPI1_IRQn, SPI2_IRQn};$/;"	v
dspi_irq_ids	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^IRQn_Type dspi_irq_ids[HW_SPI_INSTANCE_COUNT] = {SPI0_IRQn, SPI1_IRQn};$/;"	v
g_dspiSharedIrqConfig	drivers\dspi\common\fsl_dspi_shared_irqs.c	/^dspi_shared_irq_config_t g_dspiSharedIrqConfig[HW_SPI_INSTANCE_COUNT];$/;"	v
DspiSharedIrqConfig	drivers\dspi\common\fsl_dspi_shared_irqs.h	/^typedef struct DspiSharedIrqConfig {$/;"	s
__FSL_DSPI_IRQS_H__	drivers\dspi\common\fsl_dspi_shared_irqs.h	31;"	d
dspi_master_irq_handler	drivers\dspi\common\fsl_dspi_shared_irqs.h	80;"	d
dspi_set_shared_irq_state	drivers\dspi\common\fsl_dspi_shared_irqs.h	/^static inline void dspi_set_shared_irq_state(uint32_t instance, void * state, bool isMaster)$/;"	f
dspi_shared_irq_config_t	drivers\dspi\common\fsl_dspi_shared_irqs.h	/^} dspi_shared_irq_config_t;$/;"	t	typeref:struct:DspiSharedIrqConfig
dspi_slave_irq_handler	drivers\dspi\common\fsl_dspi_shared_irqs.h	84;"	d
isMaster	drivers\dspi\common\fsl_dspi_shared_irqs.h	/^    bool isMaster;  \/*!< Whether the IRQ is used by the master mode driver.*\/$/;"	m	struct:DspiSharedIrqConfig
state	drivers\dspi\common\fsl_dspi_shared_irqs.h	/^    void * state;  \/*!< Void pointer to driver state information *\/$/;"	m	struct:DspiSharedIrqConfig
DSPIDevice	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^typedef struct DSPIDevice {$/;"	s
DSPIMasterState	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^typedef struct DSPIMasterState {$/;"	s
DSPIMasterUserConfig	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^typedef struct DSPIMasterUserConfig {$/;"	s
__FSL_DSPI_MASTER_DRIVER_H__	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	31;"	d
bitsPerFrame	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    uint32_t bitsPerFrame;         \/*!< Desired number of bits per frame *\/$/;"	m	struct:DSPIMasterState
bitsPerSec	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    uint32_t bitsPerSec;                 \/*!< @brief Baud rate in bits per second.*\/$/;"	m	struct:DSPIDevice
dataBusConfig	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_data_format_config_t dataBusConfig;  \/* data format config struct*\/$/;"	m	struct:DSPIDevice
dspiSourceClock	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    uint32_t dspiSourceClock;              \/*!< Module source clock*\/$/;"	m	struct:DSPIMasterState
dspi_device_t	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^} dspi_device_t;$/;"	t	typeref:struct:DSPIDevice
dspi_master_state_t	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^} dspi_master_state_t;$/;"	t	typeref:struct:DSPIMasterState
dspi_master_user_config_t	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^} dspi_master_user_config_t;$/;"	t	typeref:struct:DSPIMasterUserConfig
instance	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    uint32_t instance;                      \/*!< DSPI module instance number*\/$/;"	m	struct:DSPIMasterState
irqSync	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    sync_object_t irqSync;                 \/*!< Used to wait for ISR to complete its business.*\/$/;"	m	struct:DSPIMasterState
isChipSelectContinuous	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    bool isChipSelectContinuous;  \/*!< Option to enable the continuous assertion of chip select$/;"	m	struct:DSPIMasterState
isChipSelectContinuous	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    bool isChipSelectContinuous;  \/*!< Option to enable the continuous assertion of chip select$/;"	m	struct:DSPIMasterUserConfig
isSckContinuous	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    bool isSckContinuous;                  \/*!< Disable or Enable continuous SCK operation*\/$/;"	m	struct:DSPIMasterUserConfig
isTransferAsync	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    bool isTransferAsync;                  \/*!< Whether the transfer is asynchronous (needed in$/;"	m	struct:DSPIMasterState
isTransferInProgress	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    bool isTransferInProgress;             \/*!< True if there is an active transfer.*\/$/;"	m	struct:DSPIMasterState
pcsPolarity	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_pcs_polarity_config_t pcsPolarity;  \/*!< Peripheral Chip Select (pcs) polarity setting.*\/$/;"	m	struct:DSPIMasterUserConfig
receiveBuffer	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    uint8_t * restrict receiveBuffer;     \/*!< The buffer into which received bytes are placed.*\/$/;"	m	struct:DSPIMasterState
remainingReceiveByteCount	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    size_t remainingReceiveByteCount;      \/*!< Number of bytes remaining to receive.*\/$/;"	m	struct:DSPIMasterState
remainingSendByteCount	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    size_t remainingSendByteCount;         \/*!< Number of bytes remaining to send.*\/$/;"	m	struct:DSPIMasterState
sendBuffer	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    const uint8_t * restrict sendBuffer;  \/*!< The buffer from which transmitted bytes are taken.*\/$/;"	m	struct:DSPIMasterState
whichCtar	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_ctar_selection_t whichCtar; \/*!< Desired Clock and Transfer Attributes Register (CTAR)*\/$/;"	m	struct:DSPIMasterState
whichCtar	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_ctar_selection_t whichCtar; \/*!< Desired Clock and Transfer Attributes Register(CTAR)*\/$/;"	m	struct:DSPIMasterUserConfig
whichPcs	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_which_pcs_config_t whichPcs;        \/*!< Desired Peripheral Chip Select (pcs) *\/$/;"	m	struct:DSPIMasterUserConfig
whichPcs	drivers\dspi\dspi_master\fsl_dspi_master_driver.h	/^    dspi_which_pcs_config_t whichPcs; \/*!< Desired Peripheral Chip Select (pcs) *\/$/;"	m	struct:DSPIMasterState
dspi_master_abort_transfer	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_abort_transfer(dspi_master_state_t * dspiState)$/;"	f
dspi_master_complete_transfer	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^static void dspi_master_complete_transfer(dspi_master_state_t * dspiState)$/;"	f	file:
dspi_master_configure_bus	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_configure_bus(dspi_master_state_t * dspiState, const dspi_device_t * device,$/;"	f
dspi_master_configure_modified_transfer_format	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^void dspi_master_configure_modified_transfer_format(dspi_master_state_t * dspiState,$/;"	f
dspi_master_get_transfer_status	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_get_transfer_status(dspi_master_state_t * dspiState,$/;"	f
dspi_master_init	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_init(uint32_t instance,  dspi_master_state_t * dspiState,$/;"	f
dspi_master_irq_handler	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^void dspi_master_irq_handler(void * state)$/;"	f
dspi_master_shutdown	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^void dspi_master_shutdown(dspi_master_state_t * dspiState)$/;"	f
dspi_master_start_transfer	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^static dspi_status_t dspi_master_start_transfer(dspi_master_state_t * dspiState,$/;"	f	file:
dspi_master_transfer	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_transfer(dspi_master_state_t * dspiState,$/;"	f
dspi_master_transfer_async	drivers\dspi\dspi_master\src\fsl_dspi_master_driver.c	/^dspi_status_t dspi_master_transfer_async(dspi_master_state_t * dspiState,$/;"	f
DSPISlaveCallbacks	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^typedef struct DSPISlaveCallbacks {$/;"	s
DSPISlaveState	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^typedef struct DSPISlaveState {$/;"	s
DSPISlaveUserConfig	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^typedef struct DSPISlaveUserConfig {$/;"	s
__FSL_DSPI_SLAVE_DRIVER_H__	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	31;"	d
bitsPerFrame	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    uint32_t bitsPerFrame;              \/*!< Desired number of bits per frame *\/$/;"	m	struct:DSPISlaveState
callbacks	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    dspi_slave_callbacks_t callbacks;     \/*!< Application\/user callbacks. *\/$/;"	m	struct:DSPISlaveUserConfig
callbacks	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    dspi_slave_callbacks_t callbacks;   \/*!< Application\/user callbacks. *\/$/;"	m	struct:DSPISlaveState
dataConfig	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    dspi_data_format_config_t dataConfig; \/*!< Data format configuration structure *\/$/;"	m	struct:DSPISlaveUserConfig
dataSink	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    dspi_status_t (*dataSink)(uint8_t sinkWord, uint32_t instance);$/;"	m	struct:DSPISlaveCallbacks
dataSource	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    dspi_status_t (*dataSource)(uint8_t * sourceWord, uint32_t instance);$/;"	m	struct:DSPISlaveCallbacks
dspi_slave_callbacks_t	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^} dspi_slave_callbacks_t;$/;"	t	typeref:struct:DSPISlaveCallbacks
dspi_slave_state_t	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^} dspi_slave_state_t;$/;"	t	typeref:struct:DSPISlaveState
dspi_slave_user_config_t	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^} dspi_slave_user_config_t;$/;"	t	typeref:struct:DSPISlaveUserConfig
instance	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    uint32_t instance;                  \/*!< DSPI module instance number *\/$/;"	m	struct:DSPISlaveState
onError	drivers\dspi\dspi_slave\fsl_dspi_slave_driver.h	/^    void (*onError)(dspi_status_t error, uint32_t instance);$/;"	m	struct:DSPISlaveCallbacks
_spi_slave_constants	drivers\dspi\dspi_slave\src\fsl_dspi_slave_driver.c	/^enum _spi_slave_constants$/;"	g	file:
dspi_slave_init	drivers\dspi\dspi_slave\src\fsl_dspi_slave_driver.c	/^dspi_status_t dspi_slave_init(uint32_t instance, const dspi_slave_user_config_t * slaveConfig,$/;"	f
dspi_slave_irq_handler	drivers\dspi\dspi_slave\src\fsl_dspi_slave_driver.c	/^void dspi_slave_irq_handler(void * state)$/;"	f
dspi_slave_shutdown	drivers\dspi\dspi_slave\src\fsl_dspi_slave_driver.c	/^void dspi_slave_shutdown(dspi_slave_state_t * dspiState)$/;"	f
kEmptyChar	drivers\dspi\dspi_slave\src\fsl_dspi_slave_driver.c	/^    kEmptyChar = 0,                        \/*!< Empty character *\/$/;"	e	enum:_spi_slave_constants	file:
DmaChanStatus	drivers\edma\fsl_edma_driver.h	/^typedef enum DmaChanStatus {$/;"	g
DmaChannelType	drivers\edma\fsl_edma_driver.h	/^typedef enum DmaChannelType {$/;"	g
DmaDescriptorInternalStatus	drivers\edma\fsl_edma_driver.h	/^typedef enum DmaDescriptorInternalStatus {$/;"	g
DmaScatterList	drivers\edma\fsl_edma_driver.h	/^typedef struct DmaScatterList {$/;"	s
DmaTransferType	drivers\edma\fsl_edma_driver.h	/^typedef enum DmaTransferType {$/;"	g
EdmaChannel	drivers\edma\fsl_edma_driver.h	/^typedef struct EdmaChannel {$/;"	s
EdmaDevice	drivers\edma\fsl_edma_driver.h	/^typedef struct EdmaDevice {$/;"	s
EdmaTcdAlignment	drivers\edma\fsl_edma_driver.h	/^typedef enum EdmaTcdAlignment {$/;"	g
__FSL_EDMA_DRIVER_H__	drivers\edma\fsl_edma_driver.h	31;"	d
address	drivers\edma\fsl_edma_driver.h	/^	uint32_t address;			\/*!< Address of buffer. *\/$/;"	m	struct:DmaScatterList
callback	drivers\edma\fsl_edma_driver.h	/^    dma_callback_t callback;		\/*!< Callback for dma channel. *\/$/;"	m	struct:EdmaChannel
channel	drivers\edma\fsl_edma_driver.h	/^    uint8_t channel;				\/*!< Edma physical channel indicator. *\/$/;"	m	struct:EdmaChannel
dma_callback_t	drivers\edma\fsl_edma_driver.h	/^typedef void (*dma_callback_t)(void *parameter, dma_channel_status_t status);$/;"	t
dma_channel_status_t	drivers\edma\fsl_edma_driver.h	/^} dma_channel_status_t;$/;"	t	typeref:enum:DmaChanStatus
dma_channel_type_t	drivers\edma\fsl_edma_driver.h	/^} dma_channel_type_t;$/;"	t	typeref:enum:DmaChannelType
dma_descriptor_internal_status_t	drivers\edma\fsl_edma_driver.h	/^} dma_descriptor_internal_status_t;$/;"	t	typeref:enum:DmaDescriptorInternalStatus
dma_scatter_list_t	drivers\edma\fsl_edma_driver.h	/^} dma_scatter_list_t;$/;"	t	typeref:struct:DmaScatterList
dma_transfer_type_t	drivers\edma\fsl_edma_driver.h	/^} dma_transfer_type_t;$/;"	t	typeref:enum:DmaTransferType
dmamuxChannel	drivers\edma\fsl_edma_driver.h	/^    uint8_t dmamuxChannel;			\/*!< Dma mux channel indicator. *\/$/;"	m	struct:EdmaChannel
dmamuxModule	drivers\edma\fsl_edma_driver.h	/^    uint8_t dmamuxModule;			\/*!< Dma mux module indicator. *\/$/;"	m	struct:EdmaChannel
edmaChan	drivers\edma\fsl_edma_driver.h	/^    edma_channel_t *edmaChan[FSL_FEATURE_DMA_DMAMUX_CHANNELS];	\/*!< Data poionter array for$/;"	m	struct:EdmaDevice
edma_channel_t	drivers\edma\fsl_edma_driver.h	/^} edma_channel_t;$/;"	t	typeref:struct:EdmaChannel
edma_device_t	drivers\edma\fsl_edma_driver.h	/^} edma_device_t;$/;"	t	typeref:struct:EdmaDevice
edma_tcd_alignment_t	drivers\edma\fsl_edma_driver.h	/^} edma_tcd_alignment_t;$/;"	t	typeref:enum:EdmaTcdAlignment
kDmaAnyChannel	drivers\edma\fsl_edma_driver.h	/^    kDmaAnyChannel = 0xFEU      \/*!< Macros used when requesting channel.  *\/$/;"	e	enum:DmaChannelType
kDmaError	drivers\edma\fsl_edma_driver.h	/^	kDmaError				    \/*!< Error happens in DMA channel. *\/$/;"	e	enum:DmaChanStatus
kDmaIdle	drivers\edma\fsl_edma_driver.h	/^	kDmaIdle,				    \/*!< DMA channel is idle. *\/$/;"	e	enum:DmaChanStatus
kDmaInvalidChannel	drivers\edma\fsl_edma_driver.h	/^    kDmaInvalidChannel = 0xFFU, \/*!< Macros indicating the failure of channel request. *\/$/;"	e	enum:DmaChannelType
kDmaMemoryToMemory	drivers\edma\fsl_edma_driver.h	/^	kDmaMemoryToMemory,		    \/*!< Transfer from memory to memory *\/$/;"	e	enum:DmaTransferType
kDmaMemoryToPeripheral	drivers\edma\fsl_edma_driver.h	/^	kDmaMemoryToPeripheral,	    \/*!< Transfer from memory to peripheral *\/$/;"	e	enum:DmaTransferType
kDmaNormal	drivers\edma\fsl_edma_driver.h	/^	kDmaNormal,				    \/*!< DMA channel is occupied. *\/$/;"	e	enum:DmaChanStatus
kDmaPeripheralToMemory	drivers\edma\fsl_edma_driver.h	/^	kDmaPeripheralToMemory,	    \/*!< Transfer from peripheral to memory *\/$/;"	e	enum:DmaTransferType
kDmaPeripheralToPeripheral	drivers\edma\fsl_edma_driver.h	/^	kDmaPeripheralToPeripheral  \/*!< Transfer from peripheral to peripheral *\/$/;"	e	enum:DmaTransferType
kEdmaDescriptorDone	drivers\edma\fsl_edma_driver.h	/^    kEdmaDescriptorDone = 0U,				\/*!< The descritpor is already finished *\/$/;"	e	enum:DmaDescriptorInternalStatus
kEdmaDescriptorPrepared	drivers\edma\fsl_edma_driver.h	/^    kEdmaDescriptorPrepared = 0xFFFFFFFFU	\/*!< The descriptor is being consumed or not consumed. *\/$/;"	e	enum:DmaDescriptorInternalStatus
kEdmaTcdAlignment	drivers\edma\fsl_edma_driver.h	/^    kEdmaTcdAlignment = 0x20U,        \/*!< Alignment of EDMA TCD. *\/$/;"	e	enum:EdmaTcdAlignment
kEdmaTcdAlignmentMask	drivers\edma\fsl_edma_driver.h	/^    kEdmaTcdAlignmentMask = 0x1FU     \/*!< Alignment mask of EDMA TCD. *\/$/;"	e	enum:EdmaTcdAlignment
length	drivers\edma\fsl_edma_driver.h	/^	uint32_t length;		    \/*!< Lenght of buffer. *\/$/;"	m	struct:DmaScatterList
module	drivers\edma\fsl_edma_driver.h	/^    uint8_t module;					\/*!< Edma physical Module indicator. *\/$/;"	m	struct:EdmaChannel
parameter	drivers\edma\fsl_edma_driver.h	/^    void *parameter;				\/*!< Parameter for callback function. *\/$/;"	m	struct:EdmaChannel
sema	drivers\edma\fsl_edma_driver.h	/^    sync_object_t sema;	                                        \/*!< Semaphore for eDMA driver. *\/$/;"	m	struct:EdmaDevice
status	drivers\edma\fsl_edma_driver.h	/^    dma_channel_status_t status;	\/*!< Channel status. *\/$/;"	m	struct:EdmaChannel
tcdLeftBytes	drivers\edma\fsl_edma_driver.h	/^    uint32_t tcdLeftBytes;          \/*!< Left bytes to be tranferred for current tcd. *\/$/;"	m	struct:EdmaChannel
tcdNumber	drivers\edma\fsl_edma_driver.h	/^    uint8_t tcdNumber;				\/*!< Length of hardware descriptor chain. *\/$/;"	m	struct:EdmaChannel
tcdRead	drivers\edma\fsl_edma_driver.h	/^    uint8_t tcdRead;                \/*!< Indicator for DMA controller's consuming. *\/ $/;"	m	struct:EdmaChannel
tcdUnderflow	drivers\edma\fsl_edma_driver.h	/^    bool tcdUnderflow;              \/*!< Flag telling whether user is failed to feed descriptor in$/;"	m	struct:EdmaChannel
tcdWrite	drivers\edma\fsl_edma_driver.h	/^    uint8_t tcdWrite;               \/*!< Indicator for user's descriptor updating. *\/$/;"	m	struct:EdmaChannel
DmaRequestSource	drivers\edma\fsl_edma_request.h	/^typedef enum DmaRequestSource {$/;"	g
__FSL_DMA_REQUEST_H__	drivers\edma\fsl_edma_request.h	32;"	d
dma_request_source_t	drivers\edma\fsl_edma_request.h	/^} dma_request_source_t;$/;"	t	typeref:enum:DmaRequestSource
kDmaRequestMux0ADC0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0ADC0 = 40|0x100,           \/*!< ADC0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0ADC1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0ADC1 = 41|0x100,           \/*!< ADC1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn54	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn54 = 54|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn55	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn55 = 55|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn56	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn56 = 56|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn57	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn57 = 57|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn58	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn58 = 58|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn59	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn59 = 59|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn60	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn60 = 60|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn61	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn61 = 61|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn62	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn62 = 62|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0AlwaysOn63	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0AlwaysOn63 = 63|0x100,     \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0CMP0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0CMP0 = 42|0x100,           \/*!< CMP0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0CMP1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0CMP1 = 43|0x100,           \/*!< CMP1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0CMP2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0CMP2 = 44|0x100,           \/*!< CMP2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0CMT	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0CMT = 47|0x100,            \/*!< CMT. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0DAC0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0DAC0 = 45|0x100,           \/*!< DAC0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0DAC1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0DAC1 = 46|0x100,           \/*!< DAC1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Disable	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Disable = 0|0x100,         \/*!< Disable the dma request. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel0 = 20|0x100,   \/*!< Channel 0 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel0 = 24|0x100,   \/*!< Channel 0 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel1 = 21|0x100,   \/*!< Channel 1 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel1 = 25|0x100,   \/*!< Channel 1 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel2 = 22|0x100,   \/*!< Channel 2 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel2 = 26|0x100,   \/*!< Channel 2 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel3 = 23|0x100,   \/*!< Channel 3 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel3 = 27|0x100,   \/*!< Channel 3 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel4 = 24|0x100,   \/*!< Channel 4 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel4 = 28|0x100,   \/*!< Channel 4 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel5 = 25|0x100,   \/*!< Channel 5 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel5 = 29|0x100,   \/*!< Channel 5 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel6	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel6 = 26|0x100,   \/*!< Channel 6 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel6	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel6 = 30|0x100,   \/*!< Channel 6 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel7	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel7 = 27|0x100,   \/*!< Channel 7 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM0Channel7	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM0Channel7 = 31|0x100,   \/*!< Channel 7 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM1Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM1Channel0 = 28|0x100,   \/*!< Channel 0 in FTM1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM1Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM1Channel0 = 32|0x100,   \/*!< Channel 0 in FTM1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM1Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM1Channel1 = 29|0x100,   \/*!< Channel 1 in FTM1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM1Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM1Channel1 = 33|0x100,   \/*!< Channel 1 in FTM1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM2Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM2Channel0 = 30|0x100,   \/*!< Channel 0 in FTM2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM2Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM2Channel0 = 34|0x100,   \/*!< Channel 0 in FTM2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM2Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM2Channel1  = 31|0x100,   \/*!< Channel 1 in FTM2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM2Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM2Channel1 = 35|0x100,   \/*!< Channel 1 in FTM2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel0 = 32|0x100,   \/*!< Channel 0 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel1 = 33|0x100,   \/*!< Channel 1 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel2 = 34|0x100,   \/*!< Channel 2 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel3 = 35|0x100,   \/*!< Channel 3 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel4 = 36|0x100,   \/*!< Channel 4 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel5 = 37|0x100,   \/*!< Channel 5 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel6	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel6 = 38|0x100,   \/*!< Channel 6 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0FTM3Channel7	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0FTM3Channel7 = 39|0x100,   \/*!< Channel 7 in FTM0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2C0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2C0 = 18|0x100,           \/*!< I2C0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2C0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2C0 = 22|0x100,           \/*!< I2C0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2C1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2C1 = 19|0x100,       \/*!< I2C1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2C1I2C2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2C1I2C2 = 19|0x100,       \/*!< I2C1 or I2C2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2C1I2C2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2C1I2C2 = 23|0x100,       \/*!< I2C1 or I2C2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2S0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2S0Rx = 12|0x100,         \/*!< I2S0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2S0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2S0Rx = 14|0x100,         \/*!< I2S0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2S0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2S0Tx = 13|0x100,         \/*!< I2S0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0I2S0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0I2S0Tx = 15|0x100,         \/*!< I2S0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer0 = 36|0x100, \/*!< IEEE 1588 timer0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer0 = 54|0x100,\/*!< IEEE 1588 timer0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer1 = 37|0x100, \/*!< IEEE 1588 timer1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer1 = 55|0x100,\/*!< IEEE 1588 timer1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer2 = 38|0x100, \/*!< IEEE 1588 timer2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer2 = 56|0x100,\/*!< IEEE 1588 timer2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer3 = 39|0x100, \/*!< IEEE 1588 timer3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0IEEE1588Timer3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0IEEE1588Timer3 = 57|0x100,\/*!< IEEE 1588 timer3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PDB	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PDB = 48|0x100,            \/*!< PDB. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PortA	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PortA = 49|0x100,          \/*!< Port A. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PortB	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PortB = 50|0x100,          \/*!< Port B. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PortC	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PortC = 51|0x100,          \/*!< Port C. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PortD	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PortD = 52|0x100,          \/*!< Port D. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0PortE	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0PortE = 53|0x100,          \/*!< Port E. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved1 = 1|0x100,       \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved10	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved10 = 10|0x100,        \/*!< Uart4 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved11	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved11 = 11|0x100,        \/*!< Uart4 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved17	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved17   = 17|0x100,         \/*!< SPI1 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved44	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved44 = 44|0x100,           \/*!< Reserved Slot 44 *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0Reserved47	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0Reserved47 = 47|0x100,            \/*!< Reserved Slot 47. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI0Rx = 14|0x100,         \/*!< SPI0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI0Rx = 16|0x100,         \/*!< SPI0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI0Tx = 15|0x100,         \/*!< SPI0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI0Tx = 17|0x100,         \/*!< SPI0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI1   = 16|0x100,         \/*!< SPI1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI1Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI1Rx = 18|0x100,         \/*!< SPI1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI1Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI1Tx = 19|0x100,         \/*!< SPI1 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI2   = 17|0x100,         \/*!< SPI1 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI2Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI2Rx = 20|0x100,         \/*!< SPI2 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0SPI2Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0SPI2Tx = 21|0x100,         \/*!< SPI2 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART0Rx = 2|0x100,         \/*!< Uart 0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART0Tx = 3|0x100,         \/*!< Uart0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART1Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART1Rx = 4|0x100,         \/*!< Uart1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART1Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART1Tx = 5|0x100,         \/*!< Uart1 transmitter.. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART2Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART2Rx = 6|0x100,         \/*!< Uart2 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART2Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART2Tx = 7|0x100,         \/*!< Uart2 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART3Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART3Rx = 8|0x100,         \/*!< Uart3 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART3Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART3Tx = 9|0x100,         \/*!< Uart3 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART4 = 10|0x100,        \/*!< Uart4 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART4Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART4Rx = 10|0x100,        \/*!< Uart4 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART4Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART4Tx = 11|0x100,        \/*!< Uart4 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART5 = 11|0x100,        \/*!< Uart4 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART5Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART5Rx = 12|0x100,        \/*!< Uart5 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux0UART5Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux0UART5Tx = 13|0x100,        \/*!< Uart5 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1ADC0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1ADC0 = 104|0x200,          \/*!< ADC0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1ADC1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1ADC1 = 105|0x200,          \/*!< ADC1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1ADC2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1ADC2 = 106|0x200,          \/*!< ADC2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1ADC3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1ADC3 = 107|0x200,          \/*!< ADC3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn54	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn54 = 118|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn55	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn55 = 119|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn56	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn56 = 120|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn57	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn57 = 121|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn58	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn58 = 122|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn59	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn59 = 123|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn60	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn60 = 124|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn61	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn61 = 125|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn62	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn62 = 126|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1AlwaysOn63	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1AlwaysOn63 = 127|0x200,    \/*!< Always on. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1CMP0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1CMP0 = 111|0x200,          \/*!< CMP0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1CMP1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1CMP1 = 112|0x200,          \/*!< CMP1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1CMP2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1CMP2 = 113|0x200,          \/*!< CMP2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1CMP3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1CMP3 = 114|0x200,          \/*!< CMP3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1DAC0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1DAC0 = 109|0x200,          \/*!< DAC0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1DAC1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1DAC1 = 110|0x200,          \/*!< DAC1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Disable	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Disable = 64|0x200,        \/*!< Disable the dma request. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel0 = 88|0x200,   \/*!< Channel 0 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel1 = 89|0x200,   \/*!< Channel 1 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel2 = 90|0x200,   \/*!< Channel 2 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel3 = 91|0x200,   \/*!< Channel 3 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel4 = 92|0x200,   \/*!< Channel 4 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel5 = 93|0x200,   \/*!< Channel 5 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel6	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel6 = 94|0x200,   \/*!< Channel 6 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1FTM3Channel7	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1FTM3Channel7 = 95|0x200,   \/*!< Channel 7 in FTM3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1I2S1Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1I2S1Rx = 78|0x200,         \/*!< I2S1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1I2S1Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1I2S1Tx = 79|0x200,         \/*!< I2S1 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1IEEE1588Timer0	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1IEEE1588Timer0 = 100|0x200,\/*!< IEEE 1588 timer0. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1IEEE1588Timer1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1IEEE1588Timer1 = 101|0x200,\/*!< IEEE 1588 timer1. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1IEEE1588Timer2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1IEEE1588Timer2 = 102|0x200,\/*!< IEEE 1588 timer2. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1IEEE1588Timer3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1IEEE1588Timer3 = 103|0x200,\/*!< IEEE 1588 timer3. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1PortF	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1PortF = 117|0x200,         \/*!< Port F. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved1	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved1 = 65|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved10	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved10 = 116|0x200,    \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved2	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved2 = 86|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved3	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved3 = 87|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved4	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved4 = 96|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved5	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved5 = 97|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved6	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved6 = 98|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved7	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved7 = 99|0x200,      \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved8	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved8 = 108|0x200,     \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1Reserved9	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1Reserved9 = 115|0x200,     \/*!< Reserved slot. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI0Rx = 80|0x200,         \/*!< SPI0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI0Tx = 81|0x200,         \/*!< SPI0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI1Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI1Rx = 82|0x200,         \/*!< SPI1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI1Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI1Tx = 83|0x200,         \/*!< SPI1 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI2Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI2Rx = 84|0x200,         \/*!< SPI2 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1SPI2Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1SPI2Tx = 85|0x200,         \/*!< SPI2 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART0Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART0Rx = 66|0x200,         \/*!< Uart 0 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART0Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART0Tx = 67|0x200,         \/*!< Uart0 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART1Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART1Rx = 68|0x200,         \/*!< Uart1 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART1Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART1Tx = 69|0x200,         \/*!< Uart1 transmitter.. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART2Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART2Rx = 70|0x200,         \/*!< Uart2 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART2Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART2Tx = 71|0x200,         \/*!< Uart2 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART3Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART3Rx = 72|0x200,         \/*!< Uart3 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART3Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART3Tx = 73|0x200,         \/*!< Uart3 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART4Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART4Rx = 74|0x200,        \/*!< Uart4 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART4Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART4Tx = 75|0x200,        \/*!< Uart4 transmitter. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART5Rx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART5Rx = 76|0x200,        \/*!< Uart5 receiver. *\/$/;"	e	enum:DmaRequestSource
kDmaRequestMux1UART5Tx	drivers\edma\fsl_edma_request.h	/^    kDmaRequestMux1UART5Tx = 77|0x200,        \/*!< Uart5 transmitter. *\/$/;"	e	enum:DmaRequestSource
DMA_ERR_IRQHandler	drivers\edma\src\fsl_edma_driver.c	/^void DMA_ERR_IRQHandler(uint32_t instance)$/;"	f
EDMA_CHANNEL_VECTOR_PRIORITY	drivers\edma\src\fsl_edma_driver.c	37;"	d	file:
EDMA_ERROR_VECTOR_PRIORITY	drivers\edma\src\fsl_edma_driver.c	36;"	d	file:
EDMA_IRQ_HANDLER	drivers\edma\src\fsl_edma_driver.c	/^void EDMA_IRQ_HANDLER(uint32_t channel)$/;"	f
edma_claim_channel	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_claim_channel(uint32_t channel,dma_request_source_t source, edma_channel_t *chn)$/;"	f
edma_config_loop	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_config_loop($/;"	f
edma_config_scatter_gather	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_config_scatter_gather($/;"	f
edma_free_channel	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_free_channel(edma_channel_t *chn)$/;"	f
edma_get_descriptor_status	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_get_descriptor_status(edma_channel_t *chn, uint32_t *descriptorStatus)$/;"	f
edma_init	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_init(void)$/;"	f
edma_register_callback	drivers\edma\src\fsl_edma_driver.c	/^void edma_register_callback(edma_channel_t *chn, dma_callback_t callback, void *para)$/;"	f
edma_request_channel	drivers\edma\src\fsl_edma_driver.c	/^uint32_t edma_request_channel(uint32_t channel, dma_request_source_t source, edma_channel_t *chan)$/;"	f
edma_shutdown	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_shutdown(void)$/;"	f
edma_start_channel	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_start_channel(edma_channel_t *chn)$/;"	f
edma_stop_channel	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_stop_channel(edma_channel_t *chn)$/;"	f
edma_update_descriptor	drivers\edma\src\fsl_edma_driver.c	/^edma_status_t edma_update_descriptor(edma_channel_t *chn)$/;"	f
edma_update_descriptor_internal	drivers\edma\src\fsl_edma_driver.c	/^void edma_update_descriptor_internal(edma_channel_t *chn)$/;"	f
g_edma	drivers\edma\src\fsl_edma_driver.c	/^edma_device_t g_edma;$/;"	v
DMA0_DMA16_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA0_DMA16_IRQHandler(void)$/;"	f
DMA0_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA0_IRQHandler(void)$/;"	f
DMA10_DMA26_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA10_DMA26_IRQHandler(void)$/;"	f
DMA10_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA10_IRQHandler(void)$/;"	f
DMA11_DMA27_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA11_DMA27_IRQHandler(void)$/;"	f
DMA11_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA11_IRQHandler(void)$/;"	f
DMA12_DMA28_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA12_DMA28_IRQHandler(void)$/;"	f
DMA12_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA12_IRQHandler(void)$/;"	f
DMA13_DMA29_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA13_DMA29_IRQHandler(void)$/;"	f
DMA13_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA13_IRQHandler(void)$/;"	f
DMA14_DMA30_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA14_DMA30_IRQHandler(void)$/;"	f
DMA14_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA14_IRQHandler(void)$/;"	f
DMA15_DMA31_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA15_DMA31_IRQHandler(void)$/;"	f
DMA15_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA15_IRQHandler(void)$/;"	f
DMA1_DMA17_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA1_DMA17_IRQHandler(void)$/;"	f
DMA1_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA1_IRQHandler(void)$/;"	f
DMA2_DMA18_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA2_DMA18_IRQHandler(void)$/;"	f
DMA2_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA2_IRQHandler(void)$/;"	f
DMA3_DMA19_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA3_DMA19_IRQHandler(void)$/;"	f
DMA3_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA3_IRQHandler(void)$/;"	f
DMA4_DMA20_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA4_DMA20_IRQHandler(void)$/;"	f
DMA4_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA4_IRQHandler(void)$/;"	f
DMA5_DMA21_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA5_DMA21_IRQHandler(void)$/;"	f
DMA5_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA5_IRQHandler(void)$/;"	f
DMA6_DMA22_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA6_DMA22_IRQHandler(void)$/;"	f
DMA6_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA6_IRQHandler(void)$/;"	f
DMA7_DMA23_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA7_DMA23_IRQHandler(void)$/;"	f
DMA7_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA7_IRQHandler(void)$/;"	f
DMA8_DMA24_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA8_DMA24_IRQHandler(void)$/;"	f
DMA8_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA8_IRQHandler(void)$/;"	f
DMA9_DMA25_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA9_DMA25_IRQHandler(void)$/;"	f
DMA9_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA9_IRQHandler(void)$/;"	f
DMA_Error_IRQHandler	drivers\edma\src\fsl_edma_irq.c	/^void DMA_Error_IRQHandler(void)$/;"	f
edma_error_irq_ids	drivers\edma\src\fsl_edma_irq.c	/^IRQn_Type edma_error_irq_ids[HW_DMA_INSTANCE_COUNT] =$/;"	v
edma_irq_ids	drivers\edma\src\fsl_edma_irq.c	/^IRQn_Type edma_irq_ids[HW_DMA_INSTANCE_COUNT][FSL_FEATURE_DMA_MODULE_CHANNEL] =$/;"	v
ENET_ALIGN	drivers\enet\fsl_enet_driver.h	50;"	d
ENET_ENABLE_DETAIL_STATS	drivers\enet\fsl_enet_driver.h	47;"	d
MasterPtpInstance	drivers\enet\fsl_enet_driver.h	/^    uint8_t MasterPtpInstance;\/*!< Ptp master timer instance*\/$/;"	m	struct:enet_ptp_master_time_data
__FSL_ENET_DRIVER_H__	drivers\enet\fsl_enet_driver.h	31;"	d
_enet_crc_parameter	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_crc_parameter$/;"	g
_enet_ethernet_ptp_content_offset	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ethernet_ptp_content_offset$/;"	g
_enet_frame_max	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_frame_max$/;"	g
_enet_interrupt_number	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_interrupt_number$/;"	g
_enet_ipv4_ptp_content_offset	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ipv4_ptp_content_offset$/;"	g
_enet_ipv6_ptp_content_offset	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ipv6_ptp_content_offset$/;"	g
_enet_protocol_type	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_protocol_type$/;"	g
_enet_ptp_event_type	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ptp_event_type$/;"	g
_enet_ptp_ioctl	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ptp_ioctl$/;"	g
_enet_ptp_l2packet_buffer_number	drivers\enet\fsl_enet_driver.h	/^typedef enum _enet_ptp_l2packet_buffer_number$/;"	g
bdAlignment	drivers\enet\fsl_enet_driver.h	/^    uint16_t bdAlignment;   \/*!< Buffer descriptor alignment*\/$/;"	m	struct:enet_mac_config
bufferdescSize	drivers\enet\fsl_enet_driver.h	/^    uint32_t bufferdescSize;         \/*!< Enet buffer descriptor size*\/$/;"	m	struct:enet_mac_context
data	drivers\enet\fsl_enet_driver.h	/^    uint8_t *data;$/;"	m	struct:enet_mac_packet_buffer
destAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr destAddr;  \/*!< Destination address *\/$/;"	m	struct:enet_8021vlan_header
destAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr destAddr;  \/*!< Destination address *\/$/;"	m	struct:enet_etherent_header
deviceNumber	drivers\enet\fsl_enet_driver.h	/^    uint32_t deviceNumber;    \/*!< Device number*\/$/;"	m	struct:enet_dev_if
drift	drivers\enet\fsl_enet_driver.h	/^    int32_t drift;    \/*!< Drift for ptp timer to do adjust*\/$/;"	m	struct:enet_ptp_drift
duplex	drivers\enet\fsl_enet_driver.h	/^    enet_config_duplex_t duplex;   \/*!< Duplex configuration*\/$/;"	m	struct:enet_mac_config
end	drivers\enet\fsl_enet_driver.h	/^    uint32_t end;   \/*!< The end index of the ring*\/$/;"	m	struct:enet_mac_ptp_ts_ring
enetContextSync	drivers\enet\fsl_enet_driver.h	/^    lock_object_t enetContextSync;     \/*!< Sync signal*\/$/;"	m	struct:enet_dev_if
enetReceiveSync	drivers\enet\fsl_enet_driver.h	/^    event_object_t enetReceiveSync;     \/*!< Receive sync signal*\/$/;"	m	struct:enet_dev_if
enet_8021vlan_header	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_8021vlan_header$/;"	s
enet_8021vlan_header_t	drivers\enet\fsl_enet_driver.h	/^}enet_8021vlan_header_t;$/;"	t	typeref:struct:enet_8021vlan_header
enet_add_multicast_group	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_add_multicast_group)(uint32_t instance, enet_multicast_group_t *multiGroupPtr, uint8_t *groupAddr);\/*!< Add multicast group*\/$/;"	m	struct:enet_mac_api
enet_crc_parameter_t	drivers\enet\fsl_enet_driver.h	/^}enet_crc_parameter_t;$/;"	t	typeref:enum:_enet_crc_parameter
enet_dev_if	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_dev_if$/;"	s
enet_dev_if_t	drivers\enet\fsl_enet_driver.h	/^}enet_dev_if_t;$/;"	t	typeref:struct:enet_dev_if
enet_etherent_header	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_etherent_header$/;"	s
enet_etherent_header_t	drivers\enet\fsl_enet_driver.h	/^}enet_etherent_header_t;$/;"	t	typeref:struct:enet_etherent_header
enet_ethernet_ptp_content_offset_t	drivers\enet\fsl_enet_driver.h	/^}enet_ethernet_ptp_content_offset_t;$/;"	t	typeref:enum:_enet_ethernet_ptp_content_offset
enet_frame_max_t	drivers\enet\fsl_enet_driver.h	/^}enet_frame_max_t;$/;"	t	typeref:enum:_enet_frame_max
enet_interrupt_number_t	drivers\enet\fsl_enet_driver.h	/^}enet_interrupt_number_t;$/;"	t	typeref:enum:_enet_interrupt_number
enet_ipv4_ptp_content_offset_t	drivers\enet\fsl_enet_driver.h	/^}enet_ipv4_ptp_content_offset_t;$/;"	t	typeref:enum:_enet_ipv4_ptp_content_offset
enet_ipv6_ptp_content_offset_t	drivers\enet\fsl_enet_driver.h	/^}enet_ipv6_ptp_content_offset_t;$/;"	t	typeref:enum:_enet_ipv6_ptp_content_offset
enet_leave_multicast_group	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_leave_multicast_group)(uint32_t instance, enet_multicast_group_t *multiGroupPtr, uint8_t *groupAddr);\/*!< Leave multicast group*\/$/;"	m	struct:enet_mac_api
enet_mac_api	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_api$/;"	s
enet_mac_api_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_api_t;$/;"	t	typeref:struct:enet_mac_api
enet_mac_close	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mac_close)(enet_dev_if_t * enetIfPtr);\/*!< Mac close interface*\/$/;"	m	struct:enet_mac_api
enet_mac_config	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_config$/;"	s
enet_mac_config_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_config_t;$/;"	t	typeref:struct:enet_mac_config
enet_mac_context	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_context$/;"	s
enet_mac_context_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_context_t;$/;"	t	typeref:struct:enet_mac_context
enet_mac_init	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mac_init)(enet_dev_if_t * enetIfPtr);\/*!< Mac initialize interface*\/$/;"	m	struct:enet_mac_api
enet_mac_packet_buffer	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_packet_buffer$/;"	s
enet_mac_packet_buffer_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_packet_buffer_t;$/;"	t	typeref:struct:enet_mac_packet_buffer
enet_mac_ptp_time	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_ptp_time$/;"	s
enet_mac_ptp_time_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_ptp_time_t;$/;"	t	typeref:struct:enet_mac_ptp_time
enet_mac_ptp_ts_data	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_ptp_ts_data$/;"	s
enet_mac_ptp_ts_data_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_ptp_ts_data_t;$/;"	t	typeref:struct:enet_mac_ptp_ts_data
enet_mac_ptp_ts_ring	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_ptp_ts_ring$/;"	s
enet_mac_ptp_ts_ring_t	drivers\enet\fsl_enet_driver.h	/^}enet_mac_ptp_ts_ring_t;$/;"	t	typeref:struct:enet_mac_ptp_ts_ring
enet_mac_receive	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mac_receive)(enet_dev_if_t * enetIfPtr, enet_mac_packet_buffer_t *packBuffer);\/*!< Mac receive interface*\/$/;"	m	struct:enet_mac_api
enet_mac_send	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mac_send)(enet_dev_if_t * enetIfPtr, uint8_t *packet, uint32_t size);\/*!< Mac send packets*\/$/;"	m	struct:enet_mac_api
enet_mac_stats	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_mac_stats$/;"	s
enet_mii_read	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mii_read)(uint32_t instance, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr);\/*!< Mii read phy*\/$/;"	m	struct:enet_mac_api
enet_mii_write	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_mii_write)(uint32_t instance, uint32_t phyAddr, uint32_t phyReg, uint32_t data);\/*!< Mii write phy*\/$/;"	m	struct:enet_mac_api
enet_multicast_group	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_multicast_group$/;"	s
enet_multicast_group_t	drivers\enet\fsl_enet_driver.h	/^} enet_multicast_group_t;$/;"	t	typeref:struct:enet_multicast_group
enet_phy_config	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_phy_config$/;"	s
enet_phy_config_t	drivers\enet\fsl_enet_driver.h	/^}enet_phy_config_t;$/;"	t	typeref:struct:enet_phy_config
enet_private_ptp_buffer	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_private_ptp_buffer$/;"	s
enet_private_ptp_buffer_t	drivers\enet\fsl_enet_driver.h	/^}enet_private_ptp_buffer_t;$/;"	t	typeref:struct:enet_private_ptp_buffer
enet_protocol_type_t	drivers\enet\fsl_enet_driver.h	/^}enet_protocol_type_t;$/;"	t	typeref:enum:_enet_protocol_type
enet_ptp_drift	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_ptp_drift$/;"	s
enet_ptp_drift_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_drift_t;$/;"	t	typeref:struct:enet_ptp_drift
enet_ptp_event_type_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_event_type_t;$/;"	t	typeref:enum:_enet_ptp_event_type
enet_ptp_ioctl	drivers\enet\fsl_enet_driver.h	/^    uint32_t (* enet_ptp_ioctl)(enet_dev_if_t * enetIfPtr, uint32_t commandId, void *inOutPtr);\/*!< Ptp ioctl*\/$/;"	m	struct:enet_mac_api
enet_ptp_l2_etherent	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_ptp_l2_etherent$/;"	s
enet_ptp_l2_ethernet_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_l2_ethernet_t;$/;"	t	typeref:struct:enet_ptp_l2_etherent
enet_ptp_l2packet	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_ptp_l2packet$/;"	s
enet_ptp_l2packet_buffer_number_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_l2packet_buffer_number_t;$/;"	t	typeref:enum:_enet_ptp_l2packet_buffer_number
enet_ptp_l2packet_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_l2packet_t;$/;"	t	typeref:struct:enet_ptp_l2packet
enet_ptp_l2queue	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_ptp_l2queue$/;"	s
enet_ptp_l2queue_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_l2queue_t;$/;"	t	typeref:struct:enet_ptp_l2queue
enet_ptp_master_time_data	drivers\enet\fsl_enet_driver.h	/^typedef struct enet_ptp_master_time_data$/;"	s
enet_ptp_master_time_data_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_master_time_data_t;$/;"	t	typeref:struct:enet_ptp_master_time_data
enet_ptp_ring_index	drivers\enet\fsl_enet_driver.h	/^static inline uint32_t enet_ptp_ring_index(uint32_t size, uint32_t curIdx, uint32_t offset)$/;"	f
enet_ptp_timer_wrap_period	drivers\enet\fsl_enet_driver.h	/^typedef enum enet_ptp_timer_wrap_period$/;"	g
enet_ptp_timer_wrap_period_t	drivers\enet\fsl_enet_driver.h	/^}enet_ptp_timer_wrap_period_t;$/;"	t	typeref:enum:enet_ptp_timer_wrap_period
enet_stats_t	drivers\enet\fsl_enet_driver.h	/^}enet_stats_t;$/;"	t	typeref:struct:enet_mac_stats
front	drivers\enet\fsl_enet_driver.h	/^    uint32_t front; \/*!< The first index of the ring*\/$/;"	m	struct:enet_mac_ptp_ts_ring
groupAdddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr groupAdddr;        \/*!< Multicast group address*\/$/;"	m	struct:enet_multicast_group
hash	drivers\enet\fsl_enet_driver.h	/^    uint32_t hash;                 \/*!< Hash value of the multicast group address*\/$/;"	m	struct:enet_multicast_group
hwAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr hwAddr;  \/*!< Destination hardware address*\/$/;"	m	struct:enet_ptp_l2_etherent
isInitialized	drivers\enet\fsl_enet_driver.h	/^    bool isInitialized;       \/*!< Device initialized*\/$/;"	m	struct:enet_dev_if
isLoopEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isLoopEnabled;   \/*!< Switcher to enable mac loopback mode*\/$/;"	m	struct:enet_mac_config
isLoopEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isLoopEnabled; \/*!< Switcher to enable phy loop mode*\/$/;"	m	struct:enet_phy_config
isPhyAutoDiscover	drivers\enet\fsl_enet_driver.h	/^    bool isPhyAutoDiscover;\/*!< Swithcer to use phy auto discover*\/$/;"	m	struct:enet_mac_config
isPromiscEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isPromiscEnabled;\/*!< Switcher to enable promiscuous*\/$/;"	m	struct:enet_mac_config
isRxAccelEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isRxAccelEnabled;\/*!< Switcher to enable receive accelerator*\/$/;"	m	struct:enet_mac_config
isRxFull	drivers\enet\fsl_enet_driver.h	/^	bool  isRxFull;         \/*!< Reveive buffer descriptor full*\/$/;"	m	struct:enet_mac_context
isSlaveModeEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isSlaveModeEnabled;      \/*!< Ptp timer configuration*\/$/;"	m	struct:enet_mac_config
isStoreAndFwEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isStoreAndFwEnabled;      \/*!< Switcher to enable store and forward*\/$/;"	m	struct:enet_mac_config
isTxAccelEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isTxAccelEnabled;\/*!< Switcher to enable transmit accelerator*\/$/;"	m	struct:enet_mac_config
isTxFull	drivers\enet\fsl_enet_driver.h	/^    bool  isTxFull;         \/*!< Transmit buffer descriptor full*\/$/;"	m	struct:enet_mac_context
isVlanEnabled	drivers\enet\fsl_enet_driver.h	/^    bool isVlanEnabled;    \/*!< Switcher to enable vlan frame*\/$/;"	m	struct:enet_mac_config
kEnetBabrInt	drivers\enet\fsl_enet_driver.h	/^    kEnetBabrInt,   \/*!< Babr interrupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetBabtInt	drivers\enet\fsl_enet_driver.h	/^    kEnetBabtInt,   \/*!< Babt interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetBaseIncreaseUnit	drivers\enet\fsl_enet_driver.h	/^    kEnetBaseIncreaseUnit = 2        \/*!< Ptp timer adjust clock increase vlaue 2*\/$/;"	e	enum:enet_ptp_timer_wrap_period
kEnetCrcData	drivers\enet\fsl_enet_driver.h	/^    kEnetCrcData = 0xFFFFFFFFU,  \/*!< Crc-32 max data *\/$/;"	e	enum:_enet_crc_parameter
kEnetCrcMask1	drivers\enet\fsl_enet_driver.h	/^    kEnetCrcMask1 = 0x3F         \/*!< Crc-32 mask*\/$/;"	e	enum:_enet_crc_parameter
kEnetCrcOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetCrcOffset = 8,          \/*!< Crc-32 offset2*\/$/;"	e	enum:_enet_crc_parameter
kEnetEberrInt	drivers\enet\fsl_enet_driver.h	/^    kEnetEberrInt,   \/*!< Eberr interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetFrameFcsLen	drivers\enet\fsl_enet_driver.h	/^    kEnetFrameFcsLen = 4,         \/*!< Fcs length*\/$/;"	e	enum:_enet_frame_max
kEnetGraInt	drivers\enet\fsl_enet_driver.h	/^    kEnetGraInt,    \/*!< Gra interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetIntNum	drivers\enet\fsl_enet_driver.h	/^    kEnetIntNum     \/*!< Interreupt number*\/$/;"	e	enum:_enet_interrupt_number
kEnetLcInt	drivers\enet\fsl_enet_driver.h	/^    kEnetLcInt,      \/*!< Lc interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetMaxFrameBdNumbers	drivers\enet\fsl_enet_driver.h	/^    kEnetMaxFrameBdNumbers = 7,   \/*!< Max buffer descriptor numbers of a frame*\/$/;"	e	enum:_enet_frame_max
kEnetMaxFrameDateSize	drivers\enet\fsl_enet_driver.h	/^    kEnetMaxFrameDateSize = 1500, \/*!< Max frame data size*\/$/;"	e	enum:_enet_frame_max
kEnetMaxFrameSize	drivers\enet\fsl_enet_driver.h	/^    kEnetMaxFrameSize = 1518,     \/*!< Max frame size*\/$/;"	e	enum:_enet_frame_max
kEnetMaxFrameVlanSize	drivers\enet\fsl_enet_driver.h	/^    kEnetMaxFrameVlanSize = 1522, \/*!< Max vlan frame size*\/$/;"	e	enum:_enet_frame_max
kEnetMaxTimeout	drivers\enet\fsl_enet_driver.h	/^    kEnetMaxTimeout = 0x10000,    \/*!< Max timeout*\/$/;"	e	enum:_enet_frame_max
kEnetMiiInt	drivers\enet\fsl_enet_driver.h	/^    kEnetMiiInt,     \/*!< Mii interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetPacketIpv4Version	drivers\enet\fsl_enet_driver.h	/^    kEnetPacketIpv4Version = 0x4,    \/*!< Packet ip version ipv4*\/$/;"	e	enum:_enet_protocol_type
kEnetPacketIpv6Version	drivers\enet\fsl_enet_driver.h	/^    kEnetPacketIpv6Version = 0x6     \/*!< Packet ip version IPV6*\/$/;"	e	enum:_enet_protocol_type
kEnetPacketUdpVersion	drivers\enet\fsl_enet_driver.h	/^    kEnetPacketUdpVersion = 0x11,    \/*!< Udp protocol type*\/$/;"	e	enum:_enet_protocol_type
kEnetPlrInt	drivers\enet\fsl_enet_driver.h	/^    kEnetPlrInt,     \/*!< Plr interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetProtocol8021QVlan	drivers\enet\fsl_enet_driver.h	/^    kEnetProtocol8021QVlan = 0x8100, \/*!< Packet type vlan*\/$/;"	e	enum:_enet_protocol_type
kEnetProtocolIeee8023	drivers\enet\fsl_enet_driver.h	/^    kEnetProtocolIeee8023 = 0x88F7,  \/*!< Packet type etherent ieee802.3*\/$/;"	e	enum:_enet_protocol_type
kEnetProtocolIpv4	drivers\enet\fsl_enet_driver.h	/^    kEnetProtocolIpv4 = 0x0800,      \/*!< Packet type ipv4*\/$/;"	e	enum:_enet_protocol_type
kEnetProtocolIpv6	drivers\enet\fsl_enet_driver.h	/^    kEnetProtocolIpv6 = 0x86dd,      \/*!< Packet type ipv6*\/$/;"	e	enum:_enet_protocol_type
kEnetPtpAtperVaule	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpAtperVaule = 1000000000, \/*!< Ptp timer wrap aroud of one second *\/$/;"	e	enum:enet_ptp_timer_wrap_period
kEnetPtpCorrectTime	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpCorrectTime,           \/*!< enet ptp time Correction*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpEtherClockIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherClockIdOffset = 0x22,   \/*!< Ptpv2 message ethernet clock id offset*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEtherCtlOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherCtlOffset = 0x2e        \/*!< Ptpv2 message ethernet control offset*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEtherMsgTypeOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherMsgTypeOffset = 0x0e,   \/*!< Ptpv2 message etherent message type offset*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEtherPktTypeOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherPktTypeOffset = 0x0c,   \/*!< Ptpv2 message etherent packet type offset*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEtherSequenceIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherSequenceIdOffset = 0x2c,\/*!< Ptpv2 message ethernet sequence id offset*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEtherVersionOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpEtherVersionOffset = 0x0f,   \/*!< Ptpv2 message etherent version type offest*\/$/;"	e	enum:_enet_ethernet_ptp_content_offset
kEnetPtpEventMsgType	drivers\enet\fsl_enet_driver.h	/^     kEnetPtpEventMsgType = 3,      \/*!< Ptp event message type*\/$/;"	e	enum:_enet_ptp_event_type
kEnetPtpEventPort	drivers\enet\fsl_enet_driver.h	/^     kEnetPtpEventPort = 319,       \/*!< Ptp event port number*\/$/;"	e	enum:_enet_ptp_event_type
kEnetPtpFlushTimestamp	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpFlushTimestamp,        \/*!< enet ptp flush timestamp*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpGetCurrentTime	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpGetCurrentTime,        \/*!< enet ptp get current time*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpGetRxTimestamp	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpGetRxTimestamp = 0,    \/*!< enet ptp get receive timestamp*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpGetTxTimestamp	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpGetTxTimestamp,        \/*!< enet ptp get transmit timestamp*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpGnrlPort	drivers\enet\fsl_enet_driver.h	/^     kEnetPtpGnrlPort = 320         \/*!< Ptp general port number*\/$/;"	e	enum:_enet_ptp_event_type
kEnetPtpIpVersionOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpVersionOffset = 0xe,   \/*!< Ipv4 ptp message ip version offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpIpv6UdpClockIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpClockIdOffset = 0x52,   \/*!< Ipv6 ptp message udp clock id offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpCtlOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpCtlOffset = 0x5e        \/*!< Ipv6 ptp message udp control offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpMsgTypeOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpMsgTypeOffset = 0x3e,   \/*!< Ipv6 ptp message udp message type offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpPortOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpPortOffset = 0x38,      \/*!< Ipv6 ptp message udp port offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpProtocolOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpProtocolOffset = 0x14,  \/*!< Ipv6 ptp message udp protocol offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpSequenceIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpSequenceIdOffset = 0x5c,\/*!< Ipv6 ptp message udp sequence id offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpIpv6UdpVersionOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpIpv6UdpVersionOffset = 0x3f,   \/*!< Ipv6 ptp message udp version offset*\/$/;"	e	enum:_enet_ipv6_ptp_content_offset
kEnetPtpL2bufferNumber	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpL2bufferNumber = 10  \/*!< ptp layer2 frame buffer number*\/$/;"	e	enum:_enet_ptp_l2packet_buffer_number
kEnetPtpReceiveEthernetPtpV2	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpReceiveEthernetPtpV2   \/*!< enet ptpv2 receive with ethernet frame*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpSendEthernetPtpV2	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpSendEthernetPtpV2,     \/*!< enet ptpv2 send ethernet frame*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpSetCurrentTime	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpSetCurrentTime,        \/*!< enet ptp set current time*\/$/;"	e	enum:_enet_ptp_ioctl
kEnetPtpSourcePortIdLen	drivers\enet\fsl_enet_driver.h	/^     kEnetPtpSourcePortIdLen = 10,  \/*!< Ptp message sequence id length*\/$/;"	e	enum:_enet_ptp_event_type
kEnetPtpUdpClockIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpClockIdOffset = 0x3e, \/*!< Ipv4 ptp message udp clock id offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpCtlOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpCtlOffset = 0x4a      \/*!< Ipv4 ptp message udp control offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpMsgTypeOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpMsgTypeOffset = 0x2a, \/*!< Ipv4 ptp message udp message type offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpPortOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpPortOffset = 0x24,    \/*!< Ipv4 ptp message udp port offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpProtocolOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpProtocolOffset = 0x17,\/*!< Ipv4 ptp message udp protocol offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpSequenIdOffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpSequenIdOffset = 0x48,\/*!< Ipv4 ptp message udp sequence id offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetPtpUdpVersionoffset	drivers\enet\fsl_enet_driver.h	/^    kEnetPtpUdpVersionoffset = 0x2b, \/*!< Ipv4 ptp message udp version offset*\/$/;"	e	enum:_enet_ipv4_ptp_content_offset
kEnetRlInt	drivers\enet\fsl_enet_driver.h	/^    kEnetRlInt,      \/*!< Rl interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetRxbInt	drivers\enet\fsl_enet_driver.h	/^    kEnetRxbInt ,    \/*!< Receive byte interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetRxfInt	drivers\enet\fsl_enet_driver.h	/^    kEnetRxfInt,    \/*!< Receive frame interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetTsAvailInt	drivers\enet\fsl_enet_driver.h	/^    kEnetTsAvailInt, \/*!< Ts-avail interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetTstimerInt	drivers\enet\fsl_enet_driver.h	/^    kEnetTstimerInt = 0, \/*!< Timestamp interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetTxbInt	drivers\enet\fsl_enet_driver.h	/^    kEnetTxbInt,    \/*!< Transmit byte interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetTxfInt	drivers\enet\fsl_enet_driver.h	/^    kEnetTxfInt,    \/*!< Transmit frame interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetUnInt	drivers\enet\fsl_enet_driver.h	/^    kEnetUnInt,      \/*!< Un interreupt*\/$/;"	e	enum:_enet_interrupt_number
kEnetWakeUpInt	drivers\enet\fsl_enet_driver.h	/^    kEnetWakeUpInt,  \/*!< Wakeup interreupt*\/$/;"	e	enum:_enet_interrupt_number
l2Packet	drivers\enet\fsl_enet_driver.h	/^    enet_ptp_l2packet_t l2Packet[kEnetPtpL2bufferNumber]; \/*!< Ptp layer2 packet*\/$/;"	m	struct:enet_ptp_l2queue
l2QueuePtr	drivers\enet\fsl_enet_driver.h	/^    enet_ptp_l2queue_t *l2QueuePtr;    \/*!< Data structure for layer2 etherent queue*\/$/;"	m	struct:enet_private_ptp_buffer
length	drivers\enet\fsl_enet_driver.h	/^    uint16_t length;                       \/*!< Ptp message length*\/$/;"	m	struct:enet_ptp_l2packet
length	drivers\enet\fsl_enet_driver.h	/^    uint16_t length;     \/*!< Length of ptp message*\/$/;"	m	struct:enet_ptp_l2_etherent
length	drivers\enet\fsl_enet_driver.h	/^    uint16_t length;$/;"	m	struct:enet_mac_packet_buffer
macAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr macAddr;    \/*!< Mac hardware address*\/$/;"	m	struct:enet_mac_config
macApiPtr	drivers\enet\fsl_enet_driver.h	/^    const struct enet_mac_api *macApiPtr;   \/*!< Mac application interface structure*\/$/;"	m	struct:enet_dev_if	typeref:struct:enet_dev_if::enet_mac_api
macCfgPtr	drivers\enet\fsl_enet_driver.h	/^    enet_mac_config_t *macCfgPtr;\/*!< Mac configuration structure*\/$/;"	m	struct:enet_dev_if
macContextPtr	drivers\enet\fsl_enet_driver.h	/^    enet_mac_context_t *macContextPtr; \/*!< Mac context pointer*\/$/;"	m	struct:enet_dev_if
masterSecond	drivers\enet\fsl_enet_driver.h	/^    uint64_t masterSecond;             \/*!< Ptp time second when it's master time*\/$/;"	m	struct:enet_private_ptp_buffer
maxFrameSize	drivers\enet\fsl_enet_driver.h	/^    uint16_t maxFrameSize;  \/*!< Mac maximum frame size*\/$/;"	m	struct:enet_dev_if
messageType	drivers\enet\fsl_enet_driver.h	/^    uint8_t messageType;          \/*!< Ptp message type*\/$/;"	m	struct:enet_mac_ptp_ts_data
miiClock	drivers\enet\fsl_enet_driver.h	/^    uint32_t miiClock;     \/*!< Mii speed*\/$/;"	m	struct:enet_mac_config
multiGroupPtr	drivers\enet\fsl_enet_driver.h	/^    enet_multicast_group_t *multiGroupPtr; \/*!< Multicast group chain*\/$/;"	m	struct:enet_dev_if
nanosecond	drivers\enet\fsl_enet_driver.h	/^    uint32_t nanosecond; \/*!< Nanosecond*\/$/;"	m	struct:enet_mac_ptp_time
netIfPtr	drivers\enet\fsl_enet_driver.h	/^    void *netIfPtr;           \/*!< Store the connected  upper layyer instructure*\/$/;"	m	struct:enet_dev_if
next	drivers\enet\fsl_enet_driver.h	/^    struct enet_dev_if *next; \/*!< Next device structure address*\/$/;"	m	struct:enet_dev_if	typeref:struct:enet_dev_if::enet_dev_if
next	drivers\enet\fsl_enet_driver.h	/^    struct enet_multicast_group *next; \/*!< Pointer of next group structure*\/$/;"	m	struct:enet_multicast_group	typeref:struct:enet_multicast_group::enet_multicast_group
othertag	drivers\enet\fsl_enet_driver.h	/^    uint16_t othertag;     \/*!< Enet 8021tag header type region*\/$/;"	m	struct:enet_8021vlan_header
packet	drivers\enet\fsl_enet_driver.h	/^    uint8_t packet[kEnetMaxFrameDateSize]; \/*!< Buffer for ptpv2 message*\/$/;"	m	struct:enet_ptp_l2packet
phyAddr	drivers\enet\fsl_enet_driver.h	/^    uint8_t phyAddr;    \/*!< Phy address*\/$/;"	m	struct:enet_phy_config
phyApiPtr	drivers\enet\fsl_enet_driver.h	/^    void *phyApiPtr;             \/*!< Phy application interface structure*\/$/;"	m	struct:enet_dev_if
phyCfgPtr	drivers\enet\fsl_enet_driver.h	/^    enet_phy_config_t *phyCfgPtr;\/*!< Phy configuration structure*\/$/;"	m	struct:enet_dev_if
privatePtpPtr	drivers\enet\fsl_enet_driver.h	/^    enet_private_ptp_buffer_t *privatePtpPtr;\/*!< Ptp private buffer pointer*\/$/;"	m	struct:enet_mac_context
prv	drivers\enet\fsl_enet_driver.h	/^    struct enet_multicast_group *prv;  \/*!< Pointer of the previou structure*\/$/;"	m	struct:enet_multicast_group	typeref:struct:enet_multicast_group::enet_multicast_group
ptpMsg	drivers\enet\fsl_enet_driver.h	/^    uint8_t *ptpMsg;     \/*!< Ptp message*\/$/;"	m	struct:enet_ptp_l2_etherent
ptpRingBufferNumber	drivers\enet\fsl_enet_driver.h	/^    uint16_t ptpRingBufferNumber; \/*!< Ptp ring buffer number*\/$/;"	m	struct:enet_mac_config
ptpTsDataPtr	drivers\enet\fsl_enet_driver.h	/^    enet_mac_ptp_ts_data_t *ptpTsDataPtr;\/*!< Ptp message data structure*\/$/;"	m	struct:enet_mac_ptp_ts_ring
readIdx	drivers\enet\fsl_enet_driver.h	/^    uint16_t readIdx;            \/*!< Queue read index*\/$/;"	m	struct:enet_ptp_l2queue
rmiiCfgMode	drivers\enet\fsl_enet_driver.h	/^    enet_config_rmii_t rmiiCfgMode;\/*!< Rmii configure mode*\/$/;"	m	struct:enet_mac_config
rxAcceler	drivers\enet\fsl_enet_driver.h	/^    enet_config_rx_accelerator_t rxAcceler; \/*!< Receive accelerator configure*\/$/;"	m	struct:enet_mac_config
rxBdBasePtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *rxBdBasePtr;   \/*!< Receive buffer descriptor base address pointer*\/$/;"	m	struct:enet_mac_context
rxBdCurPtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *rxBdCurPtr;    \/*!< Current receive buffer descriptor pointer*\/$/;"	m	struct:enet_mac_context
rxBdDirtyPtr	drivers\enet\fsl_enet_driver.h	/^	uint8_t *rxBdDirtyPtr;  \/*!< Receive dirty buffer descriptor*\/$/;"	m	struct:enet_mac_context
rxBdNumber	drivers\enet\fsl_enet_driver.h	/^    uint16_t rxBdNumber;    \/*!< Receive buffer descriptor number*\/$/;"	m	struct:enet_mac_config
rxBufferAlignment	drivers\enet\fsl_enet_driver.h	/^    uint16_t rxBufferAlignment;  \/*!< Receive buffer alignment*\/$/;"	m	struct:enet_mac_config
rxBufferNumber	drivers\enet\fsl_enet_driver.h	/^    uint16_t rxBufferNumber;\/*!< Receive buffer number,should be larger than rx bd number when the buffer size is$/;"	m	struct:enet_mac_config
rxBufferPtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *rxBufferPtr;   \/*!< Receive buffer pointer*\/$/;"	m	struct:enet_mac_context
rxBufferSize	drivers\enet\fsl_enet_driver.h	/^    uint16_t rxBufferSize;  \/*!< Recieve buffer size*\/$/;"	m	struct:enet_mac_config
rxBufferSizeAligned	drivers\enet\fsl_enet_driver.h	/^	uint16_t rxBufferSizeAligned;      \/*!< Receive buffer alignment size*\/$/;"	m	struct:enet_mac_context
rxLargeBufferNumber	drivers\enet\fsl_enet_driver.h	/^	uint16_t rxLargeBufferNumber; \/*!< Receive large buffer number only needs when the bd size is smaller than the maximum frame length*\/$/;"	m	struct:enet_mac_config
rxLargeBufferPtr	drivers\enet\fsl_enet_driver.h	/^	uint8_t *rxLargeBufferPtr; \/*!< Receive large buffer descriptor*\/$/;"	m	struct:enet_mac_context
rxTimeStamp	drivers\enet\fsl_enet_driver.h	/^    enet_mac_ptp_ts_ring_t rxTimeStamp;\/*!< Data structure for receive message*\/$/;"	m	struct:enet_private_ptp_buffer
second	drivers\enet\fsl_enet_driver.h	/^    uint64_t second;          \/*!< Ptp master timer second *\/$/;"	m	struct:enet_ptp_master_time_data
second	drivers\enet\fsl_enet_driver.h	/^    uint64_t second;     \/*!< Second*\/$/;"	m	struct:enet_mac_ptp_time
sequenceId	drivers\enet\fsl_enet_driver.h	/^    uint16_t sequenceId;          \/*!< Ptp sequence ID*\/$/;"	m	struct:enet_mac_ptp_ts_data
size	drivers\enet\fsl_enet_driver.h	/^    uint32_t size;  \/*!< The size of the ring*\/$/;"	m	struct:enet_mac_ptp_ts_ring
sourceAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr sourceAddr;\/*!< Source address*\/$/;"	m	struct:enet_8021vlan_header
sourceAddr	drivers\enet\fsl_enet_driver.h	/^    enetMacAddr sourceAddr;\/*!< Source address*\/$/;"	m	struct:enet_etherent_header
sourcePortId	drivers\enet\fsl_enet_driver.h	/^    uint8_t sourcePortId[kEnetPtpSourcePortIdLen];\/*!< Ptp source port ID*\/$/;"	m	struct:enet_mac_ptp_ts_data
speed	drivers\enet\fsl_enet_driver.h	/^    enet_config_speed_t speed;     \/*!< Speed configuration*\/$/;"	m	struct:enet_mac_config
stats	drivers\enet\fsl_enet_driver.h	/^    enet_stats_t stats;                \/*!< Packets statistic*\/$/;"	m	struct:enet_dev_if
statsRxAlign	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxAlign;   \/*!< Receive non-octet alignment*\/$/;"	m	struct:enet_mac_stats
statsRxCollision	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxCollision;      \/*!< Receive collision*\/$/;"	m	struct:enet_mac_stats
statsRxDiscard	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxDiscard; \/*!< Receive discarded with error *\/$/;"	m	struct:enet_mac_stats
statsRxError	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxError;   \/*!< Receive discarded with error packets*\/$/;"	m	struct:enet_mac_stats
statsRxFcs	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxFcs;     \/*!< Receive crc error*\/$/;"	m	struct:enet_mac_stats
statsRxLengthGreater	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxLengthGreater;  \/*!< Receive length greater than rcr[MAX_FL] *\/$/;"	m	struct:enet_mac_stats
statsRxMissed	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxMissed;  \/*!< Total number of receive packets*\/$/;"	m	struct:enet_mac_stats
statsRxOverRun	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxOverRun;        \/*!< Receive over run*\/$/;"	m	struct:enet_mac_stats
statsRxTotal	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxTotal;   \/*!< Total number of receive packets*\/$/;"	m	struct:enet_mac_stats
statsRxTruncate	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsRxTruncate;\/*!< Receive truncate*\/$/;"	m	struct:enet_mac_stats
statsTxDiscard	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxDiscard; \/*!< Transmit discarded with error *\/$/;"	m	struct:enet_mac_stats
statsTxError	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxError;   \/*!< Transmit error*\/$/;"	m	struct:enet_mac_stats
statsTxExcessCollision	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxExcessCollision;\/*!< Transmit excess collision*\/$/;"	m	struct:enet_mac_stats
statsTxLarge	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxLarge;          \/*!< Transmit large packet*\/$/;"	m	struct:enet_mac_stats
statsTxLateCollision	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxLateCollision;  \/*!< Transmit late collision*\/$/;"	m	struct:enet_mac_stats
statsTxMissed	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxMissed;  \/*!< Transmit missed*\/$/;"	m	struct:enet_mac_stats
statsTxOverFlow	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxOverFlow;       \/*!< Transmit overflow*\/$/;"	m	struct:enet_mac_stats
statsTxSmall	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxSmall;          \/*!< Transmit small pacaket*\/$/;"	m	struct:enet_mac_stats
statsTxTotal	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxTotal;   \/*!< Total number of transmit packets*\/$/;"	m	struct:enet_mac_stats
statsTxUnderFlow	drivers\enet\fsl_enet_driver.h	/^    uint32_t statsTxUnderFlow;      \/*!< Transmit under flow*\/$/;"	m	struct:enet_mac_stats
timeStamp	drivers\enet\fsl_enet_driver.h	/^    enet_mac_ptp_time_t timeStamp;\/*!< Ptp timestamp*\/$/;"	m	struct:enet_mac_ptp_ts_data
tpidtag	drivers\enet\fsl_enet_driver.h	/^    uint16_t tpidtag;      \/*!< Enet 8021tag header tag region*\/$/;"	m	struct:enet_8021vlan_header
txAcceler	drivers\enet\fsl_enet_driver.h	/^    enet_config_tx_accelerator_t txAcceler; \/*!< Transmit accelerator configure*\/$/;"	m	struct:enet_mac_config
txBdBasePtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *txBdBasePtr;   \/*!< Transmit buffer descriptor base address pointer*\/$/;"	m	struct:enet_mac_context
txBdCurPtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *txBdCurPtr;    \/*!< Current transmit buffer descriptor pointer*\/$/;"	m	struct:enet_mac_context
txBdDirtyPtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *txBdDirtyPtr;  \/*!< Last cleaned transmit buffer descriptor pointer*\/$/;"	m	struct:enet_mac_context
txBdNumber	drivers\enet\fsl_enet_driver.h	/^    uint16_t txBdNumber;    \/*!< Transmit buffer descriptor number*\/$/;"	m	struct:enet_mac_config
txBufferAlignment	drivers\enet\fsl_enet_driver.h	/^    uint16_t txBufferAlignment;  \/*!< Transmit buffer alignment*\/$/;"	m	struct:enet_mac_config
txBufferPtr	drivers\enet\fsl_enet_driver.h	/^    uint8_t *txBufferPtr;   \/*!< Transmit buffer pointer*\/$/;"	m	struct:enet_mac_context
txLargeBufferNumber	drivers\enet\fsl_enet_driver.h	/^    uint16_t txLargeBufferNumber;\/*!< Transmit large bufer number*\/$/;"	m	struct:enet_mac_config
txTimeStamp	drivers\enet\fsl_enet_driver.h	/^    enet_mac_ptp_ts_ring_t txTimeStamp;\/*!< Data structure for transmit timestamp*\/$/;"	m	struct:enet_private_ptp_buffer
type	drivers\enet\fsl_enet_driver.h	/^    uint16_t type;         \/*!< Protocol type*\/$/;"	m	struct:enet_8021vlan_header
type	drivers\enet\fsl_enet_driver.h	/^    uint16_t type;         \/*!< Protocol type*\/$/;"	m	struct:enet_etherent_header
version	drivers\enet\fsl_enet_driver.h	/^    uint8_t version;              \/*!< Ptp version*\/$/;"	m	struct:enet_mac_ptp_ts_data
writeIdex	drivers\enet\fsl_enet_driver.h	/^    uint16_t writeIdex;          \/*!< Queue write index*\/$/;"	m	struct:enet_ptp_l2queue
COMMON	drivers\enet\fsl_enet_rtcs_adapter.h	/^    ENET_COMMON_STATS_STRUCT   COMMON; \/*!< Common status structure*\/$/;"	m	struct:enet_stats
DEST	drivers\enet\fsl_enet_rtcs_adapter.h	/^    _enet_address    DEST;     \/*!< destination mac address*\/$/;"	m	struct:enet_header
DRIVER_ERROR_BASE	drivers\enet\fsl_enet_rtcs_adapter.h	64;"	d
ENETERR_1588_LWEVENT	drivers\enet\fsl_enet_rtcs_adapter.h	95;"	d
ENETERR_ALLOC	drivers\enet\fsl_enet_rtcs_adapter.h	85;"	d
ENETERR_ALLOC_BD	drivers\enet\fsl_enet_rtcs_adapter.h	72;"	d
ENETERR_ALLOC_BUFFERS	drivers\enet\fsl_enet_rtcs_adapter.h	88;"	d
ENETERR_ALLOC_CFG	drivers\enet\fsl_enet_rtcs_adapter.h	70;"	d
ENETERR_ALLOC_ECB	drivers\enet\fsl_enet_rtcs_adapter.h	75;"	d
ENETERR_ALLOC_MAC_CONTEXT	drivers\enet\fsl_enet_rtcs_adapter.h	89;"	d
ENETERR_ALLOC_MCB	drivers\enet\fsl_enet_rtcs_adapter.h	81;"	d
ENETERR_ALLOC_PCB	drivers\enet\fsl_enet_rtcs_adapter.h	71;"	d
ENETERR_CLOSE_PROT	drivers\enet\fsl_enet_rtcs_adapter.h	77;"	d
ENETERR_DEVICE_IN_USE	drivers\enet\fsl_enet_rtcs_adapter.h	92;"	d
ENETERR_DEVICE_TIMEOUT	drivers\enet\fsl_enet_rtcs_adapter.h	87;"	d
ENETERR_FREE_PCB	drivers\enet\fsl_enet_rtcs_adapter.h	74;"	d
ENETERR_INITIALIZED_DEVICE	drivers\enet\fsl_enet_rtcs_adapter.h	93;"	d
ENETERR_INITIALIZED_MULTICAST	drivers\enet\fsl_enet_rtcs_adapter.h	99;"	d
ENETERR_INIT_DEVICE	drivers\enet\fsl_enet_rtcs_adapter.h	69;"	d
ENETERR_INIT_FAILED	drivers\enet\fsl_enet_rtcs_adapter.h	86;"	d
ENETERR_INPROGRESS	drivers\enet\fsl_enet_rtcs_adapter.h	94;"	d
ENETERR_INSTALL_ISR	drivers\enet\fsl_enet_rtcs_adapter.h	73;"	d
ENETERR_INVALID_DEVICE	drivers\enet\fsl_enet_rtcs_adapter.h	68;"	d
ENETERR_INVALID_INIT_PARAM	drivers\enet\fsl_enet_rtcs_adapter.h	91;"	d
ENETERR_INVALID_MODE	drivers\enet\fsl_enet_rtcs_adapter.h	96;"	d
ENETERR_INVALID_MULTICAST	drivers\enet\fsl_enet_rtcs_adapter.h	101;"	d
ENETERR_INVALID_OPTION	drivers\enet\fsl_enet_rtcs_adapter.h	97;"	d
ENETERR_IP_TABLE_FULL	drivers\enet\fsl_enet_rtcs_adapter.h	84;"	d
ENETERR_JOIN_MULTICAST	drivers\enet\fsl_enet_rtcs_adapter.h	80;"	d
ENETERR_LEAVE_GROUP	drivers\enet\fsl_enet_rtcs_adapter.h	82;"	d
ENETERR_MAX	drivers\enet\fsl_enet_rtcs_adapter.h	103;"	d
ENETERR_MIN	drivers\enet\fsl_enet_rtcs_adapter.h	102;"	d
ENETERR_NO_TX_BUFFER	drivers\enet\fsl_enet_rtcs_adapter.h	90;"	d
ENETERR_NULL_MULTICAST	drivers\enet\fsl_enet_rtcs_adapter.h	100;"	d
ENETERR_OPEN_PROT	drivers\enet\fsl_enet_rtcs_adapter.h	76;"	d
ENETERR_SEND_FULL	drivers\enet\fsl_enet_rtcs_adapter.h	83;"	d
ENETERR_SEND_LARGE	drivers\enet\fsl_enet_rtcs_adapter.h	98;"	d
ENETERR_SEND_LONG	drivers\enet\fsl_enet_rtcs_adapter.h	79;"	d
ENETERR_SEND_SHORT	drivers\enet\fsl_enet_rtcs_adapter.h	78;"	d
ENETPROT_8021Q	drivers\enet\fsl_enet_rtcs_adapter.h	108;"	d
ENETPROT_ARP	drivers\enet\fsl_enet_rtcs_adapter.h	107;"	d
ENETPROT_ETHERNET	drivers\enet\fsl_enet_rtcs_adapter.h	110;"	d
ENETPROT_IP	drivers\enet\fsl_enet_rtcs_adapter.h	106;"	d
ENETPROT_IP6	drivers\enet\fsl_enet_rtcs_adapter.h	109;"	d
ENET_BD_ALIGNMENT	drivers\enet\fsl_enet_rtcs_adapter.h	57;"	d
ENET_COMMON_STATS_STRUCT	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_COMMON_STATS_STRUCT, * ENET_COMMON_STATS_STRUCT_PTR;$/;"	t	typeref:struct:enet_commom_stats_struct
ENET_COMMON_STATS_STRUCT_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_COMMON_STATS_STRUCT, * ENET_COMMON_STATS_STRUCT_PTR;$/;"	t	typeref:struct:enet_commom_stats_struct
ENET_DEFAULT_MAC_ADD	drivers\enet\fsl_enet_rtcs_adapter.h	124;"	d
ENET_ERROR	drivers\enet\fsl_enet_rtcs_adapter.h	67;"	d
ENET_ERROR_BASE	drivers\enet\fsl_enet_rtcs_adapter.h	65;"	d
ENET_GETOPT_8021QPRIO	drivers\enet\fsl_enet_rtcs_adapter.h	114;"	d
ENET_HEADER	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_HEADER, * ENET_HEADER_PTR;$/;"	t	typeref:struct:enet_header
ENET_HEADER_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_HEADER, * ENET_HEADER_PTR;$/;"	t	typeref:struct:enet_header
ENET_MII_CLOCK	drivers\enet\fsl_enet_rtcs_adapter.h	58;"	d
ENET_OK	drivers\enet\fsl_enet_rtcs_adapter.h	66;"	d
ENET_OPTION_HW_RX_IP_CHECKSUM	drivers\enet\fsl_enet_rtcs_adapter.h	119;"	d
ENET_OPTION_HW_RX_MAC_ERR	drivers\enet\fsl_enet_rtcs_adapter.h	121;"	d
ENET_OPTION_HW_RX_PROTOCOL_CHECKSUM	drivers\enet\fsl_enet_rtcs_adapter.h	120;"	d
ENET_OPTION_HW_TX_IP_CHECKSUM	drivers\enet\fsl_enet_rtcs_adapter.h	117;"	d
ENET_OPTION_HW_TX_PROTOCOL_CHECKSUM	drivers\enet\fsl_enet_rtcs_adapter.h	118;"	d
ENET_OPT_8021QTAG	drivers\enet\fsl_enet_rtcs_adapter.h	112;"	d
ENET_OPT_8023	drivers\enet\fsl_enet_rtcs_adapter.h	111;"	d
ENET_PCB_NUM	drivers\enet\fsl_enet_rtcs_adapter.h	49;"	d
ENET_PTP_RING_BUFFER_NUM	drivers\enet\fsl_enet_rtcs_adapter.h	60;"	d
ENET_RECEIVE_TASK_PRIO	drivers\enet\fsl_enet_rtcs_adapter.h	47;"	d
ENET_RX_BUFFER_ALIGNMENT	drivers\enet\fsl_enet_rtcs_adapter.h	55;"	d
ENET_RX_LARGE_BUFFER_NUM	drivers\enet\fsl_enet_rtcs_adapter.h	54;"	d
ENET_RX_RING_LEN	drivers\enet\fsl_enet_rtcs_adapter.h	52;"	d
ENET_SETOPT_8021QPRIO	drivers\enet\fsl_enet_rtcs_adapter.h	113;"	d
ENET_STATS	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_STATS, * ENET_STATS_PTR;$/;"	t	typeref:struct:enet_stats
ENET_STATS_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} ENET_STATS, * ENET_STATS_PTR;$/;"	t	typeref:struct:enet_stats
ENET_TASK_STACK_SIZE	drivers\enet\fsl_enet_rtcs_adapter.h	48;"	d
ENET_TX_BUFFER_ALIGNMENT	drivers\enet\fsl_enet_rtcs_adapter.h	56;"	d
ENET_TX_RING_LEN	drivers\enet\fsl_enet_rtcs_adapter.h	53;"	d
FRAG	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB_FRAGMENT  FRAG[1];    \/*!< Pointer to PCB fragment*\/$/;"	m	struct:pcb
FRAG	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB_FRAGMENT FRAG[2];    \/*!< Pointers to two PCB fragments*\/$/;"	m	struct:pcb2
FRAGMENT	drivers\enet\fsl_enet_rtcs_adapter.h	/^    unsigned char     *FRAGMENT;     \/*!< brief Pointer to fragment*\/$/;"	m	struct:pcb_fragment
FREE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB_FREE_FPTR     FREE;   \/*!< Function that frees PCB*\/$/;"	m	struct:pcb
FREE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB_FREE_FPTR FREE;      \/*!< Function that frees PCB*\/$/;"	m	struct:pcb2
LENGTH	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t           LENGTH;       \/*!< Packet fragment length*\/$/;"	m	struct:pcb_fragment
PCB	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB, * PCB_PTR;$/;"	t	typeref:struct:pcb
PCB2	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB2,  *PCB2_PTR;$/;"	t	typeref:struct:pcb2
PCB2_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB2,  *PCB2_PTR;$/;"	t	typeref:struct:pcb2
PCB_FRAGMENT	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB_FRAGMENT, * PCB_FRAGMENT_PTR;$/;"	t	typeref:struct:pcb_fragment
PCB_FRAGMENT_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB_FRAGMENT, * PCB_FRAGMENT_PTR;$/;"	t	typeref:struct:pcb_fragment
PCB_FREE_FPTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef void (*  PCB_FREE_FPTR)(struct pcb *);$/;"	t
PCB_MINIMUM_SIZE	drivers\enet\fsl_enet_rtcs_adapter.h	125;"	d
PCB_PTR	drivers\enet\fsl_enet_rtcs_adapter.h	/^} PCB, * PCB_PTR;$/;"	t	typeref:struct:pcb
PCB_free	drivers\enet\fsl_enet_rtcs_adapter.h	126;"	d
PRIVATE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    void   *PRIVATE;          \/*!< Private PCB information*\/$/;"	m	struct:pcb
PRIVATE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    void  *PRIVATE;          \/*!< Private PCB information*\/$/;"	m	struct:pcb2
QUEUEADD	drivers\enet\fsl_enet_rtcs_adapter.h	172;"	d
QUEUEGET	drivers\enet\fsl_enet_rtcs_adapter.h	182;"	d
RX_FRAGS_EXCEEDED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     RX_FRAGS_EXCEEDED;$/;"	m	struct:enet_stats
RX_HISTOGRAM	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     RX_HISTOGRAM[ENET_HISTOGRAM_ENTRIES];  $/;"	m	struct:enet_stats
RX_LARGE_BUFFERS_EXHAUSTED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     RX_LARGE_BUFFERS_EXHAUSTED;$/;"	m	struct:enet_stats
RX_PCBS_EXHAUSTED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     RX_PCBS_EXHAUSTED;$/;"	m	struct:enet_stats
SOURCE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    _enet_address    SOURCE;   \/*!< source mac address*\/$/;"	m	struct:enet_header
ST_RX_ALIGN	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_ALIGN;          \/*!< Frame Alignment error*\/$/;"	m	struct:enet_stats
ST_RX_COPY_LARGE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_COPY_LARGE;     \/*!< Driver had to copy packet *\/$/;"	m	struct:enet_stats
ST_RX_COPY_SMALL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_COPY_SMALL;     \/*!< Driver had to copy packet *\/$/;"	m	struct:enet_stats
ST_RX_DISCARDED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_DISCARDED;     \/*!< Discarded unrecognized protocol*\/$/;"	m	struct:enet_commom_stats_struct
ST_RX_ERRORS	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_ERRORS;        \/*!< Discarded error during reception*\/$/;"	m	struct:enet_commom_stats_struct
ST_RX_FCS	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_FCS;            \/*!< CRC error  *\/$/;"	m	struct:enet_stats
ST_RX_GIANT	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_GIANT;          \/*!< Giant packet received*\/$/;"	m	struct:enet_stats
ST_RX_LATECOLL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_LATECOLL;       \/*!< Late collision *\/$/;"	m	struct:enet_stats
ST_RX_MISSED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_MISSED;        \/*!<  Number of missed packets*\/$/;"	m	struct:enet_commom_stats_struct
ST_RX_OVERRUN	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_OVERRUN;        \/*!< DMA overrun*\/$/;"	m	struct:enet_stats
ST_RX_RUNT	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_RUNT;           \/*!< Runt packet received *\/$/;"	m	struct:enet_stats
ST_RX_TOTAL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_RX_TOTAL;         \/*!< Total number of received packets*\/$/;"	m	struct:enet_commom_stats_struct
ST_TX_CARRIER	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_CARRIER;        \/*!< Carrier sense lost*\/$/;"	m	struct:enet_stats
ST_TX_COPY_LARGE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_COPY_LARGE;     \/*!< Driver had to copy packet *\/$/;"	m	struct:enet_stats
ST_TX_COPY_SMALL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_COPY_SMALL;     \/*!< Driver had to copy packet *\/$/;"	m	struct:enet_stats
ST_TX_DEFERRED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_DEFERRED;       \/*!< Transmission deferred*\/$/;"	m	struct:enet_stats
ST_TX_DISCARDED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_DISCARDED;     \/*!< Discarded bad packet*\/$/;"	m	struct:enet_commom_stats_struct
ST_TX_ERRORS	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_ERRORS;        \/*!< Error during transmission*\/$/;"	m	struct:enet_commom_stats_struct
ST_TX_EXCESSCOLL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_EXCESSCOLL;     \/*!< Excessive collisions*\/$/;"	m	struct:enet_stats
ST_TX_LATECOLL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_LATECOLL;       \/*!< Late collision*\/$/;"	m	struct:enet_stats
ST_TX_MISSED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_MISSED;        \/*!< Discarded transmit ring full*\/$/;"	m	struct:enet_commom_stats_struct
ST_TX_SQE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_SQE;            \/*!< Heartbeat lost*\/$/;"	m	struct:enet_stats
ST_TX_TOTAL	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_TOTAL;         \/*!< Total number of transmitted packets*\/$/;"	m	struct:enet_commom_stats_struct
ST_TX_UNDERRUN	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     ST_TX_UNDERRUN;       \/*!< DMA underrun*\/$/;"	m	struct:enet_stats
TX_ALIGNED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     TX_ALIGNED;$/;"	m	struct:enet_stats
TX_ALL_ALIGNED	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     TX_ALL_ALIGNED;$/;"	m	struct:enet_stats
TX_HISTOGRAM	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint32_t     TX_HISTOGRAM[ENET_HISTOGRAM_ENTRIES];  $/;"	m	struct:enet_stats
TYPE	drivers\enet\fsl_enet_rtcs_adapter.h	/^    unsigned char    TYPE[2];  \/*!< protocol type*\/$/;"	m	struct:enet_header
__FSL_ENET_RTCS_ADAPTOR_H__	drivers\enet\fsl_enet_rtcs_adapter.h	32;"	d
_enet_address	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef unsigned char   _enet_address[6];$/;"	t
_enet_handle	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef void * _enet_handle;$/;"	t
command	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint8_t command[1];        \/*!< Command region*\/$/;"	m	struct:enet_8022_header
dsap	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint8_t dsap[1];           \/*!< DSAP region*\/$/;"	m	struct:enet_8022_header
enet_8022_header	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct enet_8022_header$/;"	s
enet_8022_header_ptr	drivers\enet\fsl_enet_rtcs_adapter.h	/^}enet_8022_header_t, *enet_8022_header_ptr;$/;"	t	typeref:struct:enet_8022_header
enet_8022_header_t	drivers\enet\fsl_enet_rtcs_adapter.h	/^}enet_8022_header_t, *enet_8022_header_ptr;$/;"	t	typeref:struct:enet_8022_header
enet_commom_stats_struct	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct enet_commom_stats_struct {$/;"	s
enet_header	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct enet_header $/;"	s
enet_stats	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct enet_stats {$/;"	s
htonc	drivers\enet\fsl_enet_rtcs_adapter.h	139;"	d
htone	drivers\enet\fsl_enet_rtcs_adapter.h	155;"	d
htonl	drivers\enet\fsl_enet_rtcs_adapter.h	129;"	d
htons	drivers\enet\fsl_enet_rtcs_adapter.h	135;"	d
ntohc	drivers\enet\fsl_enet_rtcs_adapter.h	154;"	d
ntohe	drivers\enet\fsl_enet_rtcs_adapter.h	163;"	d
ntohl	drivers\enet\fsl_enet_rtcs_adapter.h	142;"	d
ntohs	drivers\enet\fsl_enet_rtcs_adapter.h	149;"	d
oui	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint8_t oui[3];            \/*!< OUI region*\/$/;"	m	struct:enet_8022_header
pcb	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct pcb $/;"	s
pcb2	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct pcb2$/;"	s
pcbHead	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB *pcbHead;     \/*!< pcb buffer head*\/      $/;"	m	struct:pcb_queue
pcbTail	drivers\enet\fsl_enet_rtcs_adapter.h	/^    PCB *pcbTail;     \/*!< pcb buffer tail*\/ $/;"	m	struct:pcb_queue
pcb_fragment	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct pcb_fragment $/;"	s
pcb_queue	drivers\enet\fsl_enet_rtcs_adapter.h	/^typedef struct pcb_queue  $/;"	s
pcb_queue	drivers\enet\fsl_enet_rtcs_adapter.h	/^}pcb_queue;$/;"	t	typeref:struct:pcb_queue
ssap	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint8_t ssap[1];           \/*!< SSAP region*\/$/;"	m	struct:enet_8022_header
type	drivers\enet\fsl_enet_rtcs_adapter.h	/^    uint16_t type;             \/*!< type region*\/$/;"	m	struct:enet_8022_header
ENET_OSCCLK_OUTCLK_SRC	drivers\enet\src\fsl_enet_driver.c	54;"	d	file:
ENET_RX_PRIORITY	drivers\enet\src\fsl_enet_driver.c	50;"	d	file:
ENET_TS_PRIORITY	drivers\enet\src\fsl_enet_driver.c	51;"	d	file:
ENET_TX_PRIORITY	drivers\enet\src\fsl_enet_driver.c	49;"	d	file:
enetIfHandle	drivers\enet\src\fsl_enet_driver.c	/^void *enetIfHandle;$/;"	v
enet_mac_add_multicast_group	drivers\enet\src\fsl_enet_driver.c	/^ uint32_t enet_mac_add_multicast_group(uint32_t instance, enet_multicast_group_t *multiGroupPtr, enetMacAddr address)$/;"	f
enet_mac_bd_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_bd_init(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_calculate_crc32	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_calculate_crc32(enetMacAddr address, uint32_t *crcValue)$/;"	f
enet_mac_close	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_close(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_dequeue_buffer	drivers\enet\src\fsl_enet_driver.c	/^void *enet_mac_dequeue_buffer( void **queue)$/;"	f
enet_mac_enqueue_buffer	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_enqueue_buffer( void **queue, void *buffer)$/;"	f
enet_mac_fifo_accelerator_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_fifo_accelerator_init(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_init(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_leave_multicast_group	drivers\enet\src\fsl_enet_driver.c	/^ uint32_t enet_mac_leave_multicast_group(uint32_t instance, enet_multicast_group_t *multiGroupPtr, enetMacAddr address)$/;"	f
enet_mac_mii_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_mii_init(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_receive	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_receive(enet_dev_if_t * enetIfPtr, enet_mac_packet_buffer_t *packBuffer)$/;"	f
enet_mac_rx_error_stats	drivers\enet\src\fsl_enet_driver.c	/^bool enet_mac_rx_error_stats(enet_dev_if_t * enetIfPtr, uint32_t data)$/;"	f
enet_mac_rx_isr	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_rx_isr(void *enetIfPtr)$/;"	f
enet_mac_send	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_send(enet_dev_if_t * enetIfPtr, uint8_t *packet, uint32_t size)$/;"	f
enet_mac_ts_isr	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_ts_isr(void *enetIfPtr)$/;"	f
enet_mac_tx_cleanup	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_tx_cleanup(enet_dev_if_t * enetIfPtr)$/;"	f
enet_mac_tx_error_stats	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_tx_error_stats(enet_dev_if_t * enetIfPtr,void *curBd)$/;"	f
enet_mac_tx_isr	drivers\enet\src\fsl_enet_driver.c	/^void enet_mac_tx_isr(void *enetIfPtr)$/;"	f
enet_mac_update_rxbd	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mac_update_rxbd(enet_dev_if_t * enetIfPtr, bool isBufferUpdate)$/;"	f
enet_mii_read	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mii_read(uint32_t instance, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)$/;"	f
enet_mii_write	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_mii_write(uint32_t instance, uint32_t phyAddr, uint32_t phyReg, uint32_t data)$/;"	f
enet_ptp_correction_time	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_correction_time(uint32_t instance, int32_t drift)$/;"	f
enet_ptp_deinit	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_deinit(enet_mac_context_t *enetContextPtr)$/;"	f
enet_ptp_get_time	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_get_time(enet_mac_ptp_time_t *ptpTimerPtr)$/;"	f
enet_ptp_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_init(enet_dev_if_t *enetIfPtr)$/;"	f
enet_ptp_ioctl	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_ioctl(enet_dev_if_t * enetIfPtr, uint32_t commandId, void *inOutPtr)$/;"	f
enet_ptp_l2queue_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_l2queue_init(enet_private_ptp_buffer_t *ptpBuffer)$/;"	f
enet_ptp_parse	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_parse(uint8_t *packet, enet_mac_ptp_ts_data_t *ptpTsPtr, bool *isPtpMsg)$/;"	f
enet_ptp_quick_parse	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_quick_parse(uint8_t *packet,bool *isPtpMsg)$/;"	f
enet_ptp_receive_l2packet	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_receive_l2packet(enet_dev_if_t * enetIfPtr,void *paramPtr)$/;"	f
enet_ptp_ring_init	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_ring_init(enet_mac_ptp_ts_ring_t *ptpTsRingPtr)$/;"	f
enet_ptp_ring_is_full	drivers\enet\src\fsl_enet_driver.c	/^bool enet_ptp_ring_is_full(enet_mac_ptp_ts_ring_t *ptpTsRingPtr)$/;"	f
enet_ptp_ring_search	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_ring_search(enet_mac_ptp_ts_ring_t *ptpTsRingPtr, enet_mac_ptp_ts_data_t *data)$/;"	f
enet_ptp_ring_update	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_ring_update(enet_mac_ptp_ts_ring_t *ptpTsRingPtr, enet_mac_ptp_ts_data_t *data)$/;"	f
enet_ptp_send_l2packet	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_send_l2packet(enet_dev_if_t * enetIfPtr, void *paramPtr)$/;"	f
enet_ptp_service_l2packet	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_service_l2packet(enet_dev_if_t * enetIfPtr, uint8_t *packet, uint16_t length)$/;"	f
enet_ptp_set_time	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_set_time(enet_mac_ptp_time_t *ptpTimerPtr)$/;"	f
enet_ptp_start	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_start(uint32_t instance, bool isSlaveEnabled)$/;"	f
enet_ptp_stop	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_stop(uint32_t instance)$/;"	f
enet_ptp_store_rx_timestamp	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_store_rx_timestamp(enet_private_ptp_buffer_t *ptpBuffer, uint8_t *packet, void *bdPtr)$/;"	f
enet_ptp_store_tx_timestamp	drivers\enet\src\fsl_enet_driver.c	/^uint32_t enet_ptp_store_tx_timestamp(enet_private_ptp_buffer_t *ptpBuffer,void *bdPtr)$/;"	f
g_enetMacApi	drivers\enet\src\fsl_enet_driver.c	/^const enet_mac_api_t g_enetMacApi = $/;"	v
g_ptpMasterTime	drivers\enet\src\fsl_enet_driver.c	/^enet_ptp_master_time_data_t g_ptpMasterTime;$/;"	v
ENET_1588_Timer_IRQHandler	drivers\enet\src\fsl_enet_irq.c	/^void ENET_1588_Timer_IRQHandler(void)$/;"	f
ENET_Receive_IRQHandler	drivers\enet\src\fsl_enet_irq.c	/^void ENET_Receive_IRQHandler(void)$/;"	f
ENET_TIMER_CHANNEL_NUM	drivers\enet\src\fsl_enet_irq.c	50;"	d	file:
ENET_Transmit_IRQHandler	drivers\enet\src\fsl_enet_irq.c	/^void ENET_Transmit_IRQHandler(void)$/;"	f
_enet_irq_number	drivers\enet\src\fsl_enet_irq.c	/^typedef enum _enet_irq_number$/;"	g	file:
enetIntMap	drivers\enet\src\fsl_enet_irq.c	/^uint8_t enetIntMap[kEnetIntNum] = $/;"	v
enet_irq_ids	drivers\enet\src\fsl_enet_irq.c	/^IRQn_Type enet_irq_ids[HW_ENET_INSTANCE_COUNT][FSL_FEATURE_ENET_INTERRUPT_COUNT] = $/;"	v
enet_irq_number_t	drivers\enet\src\fsl_enet_irq.c	/^}enet_irq_number_t;$/;"	t	typeref:enum:_enet_irq_number	file:
kEnetMiiErrorNumber	drivers\enet\src\fsl_enet_irq.c	/^    kEnetMiiErrorNumber = 3     \/*!< enet mii error irq number*\/$/;"	e	enum:_enet_irq_number	file:
kEnetReceiveNumber	drivers\enet\src\fsl_enet_irq.c	/^    kEnetReceiveNumber = 1,     \/*!< enet receivce irq number*\/$/;"	e	enum:_enet_irq_number	file:
kEnetTransmitNumber	drivers\enet\src\fsl_enet_irq.c	/^    kEnetTransmitNumber = 2,    \/*!< enet transmit irq number*\/$/;"	e	enum:_enet_irq_number	file:
kEnetTsTimerNumber	drivers\enet\src\fsl_enet_irq.c	/^    kEnetTsTimerNumber = 0,     \/*!< enet ts_timer irq number*\/$/;"	e	enum:_enet_irq_number	file:
ENET_close	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_close(_enet_handle handle, uint16_t type)$/;"	f
ENET_errlist	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^static const char * ENET_errlist[ENETERR_MAX - ENETERR_MIN + 1] = {$/;"	v	file:
ENET_free	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^static void ENET_free(PCB_PTR packet)$/;"	f	file:
ENET_get_MTU	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_get_MTU(_enet_handle handle)$/;"	f
ENET_get_address	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_get_address(_enet_handle handle, _enet_address address)$/;"	f
ENET_get_mac_address	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_get_mac_address(uint32_t device, uint32_t value, _enet_address address)$/;"	f
ENET_get_next_device_handle	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^_enet_handle ENET_get_next_device_handle(_enet_handle handle)$/;"	f
ENET_get_options	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_get_options(_enet_handle handle)$/;"	f
ENET_get_speed	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_get_speed(_enet_handle handle)$/;"	f
ENET_get_stats	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^ENET_STATS_PTR ENET_get_stats(_enet_handle handle)$/;"	f
ENET_initialize	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_initialize(uint32_t device, _enet_address address,uint32_t flag, _enet_handle *handle)$/;"	f
ENET_join	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_join(_enet_handle handle, uint16_t type, _enet_address address)$/;"	f
ENET_leave	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_leave(_enet_handle handle, uint16_t type, _enet_address address)$/;"	f
ENET_link_status	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^bool ENET_link_status(_enet_handle handle)$/;"	f
ENET_mediactl	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_mediactl(_enet_handle handle, uint32_t commandId, void *inOutParam)$/;"	f
ENET_open	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_open(_enet_handle  handle, uint16_t type, void (* service)(PCB_PTR, void *), void *private)$/;"	f
ENET_phy_registers	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^bool ENET_phy_registers(_enet_handle handle, uint32_t numRegs, uint32_t *regPtr)$/;"	f
ENET_receive	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^static void ENET_receive(void *param) $/;"	f	file:
ENET_send	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_send(_enet_handle handle, PCB_PTR packet, uint32_t type, _enet_address dest, uint32_t flags)	$/;"	f
ENET_shutdown	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^uint32_t ENET_shutdown(_enet_handle handle)$/;"	f
ENET_strerror	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^const char * ENET_strerror(uint32_t  error)$/;"	f
enetDevIf	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^static enet_dev_if_t enetDevIf[HW_ENET_INSTANCE_COUNT];$/;"	v	file:
enetStats	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^ENET_STATS enetStats;$/;"	v
frameIsCollected	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^bool frameIsCollected = false;$/;"	v
g_enetMacCfg	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^enet_mac_config_t g_enetMacCfg[HW_ENET_INSTANCE_COUNT] = $/;"	v
g_enetPhyCfg	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^enet_phy_config_t g_enetPhyCfg[HW_ENET_INSTANCE_COUNT] =$/;"	v
packbuffer	drivers\enet\src\fsl_enet_rtcs_adapter.c	/^pcb_queue  packbuffer[HW_ENET_INSTANCE_COUNT];$/;"	v
__FSL_PHY_DRIVER_H__	drivers\enet\src\fsl_phy_driver.h	31;"	d
_enet_phy_control	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _enet_phy_control$/;"	g
_enet_phy_duplex	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _enet_phy_duplex$/;"	g
_enet_phy_register	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _enet_phy_register$/;"	g
_enet_phy_speed	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _enet_phy_speed$/;"	g
_enet_phy_status	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _enet_phy_status$/;"	g
_phy_status	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _phy_status$/;"	g
_phy_timeout	drivers\enet\src\fsl_phy_driver.h	/^typedef enum _phy_timeout$/;"	g
enet_phy_api	drivers\enet\src\fsl_phy_driver.h	/^typedef struct enet_phy_api$/;"	s
enet_phy_api_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_api_t;$/;"	t	typeref:struct:enet_phy_api
enet_phy_control_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_control_t;$/;"	t	typeref:enum:_enet_phy_control
enet_phy_duplex_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_duplex_t;$/;"	t	typeref:enum:_enet_phy_duplex
enet_phy_register_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_register_t;$/;"	t	typeref:enum:_enet_phy_register
enet_phy_speed_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_speed_t;$/;"	t	typeref:enum:_enet_phy_speed
enet_phy_status_t	drivers\enet\src\fsl_phy_driver.h	/^}enet_phy_status_t;$/;"	t	typeref:enum:_enet_phy_status
kEnetFullDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetFullDuplex = 1  \/*!< enet phy full duplex*\/$/;"	e	enum:_enet_phy_duplex
kEnetHalfDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetHalfDuplex = 0, \/*!< enet phy half duplex*\/$/;"	e	enum:_enet_phy_duplex
kEnetPhy100FullDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhy100FullDuplex = 0x18\/*!< enet phy 100M full duplex*\/$/;"	e	enum:_enet_phy_control
kEnetPhy100HalfDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhy100HalfDuplex = 0x8,\/*!< enet phy 100M half duplex*\/$/;"	e	enum:_enet_phy_control
kEnetPhy10FullDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhy10FullDuplex = 0x14,\/*!< enet phy 10M full duplex*\/$/;"	e	enum:_enet_phy_control
kEnetPhy10HalfDuplex	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhy10HalfDuplex = 0x4, \/*!< enet phy 10M half duplex*\/$/;"	e	enum:_enet_phy_control
kEnetPhyAutoNeg	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyAutoNeg = 0x1000,\/*!< enet phy auto negotiation control*\/$/;"	e	enum:_enet_phy_control
kEnetPhyAutoNegAble	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyAutoNegAble = 0x08, \/*!< enet phy auto negotiation ability*\/$/;"	e	enum:_enet_phy_status
kEnetPhyAutoNegComplete	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyAutoNegComplete = 0x20, \/*!< enet phy auto negotiation complete*\/$/;"	e	enum:_enet_phy_status
kEnetPhyCR	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyCR = 0, \/*!< phy control register *\/$/;"	e	enum:_enet_phy_register
kEnetPhyCt2	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyCt2 = 0x1f \/*!< phy control2 register*\/$/;"	e	enum:_enet_phy_register
kEnetPhyId1	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyId1 = 2, \/*!< phy identification register 1*\/$/;"	e	enum:_enet_phy_register
kEnetPhyId2	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyId2 = 3, \/*!< phy identification register 2*\/$/;"	e	enum:_enet_phy_register
kEnetPhyLinkStatus	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyLinkStatus = 0x4,  \/*!< enet phy link status bit*\/$/;"	e	enum:_enet_phy_status
kEnetPhyLoop	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyLoop = 0x4000, \/*!< enet phy loop control*\/$/;"	e	enum:_enet_phy_control
kEnetPhyReset	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhyReset = 0x8000, \/*!< enet phy reset control*\/$/;"	e	enum:_enet_phy_control
kEnetPhySR	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhySR = 1, \/*!< phy status register*\/$/;"	e	enum:_enet_phy_register
kEnetPhySpeed	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhySpeed = 0x2000, \/*! enet phy speed control*\/$/;"	e	enum:_enet_phy_control
kEnetPhySpeedDulpexMask	drivers\enet\src\fsl_phy_driver.h	/^    kEnetPhySpeedDulpexMask = 0x1c \/*!< enet phy speed mask on status register 2*\/$/;"	e	enum:_enet_phy_status
kEnetSpeed100M	drivers\enet\src\fsl_phy_driver.h	/^    kEnetSpeed100M = 1  \/*!< enet phy 100M speed*\/$/;"	e	enum:_enet_phy_speed
kEnetSpeed10M	drivers\enet\src\fsl_phy_driver.h	/^    kEnetSpeed10M = 0,   \/*!< enet phy 10M speed*\/$/;"	e	enum:_enet_phy_speed
kPhyTimeout	drivers\enet\src\fsl_phy_driver.h	/^    kPhyTimeout = 0x10000, \/*!< enet reset timeout*\/$/;"	e	enum:_phy_timeout
kStatus_PHY_Fail	drivers\enet\src\fsl_phy_driver.h	/^    kStatus_PHY_Fail = 3  \/*!< Phy Fail*\/	$/;"	e	enum:_phy_status
kStatus_PHY_InvaildInput	drivers\enet\src\fsl_phy_driver.h	/^    kStatus_PHY_InvaildInput = 1, \/*!< Invalid phy input parameter*\/$/;"	e	enum:_phy_status
kStatus_PHY_Success	drivers\enet\src\fsl_phy_driver.h	/^    kStatus_PHY_Success = 0, \/*!< Success*\/$/;"	e	enum:_phy_status
kStatus_PHY_TimeOut	drivers\enet\src\fsl_phy_driver.h	/^    kStatus_PHY_TimeOut = 2,  \/*!< PHY timeout*\/$/;"	e	enum:_phy_status
phy_auto_discover	drivers\enet\src\fsl_phy_driver.h	/^    uint32_t (* phy_auto_discover)(enet_dev_if_t * enetIfPtr);\/*!< phy auto discover*\/$/;"	m	struct:enet_phy_api
phy_get_link_duplex	drivers\enet\src\fsl_phy_driver.h	/^    uint32_t (* phy_get_link_duplex)(enet_dev_if_t * enetIfPtr, enet_phy_duplex_t *duplex);\/*!< get phy link duplex*\/$/;"	m	struct:enet_phy_api
phy_get_link_speed	drivers\enet\src\fsl_phy_driver.h	/^    uint32_t (* phy_get_link_speed)(enet_dev_if_t * enetIfPtr, enet_phy_speed_t *speed);\/*!<  get phy speed*\/$/;"	m	struct:enet_phy_api
phy_get_link_status	drivers\enet\src\fsl_phy_driver.h	/^    uint32_t (* phy_get_link_status)(enet_dev_if_t * enetIfPtr, bool *status);\/*! get phy link status*\/$/;"	m	struct:enet_phy_api
phy_init	drivers\enet\src\fsl_phy_driver.h	/^    uint32_t (* phy_init)(enet_dev_if_t * enetIfPtr);\/*!< phy initialize*\/$/;"	m	struct:enet_phy_api
phy_status_t	drivers\enet\src\fsl_phy_driver.h	/^}phy_status_t;$/;"	t	typeref:enum:_phy_status
phy_timeout_t	drivers\enet\src\fsl_phy_driver.h	/^}phy_timeout_t;$/;"	t	typeref:enum:_phy_timeout
BDMMode	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t   BDMMode;$/;"	m	struct:FtmDriverInfo
FtmChannelInfo	drivers\flextimer\fsl_ftm_driver.h	/^typedef struct FtmChannelInfo$/;"	s
FtmCombinedChannelSetting	drivers\flextimer\fsl_ftm_driver.h	/^typedef struct FtmCombinedChannelSetting$/;"	s
FtmDriverInfo	drivers\flextimer\fsl_ftm_driver.h	/^typedef struct FtmDriverInfo {$/;"	s
FtmDriverPwmParam	drivers\flextimer\fsl_ftm_driver.h	/^typedef struct FtmDriverPwmParam$/;"	s
__FSL_FTM_DRIVER_H__	drivers\flextimer\fsl_ftm_driver.h	31;"	d
channleInfo	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_channel_info_t  channleInfo[HW_FTM_CHANNEL_COUNT];$/;"	m	struct:FtmDriverInfo
clockPS	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_clock_ps_t      clockPS;$/;"	m	struct:FtmDriverInfo
clockSrc	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_clock_source_t  clockSrc;$/;"	m	struct:FtmDriverInfo
combinedChanSetting	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_combined_channel_info_t  combinedChanSetting[HW_FTM_CHANNEL_PAIR_COUNT];$/;"	m	struct:FtmDriverInfo
counterInitVal	drivers\flextimer\fsl_ftm_driver.h	/^    uint16_t            counterInitVal;$/;"	m	struct:FtmDriverInfo
counterMod	drivers\flextimer\fsl_ftm_driver.h	/^    uint16_t            counterMod;$/;"	m	struct:FtmDriverInfo
deadtimePrescaler	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_deadtime_ps_t   deadtimePrescaler;$/;"	m	struct:FtmDriverInfo
edge_mode	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_edge_mode_t     edge_mode;              \/*!< capture mode *\/$/;"	m	struct:FtmChannelInfo
enableFaultPin0	drivers\flextimer\fsl_ftm_driver.h	/^    bool enableFaultPin0;$/;"	m	struct:FtmDriverInfo
enableFaultPin1	drivers\flextimer\fsl_ftm_driver.h	/^    bool enableFaultPin1;$/;"	m	struct:FtmDriverInfo
enableFaultPin2	drivers\flextimer\fsl_ftm_driver.h	/^    bool enableFaultPin2;$/;"	m	struct:FtmDriverInfo
enableFaultPin3	drivers\flextimer\fsl_ftm_driver.h	/^    bool enableFaultPin3;$/;"	m	struct:FtmDriverInfo
externalClockPin	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t externalClockPin;$/;"	m	struct:FtmDriverInfo
frequencyHZ	drivers\flextimer\fsl_ftm_driver.h	/^    uint32_t            frequencyHZ;$/;"	m	struct:FtmDriverInfo
ftm_channel_info_t	drivers\flextimer\fsl_ftm_driver.h	/^}ftm_channel_info_t;$/;"	t	typeref:struct:FtmChannelInfo
ftm_combined_channel_info_t	drivers\flextimer\fsl_ftm_driver.h	/^}ftm_combined_channel_info_t;$/;"	t	typeref:struct:FtmCombinedChannelSetting
ftm_driver_info_t	drivers\flextimer\fsl_ftm_driver.h	/^} ftm_driver_info_t;$/;"	t	typeref:struct:FtmDriverInfo
ftm_pwm_param_t	drivers\flextimer\fsl_ftm_driver.h	/^}ftm_pwm_param_t;$/;"	t	typeref:struct:FtmDriverPwmParam
inputCaptureFilterVal	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t             inputCaptureFilterVal;$/;"	m	struct:FtmChannelInfo
instance	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t instance;                \/*!< name FTM instance FTM0, FTM1, FTM2, FTM3 *\/$/;"	m	struct:FtmDriverInfo
interruptInstance	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t interruptInstance;$/;"	m	struct:FtmDriverInfo
interruptPriority	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t interruptPriority;$/;"	m	struct:FtmDriverInfo
isCNTINSync	drivers\flextimer\fsl_ftm_driver.h	/^    bool isCNTINSync;$/;"	m	struct:FtmDriverInfo
isChannel0LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel0LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel1LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel1LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel2LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel2LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel3LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel3LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel4LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel4LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel5LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel5LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel6LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel6LoadSel;$/;"	m	struct:FtmDriverInfo
isChannel7LoadSel	drivers\flextimer\fsl_ftm_driver.h	/^    bool isChannel7LoadSel;$/;"	m	struct:FtmDriverInfo
isChannelDMA	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isChannelDMA;$/;"	m	struct:FtmChannelInfo
isChannelEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isChannelEnabled;$/;"	m	struct:FtmChannelInfo
isChannelInterrupt	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isChannelInterrupt;$/;"	m	struct:FtmChannelInfo
isChannlePinEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isChannlePinEnabled;$/;"	m	struct:FtmChannelInfo
isComplementaryMode	drivers\flextimer\fsl_ftm_driver.h	/^    bool   isComplementaryMode;$/;"	m	struct:FtmCombinedChannelSetting
isDeadTimeEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool   isDeadTimeEnabled;$/;"	m	struct:FtmCombinedChannelSetting
isEnhancedSyncMode	drivers\flextimer\fsl_ftm_driver.h	/^    bool isEnhancedSyncMode;$/;"	m	struct:FtmDriverInfo
isExternalCINTTrigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalCINTTrigger;$/;"	m	struct:FtmDriverInfo
isExternalChan0Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan0Trigger;$/;"	m	struct:FtmDriverInfo
isExternalChan1Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan1Trigger;$/;"	m	struct:FtmDriverInfo
isExternalChan2Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan2Trigger;$/;"	m	struct:FtmDriverInfo
isExternalChan3Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan3Trigger;$/;"	m	struct:FtmDriverInfo
isExternalChan4Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan4Trigger;$/;"	m	struct:FtmDriverInfo
isExternalChan5Trigger	drivers\flextimer\fsl_ftm_driver.h	/^    bool isExternalChan5Trigger;$/;"	m	struct:FtmDriverInfo
isFTMMode	drivers\flextimer\fsl_ftm_driver.h	/^    bool      isFTMMode;$/;"	m	struct:FtmDriverInfo
isFaultCTRLEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool   isFaultCTRLEnabled;$/;"	m	struct:FtmCombinedChannelSetting
isFaultCTRLMode	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultCTRLMode;$/;"	m	struct:FtmDriverInfo
isFaultInput0Filter	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput0Filter;$/;"	m	struct:FtmDriverInfo
isFaultInput0Polarity	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput0Polarity;$/;"	m	struct:FtmDriverInfo
isFaultInput1Filter	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput1Filter;$/;"	m	struct:FtmDriverInfo
isFaultInput1Polarity	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput1Polarity;$/;"	m	struct:FtmDriverInfo
isFaultInput2Filter	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput2Filter;$/;"	m	struct:FtmDriverInfo
isFaultInput2Polarity	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput2Polarity;$/;"	m	struct:FtmDriverInfo
isFaultInput3Filter	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput3Filter;$/;"	m	struct:FtmDriverInfo
isFaultInput3Polarity	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInput3Polarity;$/;"	m	struct:FtmDriverInfo
isFaultInputFilter	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInputFilter;$/;"	m	struct:FtmDriverInfo
isFaultInterrupt	drivers\flextimer\fsl_ftm_driver.h	/^    bool isFaultInterrupt;$/;"	m	struct:FtmDriverInfo
isGlobalTimeBase	drivers\flextimer\fsl_ftm_driver.h	/^    bool      isGlobalTimeBase;$/;"	m	struct:FtmDriverInfo
isGlobalTimeOutput	drivers\flextimer\fsl_ftm_driver.h	/^    bool      isGlobalTimeOutput;$/;"	m	struct:FtmDriverInfo
isHWTriggerMode	drivers\flextimer\fsl_ftm_driver.h	/^    bool isHWTriggerMode;$/;"	m	struct:FtmDriverInfo
isHardwareTrigger0	drivers\flextimer\fsl_ftm_driver.h	/^    bool isHardwareTrigger0;$/;"	m	struct:FtmDriverInfo
isHardwareTrigger1	drivers\flextimer\fsl_ftm_driver.h	/^    bool isHardwareTrigger1;$/;"	m	struct:FtmDriverInfo
isHardwareTrigger2	drivers\flextimer\fsl_ftm_driver.h	/^    bool isHardwareTrigger2;$/;"	m	struct:FtmDriverInfo
isINVCTRLSync	drivers\flextimer\fsl_ftm_driver.h	/^    bool isINVCTRLSync;$/;"	m	struct:FtmDriverInfo
isInitChannelOutput	drivers\flextimer\fsl_ftm_driver.h	/^    bool isInitChannelOutput;$/;"	m	struct:FtmDriverInfo
isInterruptRequest	drivers\flextimer\fsl_ftm_driver.h	/^    bool isInterruptRequest;$/;"	m	struct:FtmDriverInfo
isInvertingEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool   isInvertingEnabled;$/;"	m	struct:FtmCombinedChannelSetting
isLoadEnable	drivers\flextimer\fsl_ftm_driver.h	/^    bool isLoadEnable;$/;"	m	struct:FtmDriverInfo
isMaxLoadingPoint	drivers\flextimer\fsl_ftm_driver.h	/^    bool isMaxLoadingPoint;$/;"	m	struct:FtmDriverInfo
isMinLoadingPoint	drivers\flextimer\fsl_ftm_driver.h	/^    bool isMinLoadingPoint;$/;"	m	struct:FtmDriverInfo
isOutmaskSync	drivers\flextimer\fsl_ftm_driver.h	/^    bool isOutmaskSync;$/;"	m	struct:FtmDriverInfo
isSWOCCTRLsync	drivers\flextimer\fsl_ftm_driver.h	/^    bool isSWOCCTRLsync;$/;"	m	struct:FtmDriverInfo
isSWTriggermode	drivers\flextimer\fsl_ftm_driver.h	/^    bool isSWTriggermode;$/;"	m	struct:FtmDriverInfo
isSoftwareOutput	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isSoftwareOutput;       \/*!< 1:output high 0:output low*\/$/;"	m	struct:FtmChannelInfo
isSoftwareOutputCTRL	drivers\flextimer\fsl_ftm_driver.h	/^    bool                isSoftwareOutputCTRL;$/;"	m	struct:FtmChannelInfo
isSyncEnabled	drivers\flextimer\fsl_ftm_driver.h	/^    bool   isSyncEnabled;$/;"	m	struct:FtmCombinedChannelSetting
isTimerOverFlowInterrupt	drivers\flextimer\fsl_ftm_driver.h	/^    bool isTimerOverFlowInterrupt;$/;"	m	struct:FtmDriverInfo
isWriteProtection	drivers\flextimer\fsl_ftm_driver.h	/^    bool      isWriteProtection;$/;"	m	struct:FtmDriverInfo
mode	drivers\flextimer\fsl_ftm_driver.h	/^    ftm_config_mode_t   mode;                   \/*!< flextimer operation mode *\/$/;"	m	struct:FtmChannelInfo
uCnV	drivers\flextimer\fsl_ftm_driver.h	/^  uint16_t uCnV;                   \/*!< In combined mode, the n channel's count value, the duty cycle=|Cn+1V -CnV| *\/$/;"	m	struct:FtmDriverPwmParam
uDeadTimeCount	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t             uDeadTimeCount;$/;"	m	struct:FtmDriverInfo
uFrequencyHZ	drivers\flextimer\fsl_ftm_driver.h	/^  uint32_t uFrequencyHZ;           \/*!< This is the PWM's period *\/$/;"	m	struct:FtmDriverPwmParam
uNumOfOverflows	drivers\flextimer\fsl_ftm_driver.h	/^    uint8_t             uNumOfOverflows;$/;"	m	struct:FtmDriverInfo
uPulseHighPercentage	drivers\flextimer\fsl_ftm_driver.h	/^  uint32_t uPulseHighPercentage;   \/*!< This period is high pulse width *\/$/;"	m	struct:FtmDriverPwmParam
uPulseLowPercentage	drivers\flextimer\fsl_ftm_driver.h	/^  uint32_t uPulseLowPercentage;    \/*!< This period is low pulse width *\/$/;"	m	struct:FtmDriverPwmParam
ftm_init	drivers\flextimer\src\fsl_ftm_driver.c	/^void ftm_init(uint8_t instance, ftm_driver_info_t * info)$/;"	f
ftm_pwm_configure	drivers\flextimer\src\fsl_ftm_driver.c	/^void ftm_pwm_configure(ftm_driver_info_t *info,uint8_t channel, ftm_pwm_param_t *param)$/;"	f
ftm_pwm_start	drivers\flextimer\src\fsl_ftm_driver.c	/^void ftm_pwm_start( ftm_driver_info_t *info, uint8_t channel)$/;"	f
ftm_pwm_stop	drivers\flextimer\src\fsl_ftm_driver.c	/^void ftm_pwm_stop( ftm_driver_info_t *info,uint8_t channel)$/;"	f
ftm_shutdown	drivers\flextimer\src\fsl_ftm_driver.c	/^void ftm_shutdown(ftm_driver_info_t *state)$/;"	f
FTM0_IRQHandler	drivers\flextimer\src\fsl_ftm_shared_irqs.c	/^void FTM0_IRQHandler(void)$/;"	f
FTM1_IRQHandler	drivers\flextimer\src\fsl_ftm_shared_irqs.c	/^void FTM1_IRQHandler(void)$/;"	f
FTM2_IRQHandler	drivers\flextimer\src\fsl_ftm_shared_irqs.c	/^void FTM2_IRQHandler(void)$/;"	f
FTM3_IRQHandler	drivers\flextimer\src\fsl_ftm_shared_irqs.c	/^void FTM3_IRQHandler(void)$/;"	f
ftm_handle_shared_irq	drivers\flextimer\src\fsl_ftm_shared_irqs.c	/^static void ftm_handle_shared_irq(uint32_t instance)$/;"	f	file:
GPIO_PINS_OUT_OF_RANGE	drivers\gpio\fsl_gpio_driver.h	82;"	d
__FSL_GPIO_DRIVER_H__	drivers\gpio\fsl_gpio_driver.h	31;"	d
config	drivers\gpio\fsl_gpio_driver.h	/^    gpio_input_pin_config_t config; \/*!< Input pin configuration structure.*\/$/;"	m	struct:gpioInputPin
config	drivers\gpio\fsl_gpio_driver.h	/^    gpio_output_pin_config_t config;\/*!< Input pin configuration structure.*\/$/;"	m	struct:gpioOutputPin
driveStrength	drivers\gpio\fsl_gpio_driver.h	/^    port_drive_strength_t driveStrength;\/*!< Select low\/high drive strength.*\/$/;"	m	struct:gpioOutputPinConfig
gpioInputPin	drivers\gpio\fsl_gpio_driver.h	/^typedef struct gpioInputPin {$/;"	s
gpioInputPinConfig	drivers\gpio\fsl_gpio_driver.h	/^typedef struct gpioInputPinConfig {$/;"	s
gpioOutputPin	drivers\gpio\fsl_gpio_driver.h	/^typedef struct gpioOutputPin {$/;"	s
gpioOutputPinConfig	drivers\gpio\fsl_gpio_driver.h	/^typedef struct gpioOutputPinConfig {$/;"	s
gpio_input_pin_config_t	drivers\gpio\fsl_gpio_driver.h	/^} gpio_input_pin_config_t;$/;"	t	typeref:struct:gpioInputPinConfig
gpio_input_pin_t	drivers\gpio\fsl_gpio_driver.h	/^} gpio_input_pin_t;$/;"	t	typeref:struct:gpioInputPin
gpio_isr_callback_t	drivers\gpio\fsl_gpio_driver.h	/^typedef void (*gpio_isr_callback_t)(void);$/;"	t
gpio_output_pin_config_t	drivers\gpio\fsl_gpio_driver.h	/^} gpio_output_pin_config_t;$/;"	t	typeref:struct:gpioOutputPinConfig
gpio_output_pin_t	drivers\gpio\fsl_gpio_driver.h	/^} gpio_output_pin_t;$/;"	t	typeref:struct:gpioOutputPin
interrupt	drivers\gpio\fsl_gpio_driver.h	/^    port_interrupt_config_t interrupt;  \/*!< Select interrupt\/DMA request.*\/$/;"	m	struct:gpioInputPinConfig
isDigitalFilterEnabled	drivers\gpio\fsl_gpio_driver.h	/^    bool isDigitalFilterEnabled;        \/*!< Enable or disable digital filter.*\/$/;"	m	struct:gpioInputPinConfig
isOpenDrainEnabled	drivers\gpio\fsl_gpio_driver.h	/^    bool isOpenDrainEnabled;            \/*!< Enable or disable open drain.*\/$/;"	m	struct:gpioOutputPinConfig
isPassiveFilterEnabled	drivers\gpio\fsl_gpio_driver.h	/^    bool isPassiveFilterEnabled;        \/*!< Enable or disable passive filter.*\/$/;"	m	struct:gpioInputPinConfig
isPullEnable	drivers\gpio\fsl_gpio_driver.h	/^    bool isPullEnable;                  \/*!< Enable or disable pull. *\/$/;"	m	struct:gpioInputPinConfig
outputLogic	drivers\gpio\fsl_gpio_driver.h	/^    uint32_t outputLogic;               \/*!< Set default output logic.*\/$/;"	m	struct:gpioOutputPinConfig
pinName	drivers\gpio\fsl_gpio_driver.h	/^    uint32_t pinName;               \/*!< Virtual pin name from enum defined by user.*\/$/;"	m	struct:gpioInputPin
pinName	drivers\gpio\fsl_gpio_driver.h	/^    uint32_t pinName;               \/*!< Virtual pin name from enum defined by user.*\/$/;"	m	struct:gpioOutputPin
pullSelect	drivers\gpio\fsl_gpio_driver.h	/^    port_pull_t pullSelect;             \/*!< Select internal pull(up\/down) resistor.*\/$/;"	m	struct:gpioInputPinConfig
slewRate	drivers\gpio\fsl_gpio_driver.h	/^    port_slew_rate_t slewRate;          \/*! Select fast\/slow slew rate.*\/$/;"	m	struct:gpioOutputPinConfig
gpioPinCount	drivers\gpio\src\fsl_gpio_driver.c	/^uint32_t gpioPinCount;$/;"	v
gpio_clear_pin_interrupt_flag	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_clear_pin_interrupt_flag(uint32_t pinName)$/;"	f
gpio_clear_pin_output	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_clear_pin_output(uint32_t pinName) $/;"	f
gpio_configure_digital_filter	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_configure_digital_filter(uint32_t pinName, bool isDigitalFilterEnabled)$/;"	f
gpio_get_pin_direction	drivers\gpio\src\fsl_gpio_driver.c	/^uint32_t gpio_get_pin_direction(uint32_t pinName)$/;"	f
gpio_init	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_init(const gpio_input_pin_t * inputPins, const gpio_output_pin_t * outputPins)$/;"	f
gpio_read_pin_input	drivers\gpio\src\fsl_gpio_driver.c	/^uint32_t gpio_read_pin_input(uint32_t pinName)$/;"	f
gpio_set_pin_output	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_set_pin_output(uint32_t pinName) $/;"	f
gpio_toggle_pin_output	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_toggle_pin_output(uint32_t pinName) $/;"	f
gpio_write_pin_output	drivers\gpio\src\fsl_gpio_driver.c	/^void gpio_write_pin_output(uint32_t pinName, uint32_t output)$/;"	f
PORTA_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTA_IRQHandler(void)$/;"	f
PORTB_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTB_IRQHandler(void)$/;"	f
PORTC_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTC_IRQHandler(void)$/;"	f
PORTD_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTD_IRQHandler(void)$/;"	f
PORTE_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTE_IRQHandler(void)$/;"	f
PORTF_IRQHandler	drivers\gpio\src\fsl_gpio_irq.c	/^void PORTF_IRQHandler(void)$/;"	f
gpio_irq_ids	drivers\gpio\src\fsl_gpio_irq.c	/^IRQn_Type gpio_irq_ids[HW_PORT_INSTANCE_COUNT] = $/;"	v
gpio_isr_callback_table	drivers\gpio\src\fsl_gpio_irq.c	/^gpio_isr_callback_t gpio_isr_callback_table[HW_PORT_INSTANCE_COUNT] = {NULL};$/;"	v
gpio_register_isr_callback_function	drivers\gpio\src\fsl_gpio_irq.c	/^void gpio_register_isr_callback_function(uint32_t pinName, gpio_isr_callback_t function)$/;"	f
I2C0_IRQHandler	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^void I2C0_IRQHandler(void)$/;"	f
I2C1_IRQHandler	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^void I2C1_IRQHandler(void)$/;"	f
I2C2_IRQHandler	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^void I2C2_IRQHandler(void)$/;"	f
g_i2cSharedIrqConfig	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^i2c_shared_irq_config_t g_i2cSharedIrqConfig[HW_I2C_INSTANCE_COUNT];$/;"	v
i2c_handle_shared_irq	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^static void i2c_handle_shared_irq(uint32_t instance)$/;"	f	file:
i2c_irq_ids	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^IRQn_Type i2c_irq_ids[HW_I2C_INSTANCE_COUNT] = {I2C0_IRQn, I2C1_IRQn, I2C2_IRQn};$/;"	v
i2c_irq_ids	drivers\i2c\common\fsl_i2c_shared_irqs.c	/^IRQn_Type i2c_irq_ids[HW_I2C_INSTANCE_COUNT] = {I2C0_IRQn, I2C1_IRQn};$/;"	v
I2CSharedIrqConfig	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^typedef struct I2CSharedIrqConfig {$/;"	s
I2C_MASTER_IRQ_PRIORITY	drivers\i2c\common\fsl_i2c_shared_irqs.h	44;"	d
I2C_SLAVE_IRQ_PRIORITY	drivers\i2c\common\fsl_i2c_shared_irqs.h	51;"	d
__FSL_I2C_SHARED_IRQS_H__	drivers\i2c\common\fsl_i2c_shared_irqs.h	31;"	d
i2c_master_irq_handler	drivers\i2c\common\fsl_i2c_shared_irqs.h	86;"	d
i2c_set_shared_irq_is_master	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^static inline void i2c_set_shared_irq_is_master(uint32_t instance, bool isMaster)$/;"	f
i2c_set_shared_irq_state	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^static inline void i2c_set_shared_irq_state(uint32_t instance, void * state)$/;"	f
i2c_shared_irq_config_t	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^} i2c_shared_irq_config_t;$/;"	t	typeref:struct:I2CSharedIrqConfig
i2c_slave_irq_handler	drivers\i2c\common\fsl_i2c_shared_irqs.h	90;"	d
isMaster	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^    bool isMaster;  \/*!< Whether the IRQ is used by the master mode driver.*\/$/;"	m	struct:I2CSharedIrqConfig
state	drivers\i2c\common\fsl_i2c_shared_irqs.h	/^    void * state;   \/*!< Pointer to state information.*\/$/;"	m	struct:I2CSharedIrqConfig
I2CDeviceInfo	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^typedef struct I2CDeviceInfo {$/;"	s
I2CDirection	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^typedef enum I2CDirection {$/;"	g
I2CMasterState	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^typedef struct I2CMasterState {$/;"	s
__FSL_I2C_MASTER_DRIVER_H__	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	31;"	d
_i2c_transfer_flags	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^enum _i2c_transfer_flags$/;"	g
address	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint8_t address;        \/*!< The slave's 7-bit address.*\/$/;"	m	struct:I2CDeviceInfo
baudRate_kbps	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint32_t baudRate_kbps; \/*!< The baud rate in kbps to use with this slave device.*\/$/;"	m	struct:I2CDeviceInfo
bytesTransferredCount	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    size_t bytesTransferredCount;$/;"	m	struct:I2CMasterState
data	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint8_t * data;$/;"	m	struct:I2CMasterState
dataRemainingCount	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    size_t dataRemainingCount;$/;"	m	struct:I2CMasterState
direction	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    i2c_direction_t direction;$/;"	m	struct:I2CMasterState
flags	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint32_t flags;$/;"	m	struct:I2CMasterState
gotNak	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    bool gotNak;$/;"	m	struct:I2CMasterState
i2c_device_t	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^} i2c_device_t;$/;"	t	typeref:struct:I2CDeviceInfo
i2c_direction_t	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^} i2c_direction_t;$/;"	t	typeref:enum:I2CDirection
i2c_master_t	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^} i2c_master_t;$/;"	t	typeref:struct:I2CMasterState
instance	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint32_t instance;$/;"	m	struct:I2CMasterState
irqSync	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    sync_object_t irqSync;$/;"	m	struct:I2CMasterState
isTransferInProgress	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    bool isTransferInProgress;$/;"	m	struct:I2CMasterState
kI2CNoStart	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    kI2CNoStart = 1 << 1,   \/*!< Set this flag to prevent sending a START signal.*\/$/;"	e	enum:_i2c_transfer_flags
kI2CNoStop	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    kI2CNoStop = 1 << 2     \/*!< Set this flag to prevent sending a STOP signal.*\/$/;"	e	enum:_i2c_transfer_flags
kI2CRead	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    kI2CRead = 1,   \/*!< Read from slave device.*\/$/;"	e	enum:I2CDirection
kI2CWrite	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    kI2CWrite = 0   \/*!< Write to slave device.*\/$/;"	e	enum:I2CDirection
lastBaudRate_kbps	drivers\i2c\i2c_master\fsl_i2c_master_driver.h	/^    uint32_t lastBaudRate_kbps;$/;"	m	struct:I2CMasterState
_i2c_master_constants	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^enum _i2c_master_constants$/;"	g	file:
i2c_master_configure_bus	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^i2c_status_t i2c_master_configure_bus(i2c_master_t * master, const i2c_device_t * device)$/;"	f
i2c_master_init	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^void i2c_master_init(uint32_t instance, i2c_master_t * master)$/;"	f
i2c_master_irq_handler	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^void i2c_master_irq_handler(void * state)$/;"	f
i2c_master_shutdown	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^void i2c_master_shutdown(i2c_master_t * master)$/;"	f
i2c_master_transfer	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^i2c_status_t i2c_master_transfer(i2c_master_t * master,$/;"	f
i2c_master_transfer_basic	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^i2c_status_t i2c_master_transfer_basic(i2c_master_t * master,$/;"	f
kI2CAddress7bitMask	drivers\i2c\i2c_master\src\fsl_i2c_master_driver.c	/^    kI2CAddress7bitMask = 0x7F$/;"	e	enum:_i2c_master_constants	file:
__FSL_I2C_SLAVE_H__	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	31;"	d
_i2c_slave_info	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^typedef struct _i2c_slave_info$/;"	s
data_sink	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^    i2c_status_t (*data_sink)(uint8_t sink_byte);         \/*!< Callback used to put received byte.*\/$/;"	m	struct:_i2c_slave_info
data_source	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^    i2c_status_t (*data_source)(uint8_t * source_byte);   \/*!< Callback used to get byte to transmit.*\/$/;"	m	struct:_i2c_slave_info
i2c_slave_info_t	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^} i2c_slave_info_t;$/;"	t	typeref:struct:_i2c_slave_info
instance	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^    uint32_t instance;$/;"	m	struct:_i2c_slave_info
on_error	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^    void (*on_error)(i2c_status_t error);                 \/*!< Callback used to report an I2C error.*\/$/;"	m	struct:_i2c_slave_info
slaveAddress	drivers\i2c\i2c_slave\fsl_i2c_slave_driver.h	/^    uint8_t slaveAddress;                                 \/*!< 7-bit slave address to use.*\/$/;"	m	struct:_i2c_slave_info
I2C_EMPTY_CHAR	drivers\i2c\i2c_slave\src\fsl_i2c_slave_driver.c	44;"	d	file:
i2c_slave_init	drivers\i2c\i2c_slave\src\fsl_i2c_slave_driver.c	/^void i2c_slave_init(uint32_t instance, i2c_slave_info_t * appInfo, uint8_t slaveAddress,$/;"	f
i2c_slave_irq_handler	drivers\i2c\i2c_slave\src\fsl_i2c_slave_driver.c	/^void i2c_slave_irq_handler(void * state)$/;"	f
i2c_slave_shutdown	drivers\i2c\i2c_slave\src\fsl_i2c_slave_driver.c	/^void i2c_slave_shutdown(uint32_t instance)$/;"	f
FSL_FEATURE_INTERRUPT_IRQ_MAX	drivers\interrupt\fsl_interrupt_features.h	37;"	d
FSL_FEATURE_INTERRUPT_IRQ_MAX	drivers\interrupt\fsl_interrupt_features.h	41;"	d
FSL_FEATURE_INTERRUPT_IRQ_MAX	drivers\interrupt\fsl_interrupt_features.h	44;"	d
FSL_FEATURE_INTERRUPT_IRQ_MAX	drivers\interrupt\fsl_interrupt_features.h	47;"	d
FSL_FEATURE_INTERRUPT_IRQ_MIN	drivers\interrupt\fsl_interrupt_features.h	38;"	d
FSL_FEATURE_INTERRUPT_IRQ_MIN	drivers\interrupt\fsl_interrupt_features.h	42;"	d
FSL_FEATURE_INTERRUPT_IRQ_MIN	drivers\interrupt\fsl_interrupt_features.h	45;"	d
FSL_FEATURE_INTERRUPT_IRQ_MIN	drivers\interrupt\fsl_interrupt_features.h	48;"	d
__FSL_INTERRUPT_FEATURES_H__	drivers\interrupt\fsl_interrupt_features.h	31;"	d
__FSL_INTERRUPT_MANAGER_H__	drivers\interrupt\fsl_interrupt_manager.h	31;"	d
interrupt_disable	drivers\interrupt\fsl_interrupt_manager.h	/^static inline void interrupt_disable(IRQn_Type irqNumber)$/;"	f
interrupt_enable	drivers\interrupt\fsl_interrupt_manager.h	/^static inline void interrupt_enable(IRQn_Type irqNumber)$/;"	f
g_interrupt_disable_count	drivers\interrupt\src\fsl_interrupt_manager.c	/^uint32_t g_interrupt_disable_count = 0;$/;"	v
interrupt_disable_global	drivers\interrupt\src\fsl_interrupt_manager.c	/^void interrupt_disable_global(void)$/;"	f
interrupt_enable_global	drivers\interrupt\src\fsl_interrupt_manager.c	/^void interrupt_enable_global(void)$/;"	f
interrupt_register_handler	drivers\interrupt\src\fsl_interrupt_manager.c	/^void interrupt_register_handler(IRQn_Type irqNumber, void (*handler)(void))$/;"	f
__FSL_USB_FEATURES_H__	drivers\khci\hal\fsl_usb_features.h	31;"	d
HW_USB_INSTANCE_COUNT	drivers\khci\hal\fsl_usb_khci_hal.h	726;"	d
NEW_USB_HAL_ENABLE	drivers\khci\hal\fsl_usb_khci_hal.h	41;"	d
NEW_USB_HAL_ENABLE	drivers\khci\hal\fsl_usb_khci_hal.h	46;"	d
NEW_USB_HAL_ENABLE	drivers\khci\hal\fsl_usb_khci_hal.h	49;"	d
NEW_USB_HAL_ENABLE	drivers\khci\hal\fsl_usb_khci_hal.h	55;"	d
NEW_USB_HAL_ENABLE	drivers\khci\hal\fsl_usb_khci_hal.h	58;"	d
__FSL_USB_HAL_H__	drivers\khci\hal\fsl_usb_khci_hal.h	32;"	d
usb_hal_khci_clear_control_register	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clear_control_register(uint32_t instance)$/;"	f
usb_hal_khci_clr_all_error_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_all_error_interrupts(uint32_t instance)$/;"	f
usb_hal_khci_clr_all_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_all_interrupts(uint32_t instance)$/;"	f
usb_hal_khci_clr_interrupt	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_interrupt(uint32_t instance, uint32_t intrType)$/;"	f
usb_hal_khci_clr_oddrst	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_oddrst(uint32_t instance)$/;"	f
usb_hal_khci_clr_suspend	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_suspend(uint32_t instance)$/;"	f
usb_hal_khci_clr_token_busy	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_clr_token_busy(uint32_t instance)$/;"	f
usb_hal_khci_disable_all_error_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_all_error_interrupts(uint32_t instance)$/;"	f
usb_hal_khci_disable_error_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_error_interrupts(uint32_t instance, uint32_t errorIntrType)$/;"	f
usb_hal_khci_disable_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_interrupts(uint32_t instance, uint32_t intrType)$/;"	f
usb_hal_khci_disable_low_speed_support	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_low_speed_support(uint32_t instance)$/;"	f
usb_hal_khci_disable_pull_down	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_pull_down(uint32_t instance)$/;"	f
usb_hal_khci_disable_pull_up	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_pull_up(uint32_t instance)$/;"	f
usb_hal_khci_disable_sof	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_disable_sof(uint32_t  instance)$/;"	f
usb_hal_khci_enable_all_error_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_all_error_interrupts(uint32_t instance)$/;"	f
usb_hal_khci_enable_error_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_error_interrupts(uint32_t instance, uint32_t errIntrType)$/;"	f
usb_hal_khci_enable_interrupts	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_interrupts(uint32_t instance, uint32_t intrType)$/;"	f
usb_hal_khci_enable_low_speed_support	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_low_speed_support(uint32_t instance)$/;"	f
usb_hal_khci_enable_pull_down	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_pull_down(uint32_t instance)$/;"	f
usb_hal_khci_enable_pull_up	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_pull_up(uint32_t instance)$/;"	f
usb_hal_khci_enable_sof	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_enable_sof(uint32_t  instance)$/;"	f
usb_hal_khci_endpoint0_init	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint0_init(uint32_t instance, uint32_t isThoughHub, uint32_t isIsochPipe)$/;"	f
usb_hal_khci_endpoint_clr_stall	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint_clr_stall(uint32_t instance, uint32_t epNumber)$/;"	f
usb_hal_khci_endpoint_enable_handshake	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint_enable_handshake(uint32_t instance, uint32_t epNumber, uint32_t isEphshkSet)$/;"	f
usb_hal_khci_endpoint_on_hub	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint_on_hub(uint32_t instance, uint32_t epNumber)$/;"	f
usb_hal_khci_endpoint_set_direction	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint_set_direction(uint32_t instance, uint32_t epNumber, uint8_t isEptxenSet)$/;"	f
usb_hal_khci_endpoint_shut_down	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_endpoint_shut_down(uint32_t instance, uint32_t epNumber)$/;"	f
usb_hal_khci_get_error_interrupt_enable_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_error_interrupt_enable_status(uint32_t instance)$/;"	f
usb_hal_khci_get_error_interrupt_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_error_interrupt_status(uint32_t instance)$/;"	f
usb_hal_khci_get_frame_number	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint16_t usb_hal_khci_get_frame_number(uint32_t instance)$/;"	f
usb_hal_khci_get_interrupt_enable_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_interrupt_enable_status(uint32_t instance)$/;"	f
usb_hal_khci_get_interrupt_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_interrupt_status(uint32_t instance)$/;"	f
usb_hal_khci_get_line_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_line_status(uint32_t  instance)$/;"	f
usb_hal_khci_get_transfer_done_direction	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_transfer_done_direction(uint32_t instance)$/;"	f
usb_hal_khci_get_transfer_done_ep_number	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_transfer_done_ep_number(uint32_t instance)$/;"	f
usb_hal_khci_get_transfer_done_odd	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_transfer_done_odd(uint32_t instance)$/;"	f
usb_hal_khci_get_transfer_status	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_get_transfer_status(uint32_t instance)$/;"	f
usb_hal_khci_is_error_happend	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_is_error_happend(uint32_t instance, uint32_t errorType)$/;"	f
usb_hal_khci_is_interrupt_issued	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_is_interrupt_issued(uint32_t instance, uint32_t intrType)$/;"	f
usb_hal_khci_is_token_busy	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline uint8_t usb_hal_khci_is_token_busy(uint32_t instance)$/;"	f
usb_hal_khci_set_buffer_descriptor_table_addr	drivers\khci\hal\fsl_usb_khci_hal.h	/^static void usb_hal_khci_set_buffer_descriptor_table_addr(uint32_t instance, uint32_t bdtAddress)$/;"	f
usb_hal_khci_set_device_addr	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_device_addr(uint32_t instance, uint32_t addr)$/;"	f
usb_hal_khci_set_device_mode	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_device_mode(uint32_t instance)$/;"	f
usb_hal_khci_set_host_mode	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_host_mode(uint32_t instance)$/;"	f
usb_hal_khci_set_oddrst	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_oddrst(uint32_t instance)$/;"	f
usb_hal_khci_set_sof_theshold	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_sof_theshold(uint32_t instance, uint32_t value)$/;"	f
usb_hal_khci_set_suspend	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_suspend(uint32_t instance)$/;"	f
usb_hal_khci_set_target_token	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_target_token(uint32_t instance, uint8_t token, uint8_t endpoint_number)$/;"	f
usb_hal_khci_set_transfer_target	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_set_transfer_target(uint32_t instance, uint32_t address, uint32_t speed)$/;"	f
usb_hal_khci_start_bus_reset	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_start_bus_reset(uint32_t  instance)$/;"	f
usb_hal_khci_start_resume	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_start_resume(uint32_t instance)$/;"	f
usb_hal_khci_stop_bus_reset	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_stop_bus_reset(uint32_t  instance)$/;"	f
usb_hal_khci_stop_resume	drivers\khci\hal\fsl_usb_khci_hal.h	/^static inline void usb_hal_khci_stop_resume(uint32_t instance)$/;"	f
ADR	drivers\mmcau\src\cau2_defines.h	17;"	d
ADRA	drivers\mmcau\src\cau2_defines.h	19;"	d
AESC	drivers\mmcau\src\cau2_defines.h	26;"	d
AESIC	drivers\mmcau\src\cau2_defines.h	27;"	d
AESIR	drivers\mmcau\src\cau2_defines.h	29;"	d
AESIS	drivers\mmcau\src\cau2_defines.h	25;"	d
AESR	drivers\mmcau\src\cau2_defines.h	28;"	d
AESS	drivers\mmcau\src\cau2_defines.h	24;"	d
CA0	drivers\mmcau\src\cau2_defines.h	5;"	d
CA1	drivers\mmcau\src\cau2_defines.h	6;"	d
CA2	drivers\mmcau\src\cau2_defines.h	7;"	d
CA3	drivers\mmcau\src\cau2_defines.h	8;"	d
CA4	drivers\mmcau\src\cau2_defines.h	9;"	d
CA5	drivers\mmcau\src\cau2_defines.h	10;"	d
CA6	drivers\mmcau\src\cau2_defines.h	11;"	d
CA7	drivers\mmcau\src\cau2_defines.h	12;"	d
CA8	drivers\mmcau\src\cau2_defines.h	13;"	d
CAA	drivers\mmcau\src\cau2_defines.h	4;"	d
CASR	drivers\mmcau\src\cau2_defines.h	3;"	d
CNOP	drivers\mmcau\src\cau2_defines.h	14;"	d
CP	drivers\mmcau\src\cau2_defines.h	40;"	d
DC	drivers\mmcau\src\cau2_defines.h	39;"	d
DESK	drivers\mmcau\src\cau2_defines.h	31;"	d
DESR	drivers\mmcau\src\cau2_defines.h	30;"	d
FP	drivers\mmcau\src\cau2_defines.h	38;"	d
HASH	drivers\mmcau\src\cau2_defines.h	32;"	d
HF2C	drivers\mmcau\src\cau2_defines.h	52;"	d
HF2M	drivers\mmcau\src\cau2_defines.h	53;"	d
HF2S	drivers\mmcau\src\cau2_defines.h	54;"	d
HF2T	drivers\mmcau\src\cau2_defines.h	55;"	d
HF2U	drivers\mmcau\src\cau2_defines.h	56;"	d
HF2V	drivers\mmcau\src\cau2_defines.h	57;"	d
HFC	drivers\mmcau\src\cau2_defines.h	50;"	d
HFF	drivers\mmcau\src\cau2_defines.h	45;"	d
HFG	drivers\mmcau\src\cau2_defines.h	46;"	d
HFH	drivers\mmcau\src\cau2_defines.h	47;"	d
HFI	drivers\mmcau\src\cau2_defines.h	48;"	d
HFM	drivers\mmcau\src\cau2_defines.h	51;"	d
HFP	drivers\mmcau\src\cau2_defines.h	49;"	d
ILL	drivers\mmcau\src\cau2_defines.h	36;"	d
IP	drivers\mmcau\src\cau2_defines.h	37;"	d
KSL1	drivers\mmcau\src\cau2_defines.h	41;"	d
KSL2	drivers\mmcau\src\cau2_defines.h	42;"	d
KSR1	drivers\mmcau\src\cau2_defines.h	43;"	d
KSR2	drivers\mmcau\src\cau2_defines.h	44;"	d
LDR	drivers\mmcau\src\cau2_defines.h	15;"	d
MDS	drivers\mmcau\src\cau2_defines.h	34;"	d
MVAR	drivers\mmcau\src\cau2_defines.h	23;"	d
MVRA	drivers\mmcau\src\cau2_defines.h	22;"	d
RADR	drivers\mmcau\src\cau2_defines.h	18;"	d
ROTL	drivers\mmcau\src\cau2_defines.h	21;"	d
SHS	drivers\mmcau\src\cau2_defines.h	33;"	d
SHS2	drivers\mmcau\src\cau2_defines.h	35;"	d
STR	drivers\mmcau\src\cau2_defines.h	16;"	d
TL	drivers\mmcau\src\cau2_defines.h	1;"	d
TS	drivers\mmcau\src\cau2_defines.h	2;"	d
XOR	drivers\mmcau\src\cau2_defines.h	20;"	d
MMCAU_PPB_DIRECT	drivers\mmcau\src\mmcau_aes_functions.c	/^volatile unsigned long *const MMCAU_PPB_DIRECT   = (unsigned long *) 0xe0081000;$/;"	v
MMCAU_PPB_INDIRECT	drivers\mmcau\src\mmcau_aes_functions.c	/^volatile unsigned long *const MMCAU_PPB_INDIRECT = (unsigned long *) 0xe0081800;$/;"	v
byterev	drivers\mmcau\src\mmcau_aes_functions.c	31;"	d	file:
mmcau_1_cmd	drivers\mmcau\src\mmcau_aes_functions.c	28;"	d	file:
mmcau_2_cmds	drivers\mmcau\src\mmcau_aes_functions.c	29;"	d	file:
mmcau_3_cmds	drivers\mmcau\src\mmcau_aes_functions.c	30;"	d	file:
mmcau_aes_decrypt	drivers\mmcau\src\mmcau_aes_functions.c	/^void mmcau_aes_decrypt(unsigned int in[], unsigned int key_sch[], int nr,$/;"	f
mmcau_aes_encrypt	drivers\mmcau\src\mmcau_aes_functions.c	/^void mmcau_aes_encrypt(unsigned int in[], unsigned int key_sch[], int nr,$/;"	f
mmcau_aes_set_key	drivers\mmcau\src\mmcau_aes_functions.c	/^void mmcau_aes_set_key(unsigned int key[], int key_size, unsigned int key_sch[])$/;"	f
MMCAU_PPB_DIRECT	drivers\mmcau\src\mmcau_des_functions.c	/^volatile unsigned long *const MMCAU_PPB_DIRECT   = (unsigned long *) 0xe0081000;$/;"	v
MMCAU_PPB_INDIRECT	drivers\mmcau\src\mmcau_des_functions.c	/^volatile unsigned long *const MMCAU_PPB_INDIRECT = (unsigned long *) 0xe0081800;$/;"	v
byterev	drivers\mmcau\src\mmcau_des_functions.c	31;"	d	file:
mmcau_1_cmd	drivers\mmcau\src\mmcau_des_functions.c	28;"	d	file:
mmcau_2_cmds	drivers\mmcau\src\mmcau_des_functions.c	29;"	d	file:
mmcau_3_cmds	drivers\mmcau\src\mmcau_des_functions.c	30;"	d	file:
mmcau_des_chk_parity	drivers\mmcau\src\mmcau_des_functions.c	/^int mmcau_des_chk_parity(unsigned int key[])$/;"	f
mmcau_des_decrypt	drivers\mmcau\src\mmcau_des_functions.c	/^void mmcau_des_decrypt(unsigned int in[], unsigned int key[],$/;"	f
mmcau_des_encrypt	drivers\mmcau\src\mmcau_des_functions.c	/^void mmcau_des_encrypt(unsigned int in[], unsigned int key[],$/;"	f
MMCAU_PPB_DIRECT	drivers\mmcau\src\mmcau_md5_functions.c	/^volatile unsigned long *const MMCAU_PPB_DIRECT   = (unsigned long *) 0xe0081000;$/;"	v
MMCAU_PPB_INDIRECT	drivers\mmcau\src\mmcau_md5_functions.c	/^volatile unsigned long *const MMCAU_PPB_INDIRECT = (unsigned long *) 0xe0081800;$/;"	v
md5_rnd	drivers\mmcau\src\mmcau_md5_functions.c	/^unsigned int md5_rnd[] = {7, 12, 17, 22,  7, 12, 17, 22,$/;"	v
md5_t	drivers\mmcau\src\mmcau_md5_functions.c	/^unsigned int md5_t[] = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,$/;"	v
mmcau_1_cmd	drivers\mmcau\src\mmcau_md5_functions.c	26;"	d	file:
mmcau_2_cmds	drivers\mmcau\src\mmcau_md5_functions.c	27;"	d	file:
mmcau_3_cmds	drivers\mmcau\src\mmcau_md5_functions.c	28;"	d	file:
mmcau_md5_hash	drivers\mmcau\src\mmcau_md5_functions.c	/^void mmcau_md5_hash (unsigned int msg_data[], unsigned int md_state[])$/;"	f
mmcau_md5_hash_n	drivers\mmcau\src\mmcau_md5_functions.c	/^void mmcau_md5_hash_n (unsigned int msg_data[], int num_blks,$/;"	f
mmcau_md5_initialize_output	drivers\mmcau\src\mmcau_md5_functions.c	/^void mmcau_md5_initialize_output (unsigned int md_state[])$/;"	f
mmcau_md5_update	drivers\mmcau\src\mmcau_md5_functions.c	/^void mmcau_md5_update (unsigned int msg_data[], int num_blks,$/;"	f
MMCAU_PPB_DIRECT	drivers\mmcau\src\mmcau_sha1_functions.c	/^volatile unsigned long *const MMCAU_PPB_DIRECT   = (unsigned long *) 0xe0081000;$/;"	v
MMCAU_PPB_INDIRECT	drivers\mmcau\src\mmcau_sha1_functions.c	/^volatile unsigned long *const MMCAU_PPB_INDIRECT = (unsigned long *) 0xe0081800;$/;"	v
byterev	drivers\mmcau\src\mmcau_sha1_functions.c	29;"	d	file:
mmcau_1_cmd	drivers\mmcau\src\mmcau_sha1_functions.c	26;"	d	file:
mmcau_2_cmds	drivers\mmcau\src\mmcau_sha1_functions.c	27;"	d	file:
mmcau_3_cmds	drivers\mmcau\src\mmcau_sha1_functions.c	28;"	d	file:
mmcau_sha1_hash	drivers\mmcau\src\mmcau_sha1_functions.c	/^void mmcau_sha1_hash (unsigned int msg_data[], unsigned int sha1_state[])$/;"	f
mmcau_sha1_hash_n	drivers\mmcau\src\mmcau_sha1_functions.c	/^void mmcau_sha1_hash_n (unsigned int msg_data[], int num_blks,$/;"	f
mmcau_sha1_initialize_output	drivers\mmcau\src\mmcau_sha1_functions.c	/^void mmcau_sha1_initialize_output (unsigned int sha1_state[])$/;"	f
mmcau_sha1_update	drivers\mmcau\src\mmcau_sha1_functions.c	/^void mmcau_sha1_update(unsigned int msg_data[], int num_blks,$/;"	f
sha1_k	drivers\mmcau\src\mmcau_sha1_functions.c	/^unsigned int sha1_k[] = {0x5a827999,0x6ed9eba1,0x8f1bbcdc,0xca62c1d6};$/;"	v
MMCAU_PPB_DIRECT	drivers\mmcau\src\mmcau_sha256_functions.c	/^volatile unsigned long *const MMCAU_PPB_DIRECT   = (unsigned long *) 0xe0081000;$/;"	v
MMCAU_PPB_INDIRECT	drivers\mmcau\src\mmcau_sha256_functions.c	/^volatile unsigned long *const MMCAU_PPB_INDIRECT = (unsigned long *) 0xe0081800;$/;"	v
byterev	drivers\mmcau\src\mmcau_sha256_functions.c	29;"	d	file:
mmcau_1_cmd	drivers\mmcau\src\mmcau_sha256_functions.c	26;"	d	file:
mmcau_2_cmds	drivers\mmcau\src\mmcau_sha256_functions.c	27;"	d	file:
mmcau_3_cmds	drivers\mmcau\src\mmcau_sha256_functions.c	28;"	d	file:
mmcau_sha256_hash	drivers\mmcau\src\mmcau_sha256_functions.c	/^void mmcau_sha256_hash (unsigned int input[], unsigned int output[])$/;"	f
mmcau_sha256_hash_n	drivers\mmcau\src\mmcau_sha256_functions.c	/^void mmcau_sha256_hash_n (unsigned int input[], int num_blks,$/;"	f
mmcau_sha256_initialize_output	drivers\mmcau\src\mmcau_sha256_functions.c	/^int mmcau_sha256_initialize_output (unsigned int *output)$/;"	f
mmcau_sha256_update	drivers\mmcau\src\mmcau_sha256_functions.c	/^void mmcau_sha256_update (unsigned int input[], int num_blks,$/;"	f
sha256_initial_h	drivers\mmcau\src\mmcau_sha256_functions.c	/^unsigned int sha256_initial_h[]={0x6a09e667,0xbb67ae85, 0x3c6ef372, 0xa54ff53a,$/;"	v
sha256_k	drivers\mmcau\src\mmcau_sha256_functions.c	/^unsigned int sha256_k[]      = {0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,$/;"	v
PitConfig	drivers\pit\fsl_pit_driver.h	/^typedef struct PitConfig {$/;"	s
PitTimerConfig	drivers\pit\fsl_pit_driver.h	/^typedef struct PitTimerConfig {$/;"	s
__FSL_PIT_DRIVER_H__	drivers\pit\fsl_pit_driver.h	31;"	d
isInterruptEnabled	drivers\pit\fsl_pit_driver.h	/^    bool isInterruptEnabled;  \/*!< Timer interrupt 0-disable\/1-enable*\/$/;"	m	struct:PitTimerConfig
isRunInDebug	drivers\pit\fsl_pit_driver.h	/^    bool isRunInDebug;      \/*!< Timers run\/stop in debug mode, 0-stop\/1-run*\/$/;"	m	struct:PitConfig
isTimerChained	drivers\pit\fsl_pit_driver.h	/^    bool isTimerChained;      \/*!< Chained with previous timer, 0-not\/1-chained*\/$/;"	m	struct:PitTimerConfig
period	drivers\pit\fsl_pit_driver.h	/^    uint32_t period;          \/*!< Timer period in unit of count*\/$/;"	m	struct:PitTimerConfig
pit_config_t	drivers\pit\fsl_pit_driver.h	/^} pit_config_t;$/;"	t	typeref:struct:PitConfig
pit_isr_callback_t	drivers\pit\fsl_pit_driver.h	/^typedef void (*pit_isr_callback_t)(void);$/;"	t
pit_timer_config_t	drivers\pit\fsl_pit_driver.h	/^} pit_timer_config_t;$/;"	t	typeref:struct:PitTimerConfig
timers	drivers\pit\fsl_pit_driver.h	/^    pit_timer_config_t timers[FSL_FEATURE_PIT_TIMER_COUNT]; \/*!< Timer configuration instances*\/$/;"	m	struct:PitConfig
pitSourceClock	drivers\pit\src\fsl_pit_driver.c	/^uint64_t pitSourceClock;$/;"	v
pit_init	drivers\pit\src\fsl_pit_driver.c	/^void pit_init(const pit_config_t * config)$/;"	f
pit_read_lifetime_timer_us	drivers\pit\src\fsl_pit_driver.c	/^uint64_t pit_read_lifetime_timer_us(void)$/;"	f
pit_read_timer_us	drivers\pit\src\fsl_pit_driver.c	/^uint32_t pit_read_timer_us(uint32_t timer)$/;"	f
pit_set_lifetime_timer_period_us	drivers\pit\src\fsl_pit_driver.c	/^void pit_set_lifetime_timer_period_us(uint64_t us)$/;"	f
pit_set_timer_period_us	drivers\pit\src\fsl_pit_driver.c	/^void pit_set_timer_period_us(uint32_t timer, uint32_t us)$/;"	f
pit_shutdown	drivers\pit\src\fsl_pit_driver.c	/^void pit_shutdown(void)$/;"	f
pit_timer_start	drivers\pit\src\fsl_pit_driver.c	/^void pit_timer_start(uint32_t timer)$/;"	f
pit_timer_stop	drivers\pit\src\fsl_pit_driver.c	/^void pit_timer_stop(uint32_t timer)$/;"	f
PIT0_IRQHandler	drivers\pit\src\fsl_pit_irq.c	/^void PIT0_IRQHandler(void)$/;"	f
PIT1_IRQHandler	drivers\pit\src\fsl_pit_irq.c	/^void PIT1_IRQHandler(void)$/;"	f
PIT2_IRQHandler	drivers\pit\src\fsl_pit_irq.c	/^void PIT2_IRQHandler(void)$/;"	f
PIT3_IRQHandler	drivers\pit\src\fsl_pit_irq.c	/^void PIT3_IRQHandler(void)$/;"	f
PIT_IRQHandler	drivers\pit\src\fsl_pit_irq.c	/^void PIT_IRQHandler(void)$/;"	f
pit_irq_ids	drivers\pit\src\fsl_pit_irq.c	/^IRQn_Type pit_irq_ids[FSL_FEATURE_PIT_TIMER_COUNT] = $/;"	v
pit_isr_callback_table	drivers\pit\src\fsl_pit_irq.c	/^pit_isr_callback_t pit_isr_callback_table[FSL_FEATURE_PIT_TIMER_COUNT] = {NULL};$/;"	v
pit_register_isr_callback_function	drivers\pit\src\fsl_pit_irq.c	/^void pit_register_isr_callback_function(uint32_t timer, pit_isr_callback_t function)$/;"	f
__FSL_RTC_DRIVER_H__	drivers\rtc\fsl_rtc_driver.h	31;"	d
day	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t day;$/;"	m	struct:rtc_datetime_struct
general_config	drivers\rtc\fsl_rtc_driver.h	/^  rtc_hal_init_config_t * general_config;$/;"	m	struct:rtc_init_config
hour	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t hour;$/;"	m	struct:rtc_datetime_struct
hour	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t hour;$/;"	m	struct:rtc_time_struct
minute	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t minute;$/;"	m	struct:rtc_datetime_struct
minute	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t minute;$/;"	m	struct:rtc_time_struct
month	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t month;$/;"	m	struct:rtc_datetime_struct
rtc_datetime_struct	drivers\rtc\fsl_rtc_driver.h	/^typedef struct rtc_datetime_struct$/;"	s
rtc_datetime_t	drivers\rtc\fsl_rtc_driver.h	/^} rtc_datetime_t;$/;"	t	typeref:struct:rtc_datetime_struct
rtc_init_config	drivers\rtc\fsl_rtc_driver.h	/^typedef struct rtc_init_config$/;"	s
rtc_init_config_t	drivers\rtc\fsl_rtc_driver.h	/^} rtc_init_config_t;$/;"	t	typeref:struct:rtc_init_config
rtc_isr_general	drivers\rtc\fsl_rtc_driver.h	/^  void (*rtc_isr_general)(void);$/;"	m	struct:rtc_init_config
rtc_isr_seconds	drivers\rtc\fsl_rtc_driver.h	/^  void (*rtc_isr_seconds)(void);$/;"	m	struct:rtc_init_config
rtc_time_struct	drivers\rtc\fsl_rtc_driver.h	/^typedef struct rtc_time_struct$/;"	s
rtc_time_t	drivers\rtc\fsl_rtc_driver.h	/^} rtc_time_t;$/;"	t	typeref:struct:rtc_time_struct
second	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t second;$/;"	m	struct:rtc_datetime_struct
second	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t second;$/;"	m	struct:rtc_time_struct
start_at_datetime	drivers\rtc\fsl_rtc_driver.h	/^  rtc_datetime_t * start_at_datetime;$/;"	m	struct:rtc_init_config
start_counter	drivers\rtc\fsl_rtc_driver.h	/^  bool start_counter;$/;"	m	struct:rtc_init_config
year	drivers\rtc\fsl_rtc_driver.h	/^   uint16_t year;$/;"	m	struct:rtc_datetime_struct
LY	drivers\rtc\src\fsl_rtc_driver.c	/^static const uint8_t  LY[] = {0U, 31U, 29U, 31U, 30U, 31U, 30U, 31U, 31U, 30U,$/;"	v	file:
MONTH_DAYS	drivers\rtc\src\fsl_rtc_driver.c	/^static const uint16_t MONTH_DAYS[] = {0U, 0U, 31U, 59U, 90U, 120U, 151U, 181U,$/;"	v	file:
ULY	drivers\rtc\src\fsl_rtc_driver.c	/^static const uint8_t ULY[] = {0U, 31U, 28U, 31U, 30U, 31U, 30U, 31U, 31U, 30U,$/;"	v	file:
convert_datetime_to_seconds	drivers\rtc\src\fsl_rtc_driver.c	/^static void convert_datetime_to_seconds(const rtc_datetime_t * datetime,$/;"	f	file:
convert_seconds_to_datetime	drivers\rtc\src\fsl_rtc_driver.c	/^static void convert_seconds_to_datetime(const uint32_t * seconds,$/;"	f	file:
has_datetime_correct_format	drivers\rtc\src\fsl_rtc_driver.c	/^static bool has_datetime_correct_format(const rtc_datetime_t * datetime)$/;"	f	file:
rtc_configure_int	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_configure_int(hw_rtc_ier_t * bitfields)$/;"	f
rtc_cp_datetime_time	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_cp_datetime_time(const rtc_datetime_t * datetime, rtc_time_t * time)$/;"	f
rtc_cp_time_datetime	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_cp_time_datetime(const rtc_time_t * time, rtc_datetime_t * datetime)$/;"	f
rtc_get_alarm	drivers\rtc\src\fsl_rtc_driver.c	/^bool rtc_get_alarm(rtc_datetime_t * date)$/;"	f
rtc_get_datetime	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_get_datetime(rtc_datetime_t * datetime)$/;"	f
rtc_get_int_status	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_get_int_status(hw_rtc_sr_t * int_status_flags)$/;"	f
rtc_increment_monotonic	drivers\rtc\src\fsl_rtc_driver.c	/^bool rtc_increment_monotonic(void)$/;"	f
rtc_init	drivers\rtc\src\fsl_rtc_driver.c	/^bool rtc_init(const rtc_init_config_t * config)$/;"	f
rtc_int_install	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_int_install(void (*isr)(void))$/;"	f
rtc_int_seconds_install	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_int_seconds_install(void (*isr)(void))$/;"	f
rtc_isr	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_isr(void)$/;"	f
rtc_set_alarm	drivers\rtc\src\fsl_rtc_driver.c	/^bool rtc_set_alarm(const rtc_datetime_t * date)$/;"	f
rtc_set_datetime	drivers\rtc\src\fsl_rtc_driver.c	/^bool rtc_set_datetime(const rtc_datetime_t * datetime, bool start_after_set)$/;"	f
rtc_shutdown	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_shutdown(void)$/;"	f
rtc_start_time_counter	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_start_time_counter(void)$/;"	f
rtc_stop_time_counter	drivers\rtc\src\fsl_rtc_driver.c	/^void rtc_stop_time_counter(void)$/;"	f
__FSL_SAI_DRIVER_H__	drivers\sai\fsl_sai_driver.h	33;"	d
sai_clear_rx_status	drivers\sai\fsl_sai_driver.h	/^static inline void sai_clear_rx_status(void *param)$/;"	f
sai_clear_tx_status	drivers\sai\fsl_sai_driver.h	/^static inline void sai_clear_tx_status(void *param)$/;"	f
sai_stop_read_data	drivers\sai\fsl_sai_driver.h	/^static inline void sai_stop_read_data(void *param)$/;"	f
sai_stop_write_data	drivers\sai\fsl_sai_driver.h	/^static inline void sai_stop_write_data(void *param)$/;"	f
SAI_RX_VECTOR_PRIORITY	drivers\sai\src\fsl_sai_driver.c	41;"	d	file:
SAI_TX_VECTOR_PRIORITY	drivers\sai\src\fsl_sai_driver.c	40;"	d	file:
g_sai	drivers\sai\src\fsl_sai_driver.c	/^audio_controller_t g_sai[HW_I2S_INSTANCE_COUNT];$/;"	v
g_sai0	drivers\sai\src\fsl_sai_driver.c	/^audio_controller_t g_sai0 = $/;"	v
g_sai1	drivers\sai\src\fsl_sai_driver.c	/^audio_controller_t g_sai1 = $/;"	v
g_sai_ops	drivers\sai\src\fsl_sai_driver.c	/^audio_ctrl_operation_t g_sai_ops =$/;"	v
rx_address_end	drivers\sai\src\fsl_sai_driver.c	/^static uint8_t *rx_address_end;$/;"	v	file:
rx_address_start	drivers\sai\src\fsl_sai_driver.c	/^static uint8_t *rx_address_start;$/;"	v	file:
rx_count	drivers\sai\src\fsl_sai_driver.c	/^static uint32_t rx_count;$/;"	v	file:
rx_status	drivers\sai\src\fsl_sai_driver.c	/^static audio_status_t rx_status;$/;"	v	file:
sai_configure	drivers\sai\src\fsl_sai_driver.c	/^snd_status_t sai_configure(void *param, void *device_config, bool direction)$/;"	f
sai_configure_data_format	drivers\sai\src\fsl_sai_driver.c	/^snd_status_t sai_configure_data_format(void *param, audio_data_format_t *format, bool direction)$/;"	f
sai_deinit	drivers\sai\src\fsl_sai_driver.c	/^snd_status_t sai_deinit(void *param)$/;"	f
sai_init	drivers\sai\src\fsl_sai_driver.c	/^snd_status_t sai_init(void *param, audio_status_t *w_status, audio_status_t *r_status)$/;"	f
sai_rx_error_handle	drivers\sai\src\fsl_sai_driver.c	/^void sai_rx_error_handle(uint32_t instance)$/;"	f
sai_rx_interrupt_handle	drivers\sai\src\fsl_sai_driver.c	/^void sai_rx_interrupt_handle(uint32_t instance)$/;"	f
sai_start_read_data	drivers\sai\src\fsl_sai_driver.c	/^void sai_start_read_data(void *param)$/;"	f
sai_start_write_data	drivers\sai\src\fsl_sai_driver.c	/^void sai_start_write_data(void *param)$/;"	f
sai_tx_error_handle	drivers\sai\src\fsl_sai_driver.c	/^void sai_tx_error_handle(uint32_t instance)$/;"	f
sai_tx_interrupt_handle	drivers\sai\src\fsl_sai_driver.c	/^void sai_tx_interrupt_handle(uint32_t instance)$/;"	f
tx_address_end	drivers\sai\src\fsl_sai_driver.c	/^static uint8_t *tx_address_end;$/;"	v	file:
tx_address_start	drivers\sai\src\fsl_sai_driver.c	/^static uint8_t *tx_address_start;$/;"	v	file:
tx_count	drivers\sai\src\fsl_sai_driver.c	/^static uint32_t tx_count;$/;"	v	file:
tx_status	drivers\sai\src\fsl_sai_driver.c	/^static audio_status_t tx_status;$/;"	v	file:
I2S0_Rx_IRQHandler	drivers\sai\src\fsl_sai_irq.c	/^void I2S0_Rx_IRQHandler(void)$/;"	f
I2S0_Tx_IRQHandler	drivers\sai\src\fsl_sai_irq.c	/^void I2S0_Tx_IRQHandler(void)$/;"	f
I2S1_Rx_IRQHandler	drivers\sai\src\fsl_sai_irq.c	/^void I2S1_Rx_IRQHandler(void)$/;"	f
I2S1_Tx_IRQHandler	drivers\sai\src\fsl_sai_irq.c	/^void I2S1_Tx_IRQHandler(void)$/;"	f
sai_irq_ids	drivers\sai\src\fsl_sai_irq.c	/^IRQn_Type sai_irq_ids[HW_I2S_INSTANCE_COUNT][2] = $/;"	v
SDMMC_CARD_CAPS_4BIT_MODE	drivers\sdhc\fsl_sdhc_driver.h	103;"	d
SDMMC_CARD_CAPS_HIGHSPEED	drivers\sdhc\fsl_sdhc_driver.h	102;"	d
SDMMC_CMD_AC	drivers\sdhc\fsl_sdhc_driver.h	187;"	d
SDMMC_CMD_ADTC	drivers\sdhc\fsl_sdhc_driver.h	188;"	d
SDMMC_CMD_BC	drivers\sdhc\fsl_sdhc_driver.h	189;"	d
SDMMC_CMD_BCR	drivers\sdhc\fsl_sdhc_driver.h	190;"	d
SDMMC_CMD_MASK	drivers\sdhc\fsl_sdhc_driver.h	186;"	d
SDMMC_DATA_READ	drivers\sdhc\fsl_sdhc_driver.h	177;"	d
SDMMC_DATA_WRITE	drivers\sdhc\fsl_sdhc_driver.h	178;"	d
SDMMC_RSP_136BITS	drivers\sdhc\fsl_sdhc_driver.h	181;"	d
SDMMC_RSP_BUSY	drivers\sdhc\fsl_sdhc_driver.h	183;"	d
SDMMC_RSP_CHK_IDX	drivers\sdhc\fsl_sdhc_driver.h	184;"	d
SDMMC_RSP_CRC	drivers\sdhc\fsl_sdhc_driver.h	182;"	d
SDMMC_RSP_NONE	drivers\sdhc\fsl_sdhc_driver.h	192;"	d
SDMMC_RSP_PRESENT	drivers\sdhc\fsl_sdhc_driver.h	180;"	d
SDMMC_RSP_R1	drivers\sdhc\fsl_sdhc_driver.h	193;"	d
SDMMC_RSP_R1B	drivers\sdhc\fsl_sdhc_driver.h	194;"	d
SDMMC_RSP_R2	drivers\sdhc\fsl_sdhc_driver.h	195;"	d
SDMMC_RSP_R3	drivers\sdhc\fsl_sdhc_driver.h	196;"	d
SDMMC_RSP_R4	drivers\sdhc\fsl_sdhc_driver.h	197;"	d
SDMMC_RSP_R5	drivers\sdhc\fsl_sdhc_driver.h	198;"	d
SDMMC_RSP_R6	drivers\sdhc\fsl_sdhc_driver.h	199;"	d
SDMMC_RSP_R7	drivers\sdhc\fsl_sdhc_driver.h	200;"	d
SdhcCard	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcCard$/;"	s
SdhcCommand	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcCommand$/;"	s
SdhcData	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcData$/;"	s
SdhcHostConfig	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcHostConfig$/;"	s
SdhcHostDevice	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcHostDevice$/;"	s
SdhcHostInitConfig	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcHostInitConfig$/;"	s
SdhcRequest	drivers\sdhc\fsl_sdhc_driver.h	/^struct SdhcRequest$/;"	s
__FSL_SDHC_H__	drivers\sdhc\fsl_sdhc_driver.h	32;"	d
_sdhc_card_type	drivers\sdhc\fsl_sdhc_driver.h	/^typedef enum _sdhc_card_type$/;"	g
_sdhc_power_mode	drivers\sdhc\fsl_sdhc_driver.h	/^typedef enum _sdhc_power_mode$/;"	g
_sdhc_status	drivers\sdhc\fsl_sdhc_driver.h	/^typedef enum _sdhc_status$/;"	g
argument	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t argument;                              \/*!< command argument *\/$/;"	m	struct:SdhcCommand
blockCount	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t blockCount;                            \/*!< block count *\/$/;"	m	struct:SdhcData
blockSize	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t blockSize;                             \/*!< block size *\/$/;"	m	struct:SdhcData
buffer	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t *buffer;                               \/*!< data buffer *\/$/;"	m	struct:SdhcData
busMode	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t busMode;                               \/*!< data width *\/$/;"	m	struct:SdhcCard
busWidth	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t busWidth;                              \/*!< current busWidth *\/$/;"	m	struct:SdhcHostDevice
busWidth	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t busWidth;                              \/*!< data bus width *\/$/;"	m	struct:SdhcHostConfig
busWidth	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t busWidth;                              \/*!< data bus width *\/$/;"	m	struct:SdhcHostInitConfig
bytesTransferred	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t bytesTransferred;                      \/*!< transferred buffer *\/$/;"	m	struct:SdhcData
capacity	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t capacity;                              \/*!< card total size *\/$/;"	m	struct:SdhcCard
caps	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t caps;                                  \/*!< capability *\/$/;"	m	struct:SdhcCard
caps	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t caps;                                  \/*!< host capability *\/$/;"	m	struct:SdhcHostDevice
card	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_card_t * card;                             \/*!< associated card *\/$/;"	m	struct:SdhcHostDevice
cardType	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_card_type_t cardType;                      \/*!< card type *\/$/;"	m	struct:SdhcCard
card_detect_callback	drivers\sdhc\fsl_sdhc_driver.h	/^    void (*card_detect_callback)(void *param);      \/*!< card detect callback function *\/$/;"	m	struct:SdhcHostInitConfig
clock	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t clock;                                 \/*!< clock rate *\/$/;"	m	struct:SdhcHostConfig
clock	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t clock;                                 \/*!< clock rate *\/$/;"	m	struct:SdhcHostInitConfig
clock	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t clock;                                 \/*!< current clock frequency *\/$/;"	m	struct:SdhcHostDevice
cmd	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_command_t *cmd;                            \/*!< associated command *\/$/;"	m	struct:SdhcData
cmd	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_command_t *cmd;                            \/*!< command associated with the request *\/$/;"	m	struct:SdhcRequest
config	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_host_config_t config;                      \/*!< host configuration *\/$/;"	m	struct:SdhcHostDevice
currentCmd	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_command_t * currentCmd;                    \/*!< associated command  *\/$/;"	m	struct:SdhcHostDevice
currentData	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_data_t * currentData;                      \/*!< associated data *\/$/;"	m	struct:SdhcHostDevice
currentReq	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_request_t * currentReq;                    \/*!< associated request *\/$/;"	m	struct:SdhcHostDevice
data	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_data_t *data;                              \/*!< data associated with request *\/$/;"	m	struct:SdhcCommand
data	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_data_t *data;                              \/*!< data associated with request *\/$/;"	m	struct:SdhcRequest
done	drivers\sdhc\fsl_sdhc_driver.h	/^    sync_object_t done;                             \/*!< sync object *\/$/;"	m	struct:SdhcRequest
endian	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t endian;                                \/*!< endian mode the host's working at *\/$/;"	m	struct:SdhcHostDevice
error	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t error;                                 \/*!< command error code *\/$/;"	m	struct:SdhcCommand
error	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t error;                                 \/*!< data error code *\/$/;"	m	struct:SdhcData
flags	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t flags;                                 \/*!< command flags *\/$/;"	m	struct:SdhcCommand
flags	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t flags;                                 \/*!< data flags *\/$/;"	m	struct:SdhcData
flags	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t flags;                                 \/*!< flags *\/$/;"	m	struct:SdhcCard
flags	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t flags;                                 \/*!< host flags *\/$/;"	m	struct:SdhcHostDevice
host	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_host_t * host;                             \/*!< associated host *\/$/;"	m	struct:SdhcCard
host_lock	drivers\sdhc\fsl_sdhc_driver.h	/^    sync_object_t host_lock;                        \/*!< sync object *\/$/;"	m	struct:SdhcHostDevice
index	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t index;                                 \/*!< command index *\/$/;"	m	struct:SdhcCommand
instance	drivers\sdhc\fsl_sdhc_driver.h	/^    uint8_t instance;                               \/*!< host instance index *\/$/;"	m	struct:SdhcHostDevice
irq	drivers\sdhc\fsl_sdhc_driver.h	/^    IRQn_Type irq;                                  \/*!< irq number *\/$/;"	m	struct:SdhcHostDevice
kCardTypeMMC	drivers\sdhc\fsl_sdhc_driver.h	/^    kCardTypeMMC,                   \/*!< MMC card type *\/$/;"	e	enum:_sdhc_card_type
kCardTypeSDHC	drivers\sdhc\fsl_sdhc_driver.h	/^    kCardTypeSDHC,                  \/*!< SDHC card type *\/$/;"	e	enum:_sdhc_card_type
kCardTypeSDSC	drivers\sdhc\fsl_sdhc_driver.h	/^    kCardTypeSDSC,                  \/*!< SDSC card type *\/$/;"	e	enum:_sdhc_card_type
kCardTypeSDXC	drivers\sdhc\fsl_sdhc_driver.h	/^    kCardTypeSDXC,                  \/*!< SDXC card type *\/$/;"	e	enum:_sdhc_card_type
kCardTypeUnknown	drivers\sdhc\fsl_sdhc_driver.h	/^    kCardTypeUnknown = 1,           \/*!< Unknown card type *\/$/;"	e	enum:_sdhc_card_type
kSdhcPowerModeRunning	drivers\sdhc\fsl_sdhc_driver.h	/^    kSdhcPowerModeRunning = 0,      \/*!< SDHC is running *\/$/;"	e	enum:_sdhc_power_mode
kSdhcPowerModeStopped	drivers\sdhc\fsl_sdhc_driver.h	/^    kSdhcPowerModeStopped,          \/*!< SDHC is stopped *\/$/;"	e	enum:_sdhc_power_mode
kSdhcPowerModeSuspended	drivers\sdhc\fsl_sdhc_driver.h	/^    kSdhcPowerModeSuspended,        \/*!< SDHC is suspended *\/$/;"	e	enum:_sdhc_power_mode
kStatus_SDHC_CardNotSupport	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_CardNotSupport,            \/*!< SDHC card does not support *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_CmdError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_CmdError,                  \/*!< SDHC cmd error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_CmdIoError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_CmdIoError,                \/*!< SDHC cmd IO error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_DataError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_DataError,                 \/*!< SDHC data error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_DataIoError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_DataIoError,               \/*!< SDHC data IO error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_Failed	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_Failed,                    \/*!< SDHC general failed *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_InvalidParameter	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_InvalidParameter,          \/*!< SDHC invalid parameter *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_IoError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_IoError,                   \/*!< SDHC general IO error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_NoError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_NoError = 0,               \/*!< SDHC no error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_NoMedium	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_NoMedium,                  \/*!< SDHC no medium error *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_NotSupportYet	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_NotSupportYet,             \/*!< SDHC not support *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_RequestFailed	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_RequestFailed,             \/*!< SDHC request failed *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_SwitchFailed	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_SwitchFailed,              \/*!< SDHC switch failed *\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_TimeoutError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_TimeoutError,              \/*!< SDHC timeout error*\/$/;"	e	enum:_sdhc_status
kStatus_SDHC_WaitTimeoutError	drivers\sdhc\fsl_sdhc_driver.h	/^    kStatus_SDHC_WaitTimeoutError,          \/*!< SDHC wait timeout error *\/$/;"	e	enum:_sdhc_status
length	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t length;                                \/*!< data length *\/$/;"	m	struct:SdhcData
maxBlockSize	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t maxBlockSize;                          \/*!< max block size supported *\/$/;"	m	struct:SdhcHostDevice
maxClock	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t maxClock;                              \/*!< max clock supported *\/$/;"	m	struct:SdhcHostDevice
ocr	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t ocr;$/;"	m	struct:SdhcHostDevice
ocrSupported	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t ocrSupported;                          \/*!< supported OCR *\/$/;"	m	struct:SdhcHostDevice
onDone	drivers\sdhc\fsl_sdhc_driver.h	/^    request_done onDone;                            \/*!< callback on request done *\/$/;"	m	struct:SdhcRequest
powerMode	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_power_mode_t powerMode;                    \/*!< current power mode *\/$/;"	m	struct:SdhcHostDevice
powerMode	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_power_mode_t powerMode;                    \/*!< power supply mode *\/$/;"	m	struct:SdhcHostConfig
rawCid	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t rawCid[4];                             \/*!< raw CID *\/$/;"	m	struct:SdhcCard
rawCsd	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t rawCsd[4];                             \/*!< raw CSD *\/$/;"	m	struct:SdhcCard
rawExtCsd	drivers\sdhc\fsl_sdhc_driver.h	/^    uint8_t* rawExtCsd;                             \/*!< raw EXT_CSD  *\/$/;"	m	struct:SdhcCard
rawScr	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t rawScr[2];                             \/*!< raw SCR *\/$/;"	m	struct:SdhcCard
rca	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t rca;                                   \/*!< RCA *\/$/;"	m	struct:SdhcCard
req	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_request_t *req;                            \/*!< associated request *\/$/;"	m	struct:SdhcCommand
req	drivers\sdhc\fsl_sdhc_driver.h	/^    sdhc_request_t *req;                            \/*!< associated request *\/$/;"	m	struct:SdhcData
request_done	drivers\sdhc\fsl_sdhc_driver.h	/^typedef void (*request_done)(sdhc_host_t *host, sdhc_request_t *req);$/;"	t
response	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t response[4];                           \/*!< response for this command *\/$/;"	m	struct:SdhcCommand
sdhc_card_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcCard sdhc_card_t;$/;"	t	typeref:struct:SdhcCard
sdhc_card_type_t	drivers\sdhc\fsl_sdhc_driver.h	/^} sdhc_card_type_t;$/;"	t	typeref:enum:_sdhc_card_type
sdhc_command_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcCommand sdhc_command_t;$/;"	t	typeref:struct:SdhcCommand
sdhc_data_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcData sdhc_data_t;$/;"	t	typeref:struct:SdhcData
sdhc_host_config_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcHostConfig sdhc_host_config_t;$/;"	t	typeref:struct:SdhcHostConfig
sdhc_host_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcHostDevice sdhc_host_t;$/;"	t	typeref:struct:SdhcHostDevice
sdhc_init_config_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcHostInitConfig sdhc_init_config_t;$/;"	t	typeref:struct:SdhcHostInitConfig
sdhc_power_mode_t	drivers\sdhc\fsl_sdhc_driver.h	/^} sdhc_power_mode_t;$/;"	t	typeref:enum:_sdhc_power_mode
sdhc_request_t	drivers\sdhc\fsl_sdhc_driver.h	/^typedef struct SdhcRequest sdhc_request_t;$/;"	t	typeref:struct:SdhcRequest
sdhc_status_t	drivers\sdhc\fsl_sdhc_driver.h	/^} sdhc_status_t;$/;"	t	typeref:enum:_sdhc_status
specVer	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t specVer;                               \/*!< host specification version *\/$/;"	m	struct:SdhcHostDevice
vendorVer	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t vendorVer;                             \/*!< host vendor version *\/$/;"	m	struct:SdhcHostDevice
version	drivers\sdhc\fsl_sdhc_driver.h	/^    uint32_t version;                               \/*!< card version *\/$/;"	m	struct:SdhcCard
SDHC_ACMD12_ERROR	drivers\sdhc\sdhc.h	169;"	d
SDHC_ADMA_ADDRESS	drivers\sdhc\sdhc.h	259;"	d
SDHC_ADMA_ERROR	drivers\sdhc\sdhc.h	258;"	d
SDHC_ARGUMENT	drivers\sdhc\sdhc.h	41;"	d
SDHC_ARGUMENT2	drivers\sdhc\sdhc.h	38;"	d
SDHC_BGCTRL_CNTNREQ	drivers\sdhc\sdhc.h	104;"	d
SDHC_BGCTRL_INTRATGAP	drivers\sdhc\sdhc.h	106;"	d
SDHC_BGCTRL_READWAIT	drivers\sdhc\sdhc.h	105;"	d
SDHC_BGCTRL_STPATGAPREQ	drivers\sdhc\sdhc.h	103;"	d
SDHC_BLOCK_COUNT	drivers\sdhc\sdhc.h	40;"	d
SDHC_BLOCK_GAP_CTRL	drivers\sdhc\sdhc.h	102;"	d
SDHC_BLOCK_SIZE	drivers\sdhc\sdhc.h	39;"	d
SDHC_BUFFER	drivers\sdhc\sdhc.h	64;"	d
SDHC_CLK_CLKGEN_PRG_SEL	drivers\sdhc\sdhc.h	117;"	d
SDHC_CLK_FREQ_SEL_LSF	drivers\sdhc\sdhc.h	120;"	d
SDHC_CLK_FREQ_SEL_MASK	drivers\sdhc\sdhc.h	121;"	d
SDHC_CLK_FREQ_U_LSF	drivers\sdhc\sdhc.h	118;"	d
SDHC_CLK_FREQ_U_MASK	drivers\sdhc\sdhc.h	119;"	d
SDHC_CLK_INTCLK_EN	drivers\sdhc\sdhc.h	114;"	d
SDHC_CLK_INTCLK_STB	drivers\sdhc\sdhc.h	115;"	d
SDHC_CLK_SDCLK_EN	drivers\sdhc\sdhc.h	116;"	d
SDHC_CLOCK_CONTROL	drivers\sdhc\sdhc.h	113;"	d
SDHC_CMD_CMDINDEX_LSF	drivers\sdhc\sdhc.h	59;"	d
SDHC_CMD_CMDINDEX_MASK	drivers\sdhc\sdhc.h	60;"	d
SDHC_CMD_CMDTYPE_LSF	drivers\sdhc\sdhc.h	57;"	d
SDHC_CMD_CMDTYPE_MASK	drivers\sdhc\sdhc.h	58;"	d
SDHC_CMD_CRC_CHK	drivers\sdhc\sdhc.h	54;"	d
SDHC_CMD_DATA_PRSNT	drivers\sdhc\sdhc.h	56;"	d
SDHC_CMD_INDEX_CHK	drivers\sdhc\sdhc.h	55;"	d
SDHC_CMD_RESPTYPE_LSF	drivers\sdhc\sdhc.h	52;"	d
SDHC_CMD_RESPTYPE_MASK	drivers\sdhc\sdhc.h	53;"	d
SDHC_COMMAND	drivers\sdhc\sdhc.h	51;"	d
SDHC_CTRL2_ASNYC_INTR_EN	drivers\sdhc\sdhc.h	187;"	d
SDHC_CTRL2_DRV_TYPE_A	drivers\sdhc\sdhc.h	182;"	d
SDHC_CTRL2_DRV_TYPE_B	drivers\sdhc\sdhc.h	181;"	d
SDHC_CTRL2_DRV_TYPE_C	drivers\sdhc\sdhc.h	183;"	d
SDHC_CTRL2_DRV_TYPE_D	drivers\sdhc\sdhc.h	184;"	d
SDHC_CTRL2_DRV_TYPE_MASK	drivers\sdhc\sdhc.h	180;"	d
SDHC_CTRL2_EXEC_TUNING	drivers\sdhc\sdhc.h	185;"	d
SDHC_CTRL2_HS_SDR200	drivers\sdhc\sdhc.h	178;"	d
SDHC_CTRL2_PRESET_VAL_EN	drivers\sdhc\sdhc.h	188;"	d
SDHC_CTRL2_TUNED_CLK	drivers\sdhc\sdhc.h	186;"	d
SDHC_CTRL2_UHS_DDR50	drivers\sdhc\sdhc.h	177;"	d
SDHC_CTRL2_UHS_MASK	drivers\sdhc\sdhc.h	172;"	d
SDHC_CTRL2_UHS_SDR104	drivers\sdhc\sdhc.h	176;"	d
SDHC_CTRL2_UHS_SDR12	drivers\sdhc\sdhc.h	173;"	d
SDHC_CTRL2_UHS_SDR25	drivers\sdhc\sdhc.h	174;"	d
SDHC_CTRL2_UHS_SDR50	drivers\sdhc\sdhc.h	175;"	d
SDHC_CTRL2_VDD_180	drivers\sdhc\sdhc.h	179;"	d
SDHC_CTRL_4BIT	drivers\sdhc\sdhc.h	85;"	d
SDHC_CTRL_8BIT	drivers\sdhc\sdhc.h	92;"	d
SDHC_CTRL_CD_SSELECT	drivers\sdhc\sdhc.h	94;"	d
SDHC_CTRL_CD_TEST_LVL	drivers\sdhc\sdhc.h	93;"	d
SDHC_CTRL_DMA_ADMA32	drivers\sdhc\sdhc.h	90;"	d
SDHC_CTRL_DMA_ADMA64	drivers\sdhc\sdhc.h	91;"	d
SDHC_CTRL_DMA_LSF	drivers\sdhc\sdhc.h	87;"	d
SDHC_CTRL_DMA_MASK	drivers\sdhc\sdhc.h	88;"	d
SDHC_CTRL_DMA_SDMA	drivers\sdhc\sdhc.h	89;"	d
SDHC_CTRL_HISPD	drivers\sdhc\sdhc.h	86;"	d
SDHC_CTRL_LED	drivers\sdhc\sdhc.h	84;"	d
SDHC_DMA_ADDRESS	drivers\sdhc\sdhc.h	37;"	d
SDHC_FEA_E_ACMD_CRC	drivers\sdhc\sdhc.h	242;"	d
SDHC_FEA_E_ACMD_END	drivers\sdhc\sdhc.h	243;"	d
SDHC_FEA_E_ACMD_INDEX	drivers\sdhc\sdhc.h	244;"	d
SDHC_FEA_E_ACMD_TIMEOUT	drivers\sdhc\sdhc.h	241;"	d
SDHC_FEA_E_CMD_NOT_BY_ACMD12	drivers\sdhc\sdhc.h	245;"	d
SDHC_FEA_E_NO_ACMD12_EXEC	drivers\sdhc\sdhc.h	240;"	d
SDHC_FEI_E_ADMA	drivers\sdhc\sdhc.h	256;"	d
SDHC_FEI_E_AUTO_CMD	drivers\sdhc\sdhc.h	255;"	d
SDHC_FEI_E_CMD_CRC	drivers\sdhc\sdhc.h	249;"	d
SDHC_FEI_E_CMD_END_BIT	drivers\sdhc\sdhc.h	250;"	d
SDHC_FEI_E_CMD_TIMEOUT	drivers\sdhc\sdhc.h	248;"	d
SDHC_FEI_E_CURRENT_LIMIT	drivers\sdhc\sdhc.h	254;"	d
SDHC_FEI_E_DATA_CRC	drivers\sdhc\sdhc.h	252;"	d
SDHC_FEI_E_DATA_END_BIT	drivers\sdhc\sdhc.h	253;"	d
SDHC_FEI_E_DATA_TIMEOUT	drivers\sdhc\sdhc.h	251;"	d
SDHC_FRC_EVENT_AUTOCMD	drivers\sdhc\sdhc.h	239;"	d
SDHC_FRC_EVENT_ERROR_INTR	drivers\sdhc\sdhc.h	247;"	d
SDHC_HCAP_CLK_BASE_MASK	drivers\sdhc\sdhc.h	193;"	d
SDHC_HCAP_CLK_MUL_LSF	drivers\sdhc\sdhc.h	228;"	d
SDHC_HCAP_CLK_MUL_MASK	drivers\sdhc\sdhc.h	229;"	d
SDHC_HCAP_DRIVER_TYPE_A	drivers\sdhc\sdhc.h	220;"	d
SDHC_HCAP_DRIVER_TYPE_C	drivers\sdhc\sdhc.h	221;"	d
SDHC_HCAP_DRIVER_TYPE_D	drivers\sdhc\sdhc.h	222;"	d
SDHC_HCAP_MAXBLK_1024	drivers\sdhc\sdhc.h	197;"	d
SDHC_HCAP_MAXBLK_2048	drivers\sdhc\sdhc.h	198;"	d
SDHC_HCAP_MAXBLK_512	drivers\sdhc\sdhc.h	196;"	d
SDHC_HCAP_MAX_BLK_LSF	drivers\sdhc\sdhc.h	194;"	d
SDHC_HCAP_MAX_BLK_MASK	drivers\sdhc\sdhc.h	195;"	d
SDHC_HCAP_RT_MODE_LSF	drivers\sdhc\sdhc.h	226;"	d
SDHC_HCAP_RT_MODE_MASK	drivers\sdhc\sdhc.h	227;"	d
SDHC_HCAP_RT_TMCNT_LSF	drivers\sdhc\sdhc.h	223;"	d
SDHC_HCAP_RT_TMCNT_MASK	drivers\sdhc\sdhc.h	224;"	d
SDHC_HCAP_SLOT_EMBEDDED	drivers\sdhc\sdhc.h	213;"	d
SDHC_HCAP_SLOT_REMOVABLE	drivers\sdhc\sdhc.h	212;"	d
SDHC_HCAP_SLOT_SHARED	drivers\sdhc\sdhc.h	214;"	d
SDHC_HCAP_SLOT_TYPE_LSF	drivers\sdhc\sdhc.h	210;"	d
SDHC_HCAP_SLOT_TYPE_MASK	drivers\sdhc\sdhc.h	211;"	d
SDHC_HCAP_SUPORT_DDR50	drivers\sdhc\sdhc.h	219;"	d
SDHC_HCAP_SUPORT_SDR104	drivers\sdhc\sdhc.h	218;"	d
SDHC_HCAP_SUPORT_SDR50	drivers\sdhc\sdhc.h	217;"	d
SDHC_HCAP_SUPPORT_64BIT	drivers\sdhc\sdhc.h	208;"	d
SDHC_HCAP_SUPPORT_8BIT	drivers\sdhc\sdhc.h	199;"	d
SDHC_HCAP_SUPPORT_ADMA1	drivers\sdhc\sdhc.h	201;"	d
SDHC_HCAP_SUPPORT_ADMA2	drivers\sdhc\sdhc.h	200;"	d
SDHC_HCAP_SUPPORT_ASYNC	drivers\sdhc\sdhc.h	209;"	d
SDHC_HCAP_SUPPORT_HISPD	drivers\sdhc\sdhc.h	202;"	d
SDHC_HCAP_SUPPORT_SDMA	drivers\sdhc\sdhc.h	203;"	d
SDHC_HCAP_SUPPORT_SUSPEND	drivers\sdhc\sdhc.h	204;"	d
SDHC_HCAP_SUPPORT_V180	drivers\sdhc\sdhc.h	207;"	d
SDHC_HCAP_SUPPORT_V300	drivers\sdhc\sdhc.h	206;"	d
SDHC_HCAP_SUPPORT_V330	drivers\sdhc\sdhc.h	205;"	d
SDHC_HCAP_TOCKLUINT_MHZ	drivers\sdhc\sdhc.h	192;"	d
SDHC_HCAP_TOCLKFREQ_MASK	drivers\sdhc\sdhc.h	191;"	d
SDHC_HCAP_USE_SDR50_TUNE	drivers\sdhc\sdhc.h	225;"	d
SDHC_HOST_CAPABILITIES	drivers\sdhc\sdhc.h	190;"	d
SDHC_HOST_CAPABILITIES_1	drivers\sdhc\sdhc.h	216;"	d
SDHC_HOST_CONTROL1	drivers\sdhc\sdhc.h	83;"	d
SDHC_HOST_CONTROL2	drivers\sdhc\sdhc.h	171;"	d
SDHC_HOST_VERSION	drivers\sdhc\sdhc.h	262;"	d
SDHC_INT_ALL_MASK	drivers\sdhc\sdhc.h	167;"	d
SDHC_INT_BLKGAP_EVENT	drivers\sdhc\sdhc.h	135;"	d
SDHC_INT_CARD_DET_MASK	drivers\sdhc\sdhc.h	164;"	d
SDHC_INT_CARD_INSERT	drivers\sdhc\sdhc.h	139;"	d
SDHC_INT_CARD_INTR	drivers\sdhc\sdhc.h	141;"	d
SDHC_INT_CARD_REMOVE	drivers\sdhc\sdhc.h	140;"	d
SDHC_INT_CMD_DONE	drivers\sdhc\sdhc.h	133;"	d
SDHC_INT_CMD_MASK	drivers\sdhc\sdhc.h	159;"	d
SDHC_INT_DATA_MASK	drivers\sdhc\sdhc.h	162;"	d
SDHC_INT_DMA	drivers\sdhc\sdhc.h	136;"	d
SDHC_INT_ENABLE	drivers\sdhc\sdhc.h	131;"	d
SDHC_INT_ERROR_INTR	drivers\sdhc\sdhc.h	146;"	d
SDHC_INT_ERROR_MASK	drivers\sdhc\sdhc.h	166;"	d
SDHC_INT_E_ADMA	drivers\sdhc\sdhc.h	156;"	d
SDHC_INT_E_AUTOCMD12	drivers\sdhc\sdhc.h	155;"	d
SDHC_INT_E_CMD_CRC	drivers\sdhc\sdhc.h	148;"	d
SDHC_INT_E_CMD_END_BIT	drivers\sdhc\sdhc.h	149;"	d
SDHC_INT_E_CMD_INDEX	drivers\sdhc\sdhc.h	150;"	d
SDHC_INT_E_CMD_TIMEOUT	drivers\sdhc\sdhc.h	147;"	d
SDHC_INT_E_CUR_LIMIT	drivers\sdhc\sdhc.h	154;"	d
SDHC_INT_E_DATA_CRC	drivers\sdhc\sdhc.h	152;"	d
SDHC_INT_E_DATA_END_BIT	drivers\sdhc\sdhc.h	153;"	d
SDHC_INT_E_DATA_TIMEOUT	drivers\sdhc\sdhc.h	151;"	d
SDHC_INT_E_TUNING	drivers\sdhc\sdhc.h	157;"	d
SDHC_INT_INT_A	drivers\sdhc\sdhc.h	142;"	d
SDHC_INT_INT_B	drivers\sdhc\sdhc.h	143;"	d
SDHC_INT_INT_C	drivers\sdhc\sdhc.h	144;"	d
SDHC_INT_NORMAL_MASK	drivers\sdhc\sdhc.h	165;"	d
SDHC_INT_RBUF_READY	drivers\sdhc\sdhc.h	138;"	d
SDHC_INT_RETUNING	drivers\sdhc\sdhc.h	145;"	d
SDHC_INT_STATUS	drivers\sdhc\sdhc.h	130;"	d
SDHC_INT_TRANSFER_DONE	drivers\sdhc\sdhc.h	134;"	d
SDHC_INT_WBUF_READY	drivers\sdhc\sdhc.h	137;"	d
SDHC_MAX_CURRENT	drivers\sdhc\sdhc.h	231;"	d
SDHC_MC_180_LSF	drivers\sdhc\sdhc.h	236;"	d
SDHC_MC_180_MASK	drivers\sdhc\sdhc.h	237;"	d
SDHC_MC_300_LSF	drivers\sdhc\sdhc.h	234;"	d
SDHC_MC_300_MASK	drivers\sdhc\sdhc.h	235;"	d
SDHC_MC_330_LSF	drivers\sdhc\sdhc.h	232;"	d
SDHC_MC_330_MASK	drivers\sdhc\sdhc.h	233;"	d
SDHC_POWER_180	drivers\sdhc\sdhc.h	98;"	d
SDHC_POWER_300	drivers\sdhc\sdhc.h	99;"	d
SDHC_POWER_330	drivers\sdhc\sdhc.h	100;"	d
SDHC_POWER_CONTROL	drivers\sdhc\sdhc.h	96;"	d
SDHC_POWER_ON	drivers\sdhc\sdhc.h	97;"	d
SDHC_PRESENT_STATE	drivers\sdhc\sdhc.h	66;"	d
SDHC_PRST_BUFF_RD	drivers\sdhc\sdhc.h	74;"	d
SDHC_PRST_BUFF_WR	drivers\sdhc\sdhc.h	73;"	d
SDHC_PRST_CARD_INSERTED	drivers\sdhc\sdhc.h	75;"	d
SDHC_PRST_CD_LVL	drivers\sdhc\sdhc.h	77;"	d
SDHC_PRST_CMD_INHIBIT	drivers\sdhc\sdhc.h	67;"	d
SDHC_PRST_CMD_LVL	drivers\sdhc\sdhc.h	81;"	d
SDHC_PRST_CSS	drivers\sdhc\sdhc.h	76;"	d
SDHC_PRST_DATA_INHIBIT	drivers\sdhc\sdhc.h	68;"	d
SDHC_PRST_DLA	drivers\sdhc\sdhc.h	69;"	d
SDHC_PRST_DLSL_0_3_LSF	drivers\sdhc\sdhc.h	79;"	d
SDHC_PRST_DLSL_0_3_MASK	drivers\sdhc\sdhc.h	80;"	d
SDHC_PRST_RD_TRANS_A	drivers\sdhc\sdhc.h	72;"	d
SDHC_PRST_RETUNE_REQ	drivers\sdhc\sdhc.h	70;"	d
SDHC_PRST_WP_LVL	drivers\sdhc\sdhc.h	78;"	d
SDHC_PRST_WR_TRANS_A	drivers\sdhc\sdhc.h	71;"	d
SDHC_RESET_ALL	drivers\sdhc\sdhc.h	126;"	d
SDHC_RESET_CMD	drivers\sdhc\sdhc.h	127;"	d
SDHC_RESET_DATA	drivers\sdhc\sdhc.h	128;"	d
SDHC_RESPONSE	drivers\sdhc\sdhc.h	62;"	d
SDHC_SIGNAL_ENABLE	drivers\sdhc\sdhc.h	132;"	d
SDHC_SLOT_INT_STATUS	drivers\sdhc\sdhc.h	261;"	d
SDHC_SOFTWARE_RESET	drivers\sdhc\sdhc.h	125;"	d
SDHC_SPEC_100	drivers\sdhc\sdhc.h	267;"	d
SDHC_SPEC_200	drivers\sdhc\sdhc.h	268;"	d
SDHC_SPEC_300	drivers\sdhc\sdhc.h	269;"	d
SDHC_SPEC_VER_LSF	drivers\sdhc\sdhc.h	265;"	d
SDHC_SPEC_VER_MASK	drivers\sdhc\sdhc.h	266;"	d
SDHC_TIMEOUT_CONTROL	drivers\sdhc\sdhc.h	123;"	d
SDHC_TRANSFER_MODE	drivers\sdhc\sdhc.h	43;"	d
SDHC_TRNSM_AUTOCMD12	drivers\sdhc\sdhc.h	46;"	d
SDHC_TRNSM_AUTOCMD23	drivers\sdhc\sdhc.h	47;"	d
SDHC_TRNSM_BLKCNT_EN	drivers\sdhc\sdhc.h	45;"	d
SDHC_TRNSM_DMA_EN	drivers\sdhc\sdhc.h	44;"	d
SDHC_TRNSM_MULTI	drivers\sdhc\sdhc.h	49;"	d
SDHC_TRNSM_READ	drivers\sdhc\sdhc.h	48;"	d
SDHC_VENDOR_VER_LSF	drivers\sdhc\sdhc.h	263;"	d
SDHC_VENDOR_VER_MASK	drivers\sdhc\sdhc.h	264;"	d
SDHC_WAKEUP_CONTROL	drivers\sdhc\sdhc.h	108;"	d
SDHC_WAKE_ON_INSERT	drivers\sdhc\sdhc.h	110;"	d
SDHC_WAKE_ON_INT	drivers\sdhc\sdhc.h	109;"	d
SDHC_WAKE_ON_REMOVE	drivers\sdhc\sdhc.h	111;"	d
__SDHC_H__	drivers\sdhc\sdhc.h	32;"	d
SDMMC_CARD_4BIT_MODE	drivers\sdhc\sdmmc.h	38;"	d
SDMMC_CARD_BUSY	drivers\sdhc\sdmmc.h	37;"	d
SDMMC_CLK_100KHZ	drivers\sdhc\sdmmc.h	61;"	d
SDMMC_CLK_25MHZ	drivers\sdhc\sdmmc.h	63;"	d
SDMMC_CLK_400KHZ	drivers\sdhc\sdmmc.h	62;"	d
SDMMC_CLK_50MHZ	drivers\sdhc\sdmmc.h	64;"	d
SDMMC_R1_ADDRESS_ERROR	drivers\sdhc\sdmmc.h	67;"	d
SDMMC_R1_APP_CMD	drivers\sdhc\sdmmc.h	88;"	d
SDMMC_R1_BLOCK_LEN_ERROR	drivers\sdhc\sdmmc.h	68;"	d
SDMMC_R1_CARD_ECC_DISABLED	drivers\sdhc\sdmmc.h	83;"	d
SDMMC_R1_CARD_ECC_FAILED	drivers\sdhc\sdmmc.h	76;"	d
SDMMC_R1_CARD_IS_LOCKED	drivers\sdhc\sdmmc.h	72;"	d
SDMMC_R1_CC_ERROR	drivers\sdhc\sdmmc.h	77;"	d
SDMMC_R1_CID_CSD_OVERWRITE	drivers\sdhc\sdmmc.h	81;"	d
SDMMC_R1_COM_CRC_ERROR	drivers\sdhc\sdmmc.h	74;"	d
SDMMC_R1_CURRENT_STATE	drivers\sdhc\sdmmc.h	90;"	d
SDMMC_R1_ERASE_PARAM	drivers\sdhc\sdmmc.h	70;"	d
SDMMC_R1_ERASE_RESET	drivers\sdhc\sdmmc.h	84;"	d
SDMMC_R1_ERASE_SEQ_ERROR	drivers\sdhc\sdmmc.h	69;"	d
SDMMC_R1_ERROR	drivers\sdhc\sdmmc.h	78;"	d
SDMMC_R1_ILLEGAL_COMMAND	drivers\sdhc\sdmmc.h	75;"	d
SDMMC_R1_LOCK_UNLOCK_FAILED	drivers\sdhc\sdmmc.h	73;"	d
SDMMC_R1_OUT_OF_RANGE	drivers\sdhc\sdmmc.h	66;"	d
SDMMC_R1_OVERRUN	drivers\sdhc\sdmmc.h	80;"	d
SDMMC_R1_READY_FOR_DATA	drivers\sdhc\sdmmc.h	86;"	d
SDMMC_R1_STATE_DATA	drivers\sdhc\sdmmc.h	96;"	d
SDMMC_R1_STATE_DIS	drivers\sdhc\sdmmc.h	99;"	d
SDMMC_R1_STATE_IDENT	drivers\sdhc\sdmmc.h	93;"	d
SDMMC_R1_STATE_IDLE	drivers\sdhc\sdmmc.h	91;"	d
SDMMC_R1_STATE_PRG	drivers\sdhc\sdmmc.h	98;"	d
SDMMC_R1_STATE_RCV	drivers\sdhc\sdmmc.h	97;"	d
SDMMC_R1_STATE_READY	drivers\sdhc\sdmmc.h	92;"	d
SDMMC_R1_STATE_STBY	drivers\sdhc\sdmmc.h	94;"	d
SDMMC_R1_STATE_TRAN	drivers\sdhc\sdmmc.h	95;"	d
SDMMC_R1_STATUS	drivers\sdhc\sdmmc.h	85;"	d
SDMMC_R1_SWITCH_ERROR	drivers\sdhc\sdmmc.h	87;"	d
SDMMC_R1_UNDERRUN	drivers\sdhc\sdmmc.h	79;"	d
SDMMC_R1_WP_ERASE_SKIP	drivers\sdhc\sdmmc.h	82;"	d
SDMMC_R1_WP_VIOLATION	drivers\sdhc\sdmmc.h	71;"	d
SDMMC_SD_VERSION_1_0	drivers\sdhc\sdmmc.h	101;"	d
SDMMC_SD_VERSION_1_1	drivers\sdhc\sdmmc.h	102;"	d
SDMMC_SD_VERSION_2_0	drivers\sdhc\sdmmc.h	103;"	d
SDMMC_SD_VERSION_3_0	drivers\sdhc\sdmmc.h	104;"	d
SD_BUS_WIDTH_1BIT	drivers\sdhc\sdmmc.h	45;"	d
SD_BUS_WIDTH_4BIT	drivers\sdhc\sdmmc.h	46;"	d
SD_HIGHSPEED_BUSY	drivers\sdhc\sdmmc.h	48;"	d
SD_HIGHSPEED_SUPPORTED	drivers\sdhc\sdmmc.h	49;"	d
SD_OCR_CCS	drivers\sdhc\sdmmc.h	40;"	d
SD_OCR_S18A	drivers\sdhc\sdmmc.h	43;"	d
SD_OCR_S18R	drivers\sdhc\sdmmc.h	42;"	d
SD_OCR_VDD_27_28	drivers\sdhc\sdmmc.h	51;"	d
SD_OCR_VDD_28_29	drivers\sdhc\sdmmc.h	52;"	d
SD_OCR_VDD_29_30	drivers\sdhc\sdmmc.h	53;"	d
SD_OCR_VDD_30_31	drivers\sdhc\sdmmc.h	54;"	d
SD_OCR_VDD_31_32	drivers\sdhc\sdmmc.h	55;"	d
SD_OCR_VDD_32_33	drivers\sdhc\sdmmc.h	56;"	d
SD_OCR_VDD_33_34	drivers\sdhc\sdmmc.h	57;"	d
SD_OCR_VDD_34_35	drivers\sdhc\sdmmc.h	58;"	d
SD_OCR_VDD_35_36	drivers\sdhc\sdmmc.h	59;"	d
SD_OCR_XPC	drivers\sdhc\sdmmc.h	41;"	d
__SDMMC_H__	drivers\sdhc\sdmmc.h	32;"	d
kAllSendCid	drivers\sdhc\sdmmc.h	/^    kAllSendCid = 2,                \/*!< bcr                      R2 *\/$/;"	e	enum:__anon2
kAppCmd	drivers\sdhc\sdmmc.h	/^    kAppCmd = 55,                   \/*!< ac       [31:16] RCA     R1 *\/$/;"	e	enum:__anon2
kClrWriteProt	drivers\sdhc\sdmmc.h	/^    kClrWriteProt = 29,             \/*!< ac       [31:0] data     R1b *\/$/;"	e	enum:__anon2
kErase	drivers\sdhc\sdmmc.h	/^    kErase = 38,                    \/*!< ac                       R1 *\/$/;"	e	enum:__anon2
kGenCmd	drivers\sdhc\sdmmc.h	/^    kGenCmd = 56,                   \/*!< adtc     [0] RD\/WR       R1 *\/$/;"	e	enum:__anon2
kGoIdleState	drivers\sdhc\sdmmc.h	/^    kGoIdleState = 0,               \/*!< bc *\/$/;"	e	enum:__anon2
kGoInactiveState	drivers\sdhc\sdmmc.h	/^    kGoInactiveState = 15,          \/*!< ac       [31:16] RCA *\/$/;"	e	enum:__anon2
kLockUnlock	drivers\sdhc\sdmmc.h	/^    kLockUnlock = 42,               \/*!< adtc     all zero        R1 *\/$/;"	e	enum:__anon2
kMmcBusTestRead	drivers\sdhc\sdmmc.h	/^    kMmcBusTestRead = 14,           \/*!< adtc                     R1 *\/$/;"	e	enum:__anon1
kMmcEraseGroupEnd	drivers\sdhc\sdmmc.h	/^    kMmcEraseGroupEnd = 36,         \/*!< ac       [31:0] data     R1 *\/$/;"	e	enum:__anon1
kMmcEraseGroupStart	drivers\sdhc\sdmmc.h	/^    kMmcEraseGroupStart = 35,       \/*!< ac       [31:0] data     R1 *\/$/;"	e	enum:__anon1
kMmcFastIo	drivers\sdhc\sdmmc.h	/^    kMmcFastIo = 39,                \/*!< ac                       R4 *\/$/;"	e	enum:__anon1
kMmcGoIrqState	drivers\sdhc\sdmmc.h	/^    kMmcGoIrqState = 40,            \/*!< bcr                      R5 *\/$/;"	e	enum:__anon1
kMmcProgramCid	drivers\sdhc\sdmmc.h	/^    kMmcProgramCid = 26,            \/*!< adtc                     R1 *\/$/;"	e	enum:__anon1
kMmcReadDataUntilStop	drivers\sdhc\sdmmc.h	/^    kMmcReadDataUntilStop = 11,     \/*!< adtc     [31:0] data     R1 *\/$/;"	e	enum:__anon1
kMmcSendExtCsd	drivers\sdhc\sdmmc.h	/^    kMmcSendExtCsd = 8,             \/*!< adtc                     R1 *\/$/;"	e	enum:__anon1
kMmcSetRelativeAddr	drivers\sdhc\sdmmc.h	/^    kMmcSetRelativeAddr = 3,        \/*!< ac       [31:16] RCA     R1 *\/$/;"	e	enum:__anon1
kMmcSleepAwake	drivers\sdhc\sdmmc.h	/^    kMmcSleepAwake = 5,             \/*!< ac       [31:16] RCA     R1b *\/$/;"	e	enum:__anon1
kMmcSwitch	drivers\sdhc\sdmmc.h	/^    kMmcSwitch = 6,                 \/*!< ac       [31:16] RCA     R1b *\/$/;"	e	enum:__anon1
kMmcWriteDataUntilStop	drivers\sdhc\sdmmc.h	/^    kMmcWriteDataUntilStop = 20,    \/*!< ac       [31:0] data    R1 *\/$/;"	e	enum:__anon1
kProgramCsd	drivers\sdhc\sdmmc.h	/^    kProgramCsd = 27,               \/*!< adtc                     R1 *\/$/;"	e	enum:__anon2
kReadMultipleBlock	drivers\sdhc\sdmmc.h	/^    kReadMultipleBlock = 18,        \/*!< adtc     [31:0] data     R1 *\/$/;"	e	enum:__anon2
kReadSingleBlock	drivers\sdhc\sdmmc.h	/^    kReadSingleBlock = 17,          \/*!< adtc     [31:0] data     R1 *\/$/;"	e	enum:__anon2
kSdAppSendNumWrBlocks	drivers\sdhc\sdmmc.h	/^    kSdAppSendNumWrBlocks = 22,     \/*!< adtc                     R1 *\/$/;"	e	enum:__anon4
kSdAppSendOpCond	drivers\sdhc\sdmmc.h	/^    kSdAppSendOpCond = 41,          \/*!< bcr      [30] HCS        R3 *\/$/;"	e	enum:__anon4
kSdAppSendScr	drivers\sdhc\sdmmc.h	/^    kSdAppSendScr = 51,             \/*!< adtc                     R1 *\/$/;"	e	enum:__anon4
kSdAppSetBusWdith	drivers\sdhc\sdmmc.h	/^    kSdAppSetBusWdith = 6,          \/*!< ac       [1:0] bus       R1 *\/$/;"	e	enum:__anon4
kSdAppSetClrCardDetect	drivers\sdhc\sdmmc.h	/^    kSdAppSetClrCardDetect = 42,    \/*!< ac       [0] set cd      R1 *\/$/;"	e	enum:__anon4
kSdAppSetWrBlkEraseCount	drivers\sdhc\sdmmc.h	/^    kSdAppSetWrBlkEraseCount = 23,  \/*!< ac       [22:0] number   R1 *\/$/;"	e	enum:__anon4
kSdAppStatus	drivers\sdhc\sdmmc.h	/^    kSdAppStatus = 13,              \/*!< adtc                     R1 *\/$/;"	e	enum:__anon4
kSdEraseWrBlkEnd	drivers\sdhc\sdmmc.h	/^    kSdEraseWrBlkEnd = 33,          \/*!< ac       [31:0] data     R1 *\/$/;"	e	enum:__anon3
kSdEraseWrBlkStart	drivers\sdhc\sdmmc.h	/^    kSdEraseWrBlkStart = 32,        \/*!< ac       [31:0] data     R1 *\/$/;"	e	enum:__anon3
kSdSendIfCond	drivers\sdhc\sdmmc.h	/^    kSdSendIfCond = 8,              \/*!< bcr      [11:8] supply   R7 *\/$/;"	e	enum:__anon3
kSdSendRelativeAddr	drivers\sdhc\sdmmc.h	/^    kSdSendRelativeAddr = 3,        \/*!< bcr                      R6 *\/$/;"	e	enum:__anon3
kSdSpeedClassControl	drivers\sdhc\sdmmc.h	/^    kSdSpeedClassControl = 20,      \/*!< ac       [31:28] speed   R1b *\/$/;"	e	enum:__anon3
kSdSwitch	drivers\sdhc\sdmmc.h	/^    kSdSwitch = 6,                  \/*!< adtc     [31] mode       R1 *\/$/;"	e	enum:__anon3
kSdSwitchCheck	drivers\sdhc\sdmmc.h	/^    kSdSwitchCheck = 0,             \/*!< SD switch mode 0: check function *\/$/;"	e	enum:__anon5
kSdSwitchSet	drivers\sdhc\sdmmc.h	/^    kSdSwitchSet = 1,               \/*!< SD switch mode 1: set function *\/$/;"	e	enum:__anon5
kSdVoltageSwitch	drivers\sdhc\sdmmc.h	/^    kSdVoltageSwitch = 11,          \/*!< ac                       R1 *\/$/;"	e	enum:__anon3
kSelectCard	drivers\sdhc\sdmmc.h	/^    kSelectCard = 7,                \/*!< ac       [31:16] RCA     R1b *\/$/;"	e	enum:__anon2
kSendCid	drivers\sdhc\sdmmc.h	/^    kSendCid = 10,                  \/*!< ac       [31:16] RCA     R2 *\/$/;"	e	enum:__anon2
kSendCsd	drivers\sdhc\sdmmc.h	/^    kSendCsd = 9,                   \/*!< ac       [31:16] RCA     R2 *\/$/;"	e	enum:__anon2
kSendOpCond	drivers\sdhc\sdmmc.h	/^    kSendOpCond = 1,                \/*!< bcr      [31:0] OCR      R3 *\/$/;"	e	enum:__anon2
kSendStatus	drivers\sdhc\sdmmc.h	/^    kSendStatus = 13,               \/*!< ac       [31:16] RCA     R1 *\/$/;"	e	enum:__anon2
kSendTuningBlock	drivers\sdhc\sdmmc.h	/^    kSendTuningBlock = 19,          \/*!< adtc     [31:0] all      R1 *\/$/;"	e	enum:__anon2
kSendWriteProt	drivers\sdhc\sdmmc.h	/^    kSendWriteProt = 30,            \/*!< adtc     [31:0] write    R1b *\/$/;"	e	enum:__anon2
kSetBlockCount	drivers\sdhc\sdmmc.h	/^    kSetBlockCount = 23,            \/*!< ac       [31:0] block    R1 *\/$/;"	e	enum:__anon2
kSetBlockLen	drivers\sdhc\sdmmc.h	/^    kSetBlockLen = 16,              \/*!< ac       [31:0] block    R1 *\/$/;"	e	enum:__anon2
kSetDsr	drivers\sdhc\sdmmc.h	/^    kSetDsr = 4,                    \/*!< bc       [31:16] RCA *\/$/;"	e	enum:__anon2
kSetWriteProt	drivers\sdhc\sdmmc.h	/^    kSetWriteProt = 28,             \/*!< ac       [31:0] data     R1b *\/$/;"	e	enum:__anon2
kStopTransmission	drivers\sdhc\sdmmc.h	/^    kStopTransmission = 12,         \/*!< ac       [31:16] RCA     R1b *\/$/;"	e	enum:__anon2
kWriteBlock	drivers\sdhc\sdmmc.h	/^    kWriteBlock = 24,               \/*!< adtc     [31:0] data     R1 *\/$/;"	e	enum:__anon2
kWriteMultipleBlock	drivers\sdhc\sdmmc.h	/^    kWriteMultipleBlock = 25,       \/*!< adtc     [31:0] data     R1 *\/$/;"	e	enum:__anon2
mmc_cmd_t	drivers\sdhc\sdmmc.h	/^} mmc_cmd_t;$/;"	t	typeref:enum:__anon1
sd_acmd_t	drivers\sdhc\sdmmc.h	/^} sd_acmd_t;$/;"	t	typeref:enum:__anon4
sd_cmd_t	drivers\sdhc\sdmmc.h	/^} sd_cmd_t;$/;"	t	typeref:enum:__anon3
sd_switch_mode_t	drivers\sdhc\sdmmc.h	/^} sd_switch_mode_t;$/;"	t	typeref:enum:__anon5
sdmmc_cmd_t	drivers\sdhc\sdmmc.h	/^} sdmmc_cmd_t;$/;"	t	typeref:enum:__anon2
sdhc_check_card	drivers\sdhc\src\fsl_sdhc_driver.c	/^sdhc_status_t sdhc_check_card(sdhc_host_t *host, sdhc_card_t *card)$/;"	f
sdhc_config_host	drivers\sdhc\src\fsl_sdhc_driver.c	/^sdhc_status_t sdhc_config_host(sdhc_host_t *host, sdhc_host_config_t *config)$/;"	f
sdhc_enable_clk	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_enable_clk(sdhc_host_t *host, bool isEnabled)$/;"	f	file:
sdhc_get_host_version	drivers\sdhc\src\fsl_sdhc_driver.c	/^static void sdhc_get_host_version(sdhc_host_t *host)$/;"	f	file:
sdhc_init	drivers\sdhc\src\fsl_sdhc_driver.c	/^sdhc_status_t sdhc_init(uint8_t instance, sdhc_host_t * host, sdhc_init_config_t *config)$/;"	f
sdhc_init_card	drivers\sdhc\src\fsl_sdhc_driver.c	/^static void sdhc_init_card(sdhc_host_t *host)$/;"	f	file:
sdhc_is_card_present	drivers\sdhc\src\fsl_sdhc_driver.c	/^static bool sdhc_is_card_present(sdhc_host_t *host)$/;"	f	file:
sdhc_issue_request	drivers\sdhc\src\fsl_sdhc_driver.c	/^sdhc_status_t sdhc_issue_request(sdhc_host_t *host, sdhc_request_t *req)$/;"	f
sdhc_reset	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_reset(sdhc_host_t *host, uint32_t mask)$/;"	f	file:
sdhc_select_clk	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_select_clk(sdhc_host_t *host, uint32_t clkSource)$/;"	f	file:
sdhc_send_command	drivers\sdhc\src\fsl_sdhc_driver.c	/^sdhc_status_t sdhc_send_command(sdhc_host_t *host, sdhc_command_t *cmd)$/;"	f
sdhc_set_bus_width	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_set_bus_width(sdhc_host_t *host, uint32_t busWidth)$/;"	f	file:
sdhc_set_clock	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_set_clock(sdhc_host_t *host, uint32_t clock)$/;"	f	file:
sdhc_set_max_blksz	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_set_max_blksz(sdhc_host_t *host)$/;"	f	file:
sdhc_set_power_mode	drivers\sdhc\src\fsl_sdhc_driver.c	/^static sdhc_status_t sdhc_set_power_mode(sdhc_host_t *host, sdhc_power_mode_t powerMode)$/;"	f	file:
sdhc_shutdown	drivers\sdhc\src\fsl_sdhc_driver.c	/^void sdhc_shutdown(sdhc_host_t *host)$/;"	f
sdhc_wait_for_request_done	drivers\sdhc\src\fsl_sdhc_driver.c	/^static void sdhc_wait_for_request_done(sdhc_host_t *host, sdhc_request_t *req)$/;"	f	file:
sdhc_wait_intr	drivers\sdhc\src\fsl_sdhc_driver.c	/^static uint32_t sdhc_wait_intr(sdhc_host_t *host, uint32_t mask)$/;"	f	file:
__FSL_SMC_MANAGER_H__	drivers\smc\fsl_smc_manager.h	32;"	d
_power_modes	drivers\smc\fsl_smc_manager.h	/^typedef enum _power_modes {$/;"	g
_smc_manager_error_code	drivers\smc\fsl_smc_manager.h	/^typedef enum _smc_manager_error_code {$/;"	g
_smc_power_mode_config	drivers\smc\fsl_smc_manager.h	/^typedef struct _smc_power_mode_config {$/;"	s
kPowerModeLls	drivers\smc\fsl_smc_manager.h	/^    kPowerModeLls,$/;"	e	enum:_power_modes
kPowerModeMax	drivers\smc\fsl_smc_manager.h	/^    kPowerModeMax$/;"	e	enum:_power_modes
kPowerModeRun	drivers\smc\fsl_smc_manager.h	/^    kPowerModeRun,$/;"	e	enum:_power_modes
kPowerModeStop	drivers\smc\fsl_smc_manager.h	/^    kPowerModeStop,$/;"	e	enum:_power_modes
kPowerModeVlls	drivers\smc\fsl_smc_manager.h	/^    kPowerModeVlls,$/;"	e	enum:_power_modes
kPowerModeVlpr	drivers\smc\fsl_smc_manager.h	/^    kPowerModeVlpr,$/;"	e	enum:_power_modes
kPowerModeVlps	drivers\smc\fsl_smc_manager.h	/^    kPowerModeVlps,$/;"	e	enum:_power_modes
kPowerModeVlpw	drivers\smc\fsl_smc_manager.h	/^    kPowerModeVlpw,$/;"	e	enum:_power_modes
kPowerModeWait	drivers\smc\fsl_smc_manager.h	/^    kPowerModeWait,$/;"	e	enum:_power_modes
kSmcManagerAlreadyInTheState	drivers\smc\fsl_smc_manager.h	/^    kSmcManagerAlreadyInTheState,                 \/*!< already in the required state*\/$/;"	e	enum:_smc_manager_error_code
kSmcManagerFailed	drivers\smc\fsl_smc_manager.h	/^    kSmcManagerFailed                             \/*!< unknown error, operation failed*\/$/;"	e	enum:_smc_manager_error_code
kSmcManagerNoSuchModeName	drivers\smc\fsl_smc_manager.h	/^    kSmcManagerNoSuchModeName,                    \/*!< cannot find the mode name specified*\/$/;"	e	enum:_smc_manager_error_code
kSmcManagerSuccess	drivers\smc\fsl_smc_manager.h	/^    kSmcManagerSuccess,                           \/*!< success *\/$/;"	e	enum:_smc_manager_error_code
lpwuiOption	drivers\smc\fsl_smc_manager.h	/^    bool                lpwuiOption;        \/*!< if LPWUI option is needed *\/$/;"	m	struct:_smc_power_mode_config
lpwuiOptionValue	drivers\smc\fsl_smc_manager.h	/^    smc_lpwui_option_t  lpwuiOptionValue;   \/*!< LPWUI option(enum), see smc_lpwui_option_t *\/$/;"	m	struct:_smc_power_mode_config
porOption	drivers\smc\fsl_smc_manager.h	/^    bool                porOption;          \/*!< if POR option is needed *\/$/;"	m	struct:_smc_power_mode_config
porOptionValue	drivers\smc\fsl_smc_manager.h	/^    smc_por_option_t    porOptionValue;     \/*!< POR option(enum), see smc_por_option_t *\/$/;"	m	struct:_smc_power_mode_config
powerModeName	drivers\smc\fsl_smc_manager.h	/^    power_modes_t       powerModeName;      \/*!< power mode(enum), see power_modes_t *\/$/;"	m	struct:_smc_power_mode_config
power_modes_t	drivers\smc\fsl_smc_manager.h	/^} power_modes_t;$/;"	t	typeref:enum:_power_modes
smc_manager_error_code_t	drivers\smc\fsl_smc_manager.h	/^} smc_manager_error_code_t;$/;"	t	typeref:enum:_smc_manager_error_code
smc_power_mode_config_t	drivers\smc\fsl_smc_manager.h	/^} smc_power_mode_config_t;$/;"	t	typeref:struct:_smc_power_mode_config
stopSubMode	drivers\smc\fsl_smc_manager.h	/^    smc_stop_submode_t  stopSubMode;        \/*!< stop submode(enum), see smc_stop_submode_t *\/$/;"	m	struct:_smc_power_mode_config
smc_set_power_mode	drivers\smc\src\fsl_smc_manager.c	/^smc_manager_error_code_t smc_set_power_mode(const smc_power_mode_config_t *powerModeConfig)$/;"	f
AUDIO_BUFFER_BLOCK	drivers\soundcard\fsl_soundcard.h	51;"	d
AUDIO_BUFFER_BLOCK_SIZE	drivers\soundcard\fsl_soundcard.h	50;"	d
AUDIO_BUFFER_SIZE	drivers\soundcard\fsl_soundcard.h	52;"	d
Audio_Codec	drivers\soundcard\fsl_soundcard.h	/^typedef struct Audio_Codec$/;"	s
Audio_Controller	drivers\soundcard\fsl_soundcard.h	/^typedef struct Audio_Controller$/;"	s
Audio_Status	drivers\soundcard\fsl_soundcard.h	/^ typedef struct Audio_Status$/;"	s
I2S_config	drivers\soundcard\fsl_soundcard.h	/^typedef struct I2S_config$/;"	s
I2S_device_config	drivers\soundcard\fsl_soundcard.h	/^typedef struct I2S_device_config$/;"	s
PCM_Audio_Format	drivers\soundcard\fsl_soundcard.h	/^typedef struct PCM_Audio_Format{$/;"	s
Soundcard	drivers\soundcard\fsl_soundcard.h	/^typedef struct Soundcard$/;"	s
USEDMA	drivers\soundcard\fsl_soundcard.h	54;"	d
__FSL_SOUNDCARD_H__	drivers\soundcard\fsl_soundcard.h	32;"	d
_snd_status	drivers\soundcard\fsl_soundcard.h	/^typedef enum _snd_status$/;"	g
audio_codec_operation	drivers\soundcard\fsl_soundcard.h	/^typedef struct audio_codec_operation$/;"	s
audio_codec_operation_t	drivers\soundcard\fsl_soundcard.h	/^} audio_codec_operation_t;$/;"	t	typeref:struct:audio_codec_operation
audio_codec_t	drivers\soundcard\fsl_soundcard.h	/^}audio_codec_t;$/;"	t	typeref:struct:Audio_Codec
audio_controller_operation	drivers\soundcard\fsl_soundcard.h	/^typedef struct audio_controller_operation$/;"	s
audio_controller_t	drivers\soundcard\fsl_soundcard.h	/^} audio_controller_t;$/;"	t	typeref:struct:Audio_Controller
audio_ctrl_operation_t	drivers\soundcard\fsl_soundcard.h	/^} audio_ctrl_operation_t;$/;"	t	typeref:struct:audio_controller_operation
audio_data_format_t	drivers\soundcard\fsl_soundcard.h	/^} audio_data_format_t;$/;"	t	typeref:struct:PCM_Audio_Format
audio_status_t	drivers\soundcard\fsl_soundcard.h	/^} audio_status_t;$/;"	t	typeref:struct:Audio_Status
bclk_source	drivers\soundcard\fsl_soundcard.h	/^    sai_bclk_source_t	bclk_source;\/*!< Bit clock from master clock or other modules. *\/$/;"	m	struct:I2S_config
bits	drivers\soundcard\fsl_soundcard.h	/^    uint8_t  bits;\/*!< How many bits in a word, it can be 8, 10, 16, 24,32 *\/$/;"	m	struct:PCM_Audio_Format
bus_type	drivers\soundcard\fsl_soundcard.h	/^    sai_bus_t			bus_type;\/*!< I2S left, I2S right or I2S type. *\/$/;"	m	struct:I2S_config
channel	drivers\soundcard\fsl_soundcard.h	/^    uint8_t			channel;\/*!< Which FIFO used to transfer. *\/$/;"	m	struct:I2S_config
codec	drivers\soundcard\fsl_soundcard.h	/^    audio_codec_t *codec;\/*!< Codec. *\/$/;"	m	struct:Soundcard
codec_config	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*codec_config)(void *param, void *config);$/;"	m	struct:audio_codec_operation
codec_config_data_format	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*codec_config_data_format)(void *param, audio_data_format_t *format);$/;"	m	struct:audio_codec_operation
codec_deinit	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*codec_deinit)(void *param);$/;"	m	struct:audio_codec_operation
codec_init	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*codec_init)(void *param);$/;"	m	struct:audio_codec_operation
config	drivers\soundcard\fsl_soundcard.h	/^    void *config;\/*!< The configuration inforamtion for codec device. *\/$/;"	m	struct:Audio_Codec
config	drivers\soundcard\fsl_soundcard.h	/^    void* config; \/*!< Audio device config structure including tx and rx configure *\/$/;"	m	struct:Audio_Controller
controller	drivers\soundcard\fsl_soundcard.h	/^    audio_controller_t *controller;\/*!< Controller. *\/ $/;"	m	struct:Soundcard
count	drivers\soundcard\fsl_soundcard.h	/^    uint32_t			count; \/*!< Used to count the transferred data number. *\/$/;"	m	struct:I2S_config
ctrl_clear_rx_status	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_clear_rx_status)(void *param);$/;"	m	struct:audio_controller_operation
ctrl_clear_tx_status	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_clear_tx_status)(void *param);$/;"	m	struct:audio_controller_operation
ctrl_config	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*ctrl_config)(void *param, void *config, bool direction);\/*!< Configure the basic bus information. *\/$/;"	m	struct:audio_controller_operation
ctrl_config_data_format	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*ctrl_config_data_format)(void *param, audio_data_format_t *format, bool direction);\/*!< Configure audio data format. *\/$/;"	m	struct:audio_controller_operation
ctrl_deinit	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*ctrl_deinit)(void *param);\/*!< Deinit the controller. *\/$/;"	m	struct:audio_controller_operation
ctrl_init	drivers\soundcard\fsl_soundcard.h	/^    snd_status_t (*ctrl_init)(void *param, audio_status_t *w_status, audio_status_t *r_status);\/*!< Initialize the controller. *\/$/;"	m	struct:audio_controller_operation
ctrl_rx_callback	drivers\soundcard\fsl_soundcard.h	/^    void(*ctrl_rx_callback)(void *param);$/;"	m	struct:audio_controller_operation
ctrl_rx_callback	drivers\soundcard\fsl_soundcard.h	/^    void(*ctrl_rx_callback)(void *param, dma_channel_status_t status);$/;"	m	struct:audio_controller_operation
ctrl_start_read	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_start_read)(void *param);\/*!< Used in start receive or resume receive *\/$/;"	m	struct:audio_controller_operation
ctrl_start_write	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_start_write)(void *param);\/*!< Used in strat transfer or resume transfer*\/$/;"	m	struct:audio_controller_operation
ctrl_stop_read	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_stop_read)(void *param);\/*!< Used in stop receive *\/$/;"	m	struct:audio_controller_operation
ctrl_stop_write	drivers\soundcard\fsl_soundcard.h	/^    void (*ctrl_stop_write)(void *param);\/*!< Used in stop transfer *\/$/;"	m	struct:audio_controller_operation
ctrl_tx_callback	drivers\soundcard\fsl_soundcard.h	/^    void(*ctrl_tx_callback)(void *param);$/;"	m	struct:audio_controller_operation
ctrl_tx_callback	drivers\soundcard\fsl_soundcard.h	/^    void(*ctrl_tx_callback)(void *param, dma_channel_status_t status);$/;"	m	struct:audio_controller_operation
dma_channel	drivers\soundcard\fsl_soundcard.h	/^    edma_channel_t		 dma_channel;\/*!< Which dma channel it uses *\/$/;"	m	struct:I2S_config
dma_source	drivers\soundcard\fsl_soundcard.h	/^    dma_request_source_t dma_source; \/*!< Dma request source. *\/$/;"	m	struct:I2S_config
empty_block	drivers\soundcard\fsl_soundcard.h	/^    uint32_t empty_block; \/*!< How many blocks are empty *\/$/;"	m	struct:Audio_Status
format	drivers\soundcard\fsl_soundcard.h	/^    audio_data_format_t format; \/*!< The transferring audio data format. *\/$/;"	m	struct:I2S_config
full_block	drivers\soundcard\fsl_soundcard.h	/^    uint32_t full_block; \/*!< How many blocks are full *\/$/;"	m	struct:Audio_Status
i2s_config_t	drivers\soundcard\fsl_soundcard.h	/^}  i2s_config_t;$/;"	t	typeref:struct:I2S_config
i2s_device_config_t	drivers\soundcard\fsl_soundcard.h	/^}  i2s_device_config_t;$/;"	t	typeref:struct:I2S_device_config
input_address	drivers\soundcard\fsl_soundcard.h	/^    uint8_t *input_address; \/*!< The input address *\/$/;"	m	struct:Audio_Status
instance	drivers\soundcard\fsl_soundcard.h	/^    uint8_t instance;\/*!< Codec instance *\/$/;"	m	struct:Audio_Codec
instance	drivers\soundcard\fsl_soundcard.h	/^    uint8_t instance;\/*!< Controller instance *\/$/;"	m	struct:Audio_Controller
isrun	drivers\soundcard\fsl_soundcard.h	/^    bool isrun;$/;"	m	struct:Soundcard
kStatus_SND_DmaFail	drivers\soundcard\fsl_soundcard.h	/^    kStatus_SND_DmaFail = 1,$/;"	e	enum:_snd_status
kStatus_SND_Fail	drivers\soundcard\fsl_soundcard.h	/^    kStatus_SND_Fail = 2$/;"	e	enum:_snd_status
kStatus_SND_Success	drivers\soundcard\fsl_soundcard.h	/^    kStatus_SND_Success = 0,$/;"	e	enum:_snd_status
mclk	drivers\soundcard\fsl_soundcard.h	/^    uint32_t			mclk;\/*!< Mater clock frequency. *\/$/;"	m	struct:I2S_device_config
mclk	drivers\soundcard\fsl_soundcard.h	/^    uint32_t mclk;\/*!< Master clock frequency *\/$/;"	m	struct:PCM_Audio_Format
mclk_divide_enable	drivers\soundcard\fsl_soundcard.h	/^    bool				mclk_divide_enable;\/*!< Enable the divide of master clock to generate bit clock. *\/$/;"	m	struct:I2S_device_config
mclk_source	drivers\soundcard\fsl_soundcard.h	/^    sai_mclk_source_t	mclk_source;\/*!< Master clock source. *\/$/;"	m	struct:I2S_device_config
name	drivers\soundcard\fsl_soundcard.h	/^    uint8_t *name;\/*!< Soundcard name. *\/$/;"	m	struct:Soundcard
name	drivers\soundcard\fsl_soundcard.h	/^    uint8_t* name;\/*!< Name of controller *\/$/;"	m	struct:Audio_Controller
ops	drivers\soundcard\fsl_soundcard.h	/^    audio_codec_operation_t *ops;\/*!< operations. *\/$/;"	m	struct:Audio_Codec
ops	drivers\soundcard\fsl_soundcard.h	/^    audio_ctrl_operation_t *ops;\/*!< Operations including the initialize, configure etc*\/$/;"	m	struct:Audio_Controller
output_address	drivers\soundcard\fsl_soundcard.h	/^    uint8_t *output_address; \/*!< The output address *\/$/;"	m	struct:Audio_Status
rx_config	drivers\soundcard\fsl_soundcard.h	/^    i2s_config_t *rx_config;\/*!< Rx configuration info. *\/    $/;"	m	struct:I2S_device_config
sample_rate	drivers\soundcard\fsl_soundcard.h	/^    uint32_t sample_rate;\/*!< Sample rate of the PCM file *\/$/;"	m	struct:PCM_Audio_Format
sem	drivers\soundcard\fsl_soundcard.h	/^    sync_object_t sem; \/*!< The sems tells application when to copy data *\/$/;"	m	struct:Audio_Status
size	drivers\soundcard\fsl_soundcard.h	/^    uint32_t size; \/*!< The size of a block *\/$/;"	m	struct:Audio_Status
slave_master	drivers\soundcard\fsl_soundcard.h	/^    sai_master_slave_t	slave_master;\/*!< Mater or slave. *\/$/;"	m	struct:I2S_config
snd_rx_dma_callback	drivers\soundcard\fsl_soundcard.h	/^static inline void snd_rx_dma_callback(void *param, dma_channel_status_t status)$/;"	f
snd_start_rx	drivers\soundcard\fsl_soundcard.h	/^ static inline void snd_start_rx(sound_card_t *card)$/;"	f
snd_start_tx	drivers\soundcard\fsl_soundcard.h	/^static inline void snd_start_tx(sound_card_t *card)$/;"	f
snd_status_t	drivers\soundcard\fsl_soundcard.h	/^} snd_status_t;$/;"	t	typeref:enum:_snd_status
snd_stop_rx	drivers\soundcard\fsl_soundcard.h	/^static inline void snd_stop_rx(sound_card_t *card)$/;"	f
snd_stop_tx	drivers\soundcard\fsl_soundcard.h	/^static inline void snd_stop_tx(sound_card_t *card)$/;"	f
snd_tx_dma_callback	drivers\soundcard\fsl_soundcard.h	/^static inline void snd_tx_dma_callback(void *param, dma_channel_status_t status)$/;"	f
sound_card_t	drivers\soundcard\fsl_soundcard.h	/^} sound_card_t;$/;"	t	typeref:struct:Soundcard
stcd	drivers\soundcard\fsl_soundcard.h	/^    edma_software_tcd_t  stcd[5];    \/*!< Temporily assign 4 tcds for configuration. *\/$/;"	m	struct:I2S_config
sync_mode	drivers\soundcard\fsl_soundcard.h	/^    sai_sync_mode_t	sync_mode;\/*!< sychronous or asychronous. *\/$/;"	m	struct:I2S_config
tx_config	drivers\soundcard\fsl_soundcard.h	/^    i2s_config_t *tx_config;\/*!< Tx configuration info. *\/$/;"	m	struct:I2S_device_config
watermark	drivers\soundcard\fsl_soundcard.h	/^    uint8_t			watermark;\/*!< Watermark to trigger a dma request or interrupt request. *\/$/;"	m	struct:I2S_config
words	drivers\soundcard\fsl_soundcard.h	/^    uint8_t  words;\/*!< How many word in a frame *\/$/;"	m	struct:PCM_Audio_Format
Audio_Buffer	drivers\soundcard\src\fsl_soundcard.c	/^typedef struct Audio_Buffer{$/;"	s	file:
audio_buffer_t	drivers\soundcard\src\fsl_soundcard.c	/^}audio_buffer_t;$/;"	t	typeref:struct:Audio_Buffer	file:
blocks	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t	blocks;\/* Block number of the buffer. *\/$/;"	m	struct:Audio_Buffer	file:
buff	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t	*buff;\/* Buffer address *\/$/;"	m	struct:Audio_Buffer	file:
buffer_error	drivers\soundcard\src\fsl_soundcard.c	/^    uint32_t buffer_error;$/;"	m	struct:Audio_Buffer	file:
fifo_error	drivers\soundcard\src\fsl_soundcard.c	/^    uint32_t fifo_error;$/;"	m	struct:Audio_Buffer	file:
first_io	drivers\soundcard\src\fsl_soundcard.c	/^    bool first_io;\/* Means the first time the transfer *\/$/;"	m	struct:Audio_Buffer	file:
input_curbuff	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t*	input_curbuff;$/;"	m	struct:Audio_Buffer	file:
input_index	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t	input_index;$/;"	m	struct:Audio_Buffer	file:
output_curbuff	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t*	output_curbuff;$/;"	m	struct:Audio_Buffer	file:
output_index	drivers\soundcard\src\fsl_soundcard.c	/^    uint8_t	output_index;$/;"	m	struct:Audio_Buffer	file:
processed	drivers\soundcard\src\fsl_soundcard.c	/^    uint32_t	processed;\/* Data which is have been put into FIFO, $/;"	m	struct:Audio_Buffer	file:
queued	drivers\soundcard\src\fsl_soundcard.c	/^    uint32_t	queued;\/* Data which is in buffer, but not processed *\/$/;"	m	struct:Audio_Buffer	file:
requested	drivers\soundcard\src\fsl_soundcard.c	/^    uint32_t	requested;\/* The request data number to transfer *\/$/;"	m	struct:Audio_Buffer	file:
rx_buffer	drivers\soundcard\src\fsl_soundcard.c	/^static audio_buffer_t *rx_buffer;$/;"	v	file:
size	drivers\soundcard\src\fsl_soundcard.c	/^    uint16_t	size;\/* The size of a block *\/$/;"	m	struct:Audio_Buffer	file:
snd_configure	drivers\soundcard\src\fsl_soundcard.c	/^snd_status_t snd_configure(sound_card_t *card, void *ctrl_config, void *codec_config, bool direction)$/;"	f
snd_data_format_configure	drivers\soundcard\src\fsl_soundcard.c	/^snd_status_t snd_data_format_configure(sound_card_t *card, audio_data_format_t *format, bool direction)$/;"	f
snd_deinit	drivers\soundcard\src\fsl_soundcard.c	/^snd_status_t snd_deinit(sound_card_t *card)$/;"	f
snd_get_status	drivers\soundcard\src\fsl_soundcard.c	/^ void snd_get_status(audio_status_t *status, bool direction)$/;"	f
snd_init	drivers\soundcard\src\fsl_soundcard.c	/^snd_status_t snd_init(sound_card_t * card)$/;"	f
snd_init_buffer	drivers\soundcard\src\fsl_soundcard.c	/^void snd_init_buffer(void)$/;"	f
snd_rx_callback	drivers\soundcard\src\fsl_soundcard.c	/^void snd_rx_callback(void *param)$/;"	f
snd_tx_callback	drivers\soundcard\src\fsl_soundcard.c	/^void snd_tx_callback(void *param)$/;"	f
snd_update_rx_status	drivers\soundcard\src\fsl_soundcard.c	/^uint32_t snd_update_rx_status(sound_card_t *card,  uint32_t len)$/;"	f
snd_update_tx_status	drivers\soundcard\src\fsl_soundcard.c	/^uint32_t snd_update_tx_status(sound_card_t * card, uint32_t len)$/;"	f
snd_wait_event	drivers\soundcard\src\fsl_soundcard.c	/^void snd_wait_event(bool direction)$/;"	f
status	drivers\soundcard\src\fsl_soundcard.c	/^    audio_status_t status;$/;"	m	struct:Audio_Buffer	file:
tx_buffer	drivers\soundcard\src\fsl_soundcard.c	/^static audio_buffer_t *tx_buffer;$/;"	v	file:
UartState	drivers\uart\fsl_uart_driver.h	/^typedef struct UartState {$/;"	s
UartUserConfig	drivers\uart\fsl_uart_driver.h	/^typedef struct UartUserConfig {$/;"	s
__FSL_UART_DRIVER_H__	drivers\uart\fsl_uart_driver.h	32;"	d
baudRate	drivers\uart\fsl_uart_driver.h	/^    uint32_t baudRate;            \/*!< UART baud rate*\/$/;"	m	struct:UartUserConfig
bitCountPerChar	drivers\uart\fsl_uart_driver.h	/^    uart_bit_count_per_char_t bitCountPerChar; \/*!< number of bits, 8-bit (default) or 9-bit in$/;"	m	struct:UartUserConfig
instance	drivers\uart\fsl_uart_driver.h	/^    uint32_t instance;                  \/*!< UART module instance number. *\/$/;"	m	struct:UartState
isReceiveAsync	drivers\uart\fsl_uart_driver.h	/^    bool isReceiveAsync;                \/*!< Whether the receive is asynchronous or not. *\/$/;"	m	struct:UartState
isReceiveInProgress	drivers\uart\fsl_uart_driver.h	/^    bool isReceiveInProgress;           \/*!< True if there is an active receive. *\/$/;"	m	struct:UartState
isTransmitAsync	drivers\uart\fsl_uart_driver.h	/^    bool isTransmitAsync;               \/*!< Whether the transmit is asynchronous or not. *\/$/;"	m	struct:UartState
isTransmitInProgress	drivers\uart\fsl_uart_driver.h	/^    bool isTransmitInProgress;          \/*!< True if there is an active transmit. *\/$/;"	m	struct:UartState
parityMode	drivers\uart\fsl_uart_driver.h	/^    uart_parity_mode_t parityMode;     \/*!< parity mode, disabled (default), even, odd *\/$/;"	m	struct:UartUserConfig
receiveBuffer	drivers\uart\fsl_uart_driver.h	/^    uint8_t * receiveBuffer;            \/*!< The buffer of received data. *\/$/;"	m	struct:UartState
receivedByteCount	drivers\uart\fsl_uart_driver.h	/^    size_t receivedByteCount;           \/*!< Number of bytes received so far. *\/$/;"	m	struct:UartState
remainingReceiveByteCount	drivers\uart\fsl_uart_driver.h	/^    size_t remainingReceiveByteCount;   \/*!< The remaining number of bytes to be received. *\/$/;"	m	struct:UartState
remainingSendByteCount	drivers\uart\fsl_uart_driver.h	/^    size_t remainingSendByteCount;      \/*!< The remaining number of bytes to be transmitted. *\/$/;"	m	struct:UartState
rxIrqSync	drivers\uart\fsl_uart_driver.h	/^    sync_object_t rxIrqSync;            \/*!< Used to wait for ISR to complete its RX business. *\/$/;"	m	struct:UartState
sendBuffer	drivers\uart\fsl_uart_driver.h	/^    const uint8_t * sendBuffer;         \/*!< The buffer of data being sent.*\/$/;"	m	struct:UartState
stopBitCount	drivers\uart\fsl_uart_driver.h	/^    uart_stop_bit_count_t stopBitCount; \/*!< number of stop bits, 1 stop bit (default)$/;"	m	struct:UartUserConfig
transmittedByteCount	drivers\uart\fsl_uart_driver.h	/^    size_t transmittedByteCount;        \/*!< Number of bytes transmitted so far. *\/$/;"	m	struct:UartState
txFifoEntryCount	drivers\uart\fsl_uart_driver.h	/^    uint8_t txFifoEntryCount;           \/*!< Number of data word entries in TX FIFO. *\/$/;"	m	struct:UartState
txIrqSync	drivers\uart\fsl_uart_driver.h	/^    sync_object_t txIrqSync;            \/*!< Used to wait for ISR to complete its TX business. *\/$/;"	m	struct:UartState
uart_state_t	drivers\uart\fsl_uart_driver.h	/^} uart_state_t;$/;"	t	typeref:struct:UartState
uart_user_config_t	drivers\uart\fsl_uart_driver.h	/^} uart_user_config_t;$/;"	t	typeref:struct:UartUserConfig
uart_abort_receiving_data	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_abort_receiving_data(uart_state_t * uartState)$/;"	f
uart_abort_sending_data	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_abort_sending_data(uart_state_t * uartState)$/;"	f
uart_complete_receive_data	drivers\uart\src\fsl_uart_driver.c	/^static void uart_complete_receive_data(uart_state_t * uartState)$/;"	f	file:
uart_complete_send_data	drivers\uart\src\fsl_uart_driver.c	/^static void uart_complete_send_data(uart_state_t * uartState)$/;"	f	file:
uart_get_receive_status	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_get_receive_status(uart_state_t * uartState, uint32_t * bytesReceived)$/;"	f
uart_get_transmit_status	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_get_transmit_status(uart_state_t * uartState, uint32_t * bytesTransmitted)$/;"	f
uart_init	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_init(uint32_t uartInstance, const uart_user_config_t * uartUserConfig,$/;"	f
uart_irq_handler	drivers\uart\src\fsl_uart_driver.c	/^void uart_irq_handler(uart_state_t * uartStateIrq)$/;"	f
uart_receive_data	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_receive_data(uart_state_t * uartState, uint8_t * rxBuffer,$/;"	f
uart_receive_data_async	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_receive_data_async(uart_state_t * uartState, uint8_t * rxBuffer,$/;"	f
uart_send_data	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_send_data(uart_state_t * uartState, uint8_t * sendBuffer, uint32_t txByteCount,$/;"	f
uart_send_data_async	drivers\uart\src\fsl_uart_driver.c	/^uart_status_t uart_send_data_async(uart_state_t * uartState, uint8_t * sendBuffer,$/;"	f
uart_shutdown	drivers\uart\src\fsl_uart_driver.c	/^void uart_shutdown(uart_state_t * uartState)$/;"	f
uart_start_receive_data	drivers\uart\src\fsl_uart_driver.c	/^static uart_status_t uart_start_receive_data(uart_state_t * uartState, uint8_t * rxBuffer,$/;"	f	file:
uart_start_send_data	drivers\uart\src\fsl_uart_driver.c	/^ static uart_status_t uart_start_send_data(uart_state_t * uartState, uint8_t * sendBuffer,$/;"	f	file:
UART0_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART0_IRQHandler(void)$/;"	f
UART0_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART0_RX_TX_IRQHandler(void)$/;"	f
UART1_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART1_IRQHandler(void)$/;"	f
UART1_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART1_RX_TX_IRQHandler(void)$/;"	f
UART2_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART2_IRQHandler(void)$/;"	f
UART2_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART2_RX_TX_IRQHandler(void)$/;"	f
UART3_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART3_RX_TX_IRQHandler(void)$/;"	f
UART4_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART4_RX_TX_IRQHandler(void)$/;"	f
UART5_RX_TX_IRQHandler	drivers\uart\src\fsl_uart_irq.c	/^void UART5_RX_TX_IRQHandler(void)$/;"	f
g_uartIrqConfig	drivers\uart\src\fsl_uart_irq.c	/^uart_irq_config_t g_uartIrqConfig[UART_INSTANCE_COUNT];$/;"	v
uart_handle_irq	drivers\uart\src\fsl_uart_irq.c	/^static void uart_handle_irq(uint32_t instance)$/;"	f	file:
uart_irq_ids	drivers\uart\src\fsl_uart_irq.c	/^IRQn_Type uart_irq_ids[UART_INSTANCE_COUNT] = {UART0_IRQn, UART1_IRQn, UART2_IRQn};$/;"	v
uart_irq_ids	drivers\uart\src\fsl_uart_irq.c	/^IRQn_Type uart_irq_ids[UART_INSTANCE_COUNT] =$/;"	v
UARTIrqConfig	drivers\uart\src\fsl_uart_irq.h	/^typedef struct UARTIrqConfig {$/;"	s
UART_IRQ_PRIORITY	drivers\uart\src\fsl_uart_irq.h	48;"	d
__FSL_UART_IRQ_H__	drivers\uart\src\fsl_uart_irq.h	31;"	d
uartStateIrq	drivers\uart\src\fsl_uart_irq.h	/^    uart_state_t  * uartStateIrq; \/*!< Pointer to UART driver state information. *\/$/;"	m	struct:UARTIrqConfig
uart_irq_config_t	drivers\uart\src\fsl_uart_irq.h	/^} uart_irq_config_t;$/;"	t	typeref:struct:UARTIrqConfig
uart_irq_handler	drivers\uart\src\fsl_uart_irq.h	81;"	d
uart_set_irq_state	drivers\uart\src\fsl_uart_irq.h	/^static inline void uart_set_irq_state(uint32_t instance, void * uartDriverState)$/;"	f
__FSL_WDOG_DRIVER_H__	drivers\wdog\fsl_wdog_driver.h	31;"	d
clockPrescaler	drivers\wdog\fsl_wdog_driver.h	/^    wdog_clock_prescaler_t clockPrescaler; \/*!< Clock prescaler*\/$/;"	m	struct:wdogInit
clockSource	drivers\wdog\fsl_wdog_driver.h	/^    wdog_clock_source_t clockSource; \/*!< Clock source select*\/$/;"	m	struct:wdogInit
cpuDebugModeEnable	drivers\wdog\fsl_wdog_driver.h	/^    bool cpuDebugModeEnable; \/*!< Enable watchdog ini cpu debug mode*\/$/;"	m	struct:wdogInit
cpuStopModeEnable	drivers\wdog\fsl_wdog_driver.h	/^    bool cpuStopModeEnable; \/*!< Enable watchdog ini cpu stop mode*\/$/;"	m	struct:wdogInit
cpuWaitModeEnable	drivers\wdog\fsl_wdog_driver.h	/^    bool cpuWaitModeEnable; \/*!< Enable watchdog ini cpu wait mode*\/$/;"	m	struct:wdogInit
timeOutValue	drivers\wdog\fsl_wdog_driver.h	/^    uint32_t timeOutValue; \/*!< Timeout value*\/$/;"	m	struct:wdogInit
updateRegisterEnable	drivers\wdog\fsl_wdog_driver.h	/^    bool updateRegisterEnable; \/*!< Update write-once register enable*\/$/;"	m	struct:wdogInit
wdogCallbackFunc	drivers\wdog\fsl_wdog_driver.h	/^    wdog_isr_callback_t wdogCallbackFunc; \/*!< Isr callback function. must in 256 bus cycles.*\/$/;"	m	struct:wdogInit
wdogInit	drivers\wdog\fsl_wdog_driver.h	/^typedef struct wdogInit {$/;"	s
wdog_init_t	drivers\wdog\fsl_wdog_driver.h	/^} wdog_init_t;$/;"	t	typeref:struct:wdogInit
windowValue	drivers\wdog\fsl_wdog_driver.h	/^    uint32_t windowValue; \/*!< Window value*\/$/;"	m	struct:wdogInit
wdog_clear_reset_count	drivers\wdog\src\fsl_wdog_driver.c	/^void wdog_clear_reset_count(void)$/;"	f
wdog_get_reset_count	drivers\wdog\src\fsl_wdog_driver.c	/^uint32_t wdog_get_reset_count(void)$/;"	f
wdog_init	drivers\wdog\src\fsl_wdog_driver.c	/^void wdog_init(wdog_init_t* init_ptr)$/;"	f
wdog_is_running	drivers\wdog\src\fsl_wdog_driver.c	/^bool wdog_is_running(void)$/;"	f
wdog_refresh	drivers\wdog\src\fsl_wdog_driver.c	/^void wdog_refresh(void)$/;"	f
wdog_reset_chip	drivers\wdog\src\fsl_wdog_driver.c	/^void wdog_reset_chip(void)$/;"	f
wdog_shutdown	drivers\wdog\src\fsl_wdog_driver.c	/^void wdog_shutdown(void)$/;"	f
wdog_unlock	drivers\wdog\src\fsl_wdog_driver.c	/^static void wdog_unlock(void)$/;"	f	file:
wdog_irq_ids	drivers\wdog\src\fsl_wdog_irq.c	/^IRQn_Type wdog_irq_ids[HW_WDOG_INSTANCE_COUNT] = {Watchdog_IRQn};$/;"	v
FSL_FEATURE_ADC_HAS_PGA	hal\adc\fsl_adc_features.h	38;"	d
FSL_FEATURE_ADC_HAS_PGA	hal\adc\fsl_adc_features.h	41;"	d
FSL_FEATURE_ADC_HAS_PGA	hal\adc\fsl_adc_features.h	45;"	d
FSL_FEATURE_ADC_HAS_PGA	hal\adc\fsl_adc_features.h	48;"	d
__FSL_ADC_FEATURES_H__	hal\adc\fsl_adc_features.h	32;"	d
adc_hal_get_calibration_MG	hal\adc\fsl_adc_hal.c	/^uint32_t adc_hal_get_calibration_MG(uint32_t instance)$/;"	f
adc_hal_get_calibration_PG	hal\adc\fsl_adc_hal.c	/^uint32_t adc_hal_get_calibration_PG(uint32_t instance)$/;"	f
adc_hal_start_calibration	hal\adc\fsl_adc_hal.c	/^adc_status_t adc_hal_start_calibration(uint32_t instance)$/;"	f
__FSL_ADC_HAL_H__	hal\adc\fsl_adc_hal.h	32;"	d
_adc_channel_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_channel_mode$/;"	g
_adc_clock_divider_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_clock_divider_mode$/;"	g
_adc_clock_source_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_clock_source_mode$/;"	g
_adc_group_mux_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_group_mux_mode$/;"	g
_adc_hw_average_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_hw_average_mode$/;"	g
_adc_long_sample_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_long_sample_mode$/;"	g
_adc_pga_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_pga_mode$/;"	g
_adc_reference_voltage_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_reference_voltage_mode$/;"	g
_adc_resolution_mode	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_resolution_mode$/;"	g
_adc_status	hal\adc\fsl_adc_hal.h	/^typedef enum _adc_status$/;"	g
adc_channel_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_channel_mode_t;$/;"	t	typeref:enum:_adc_channel_mode
adc_clock_divider_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_clock_divider_mode_t;$/;"	t	typeref:enum:_adc_clock_divider_mode
adc_clock_source_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_clock_source_mode_t;$/;"	t	typeref:enum:_adc_clock_source_mode
adc_group_mux_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_group_mux_mode_t;$/;"	t	typeref:enum:_adc_group_mux_mode
adc_hal_configure_asynchronous_clock	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_asynchronous_clock(uint32_t instance, $/;"	f
adc_hal_configure_continuous_conversion	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_continuous_conversion(uint32_t instance,$/;"	f
adc_hal_configure_dma	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_dma(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_high_speed	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_high_speed(uint32_t instance, $/;"	f
adc_hal_configure_hw_average	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_hw_average(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_hw_compare	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_hw_compare(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_hw_compare_greater	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_hw_compare_greater(uint32_t instance, $/;"	f
adc_hal_configure_hw_compare_in_range	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_hw_compare_in_range(uint32_t instance, $/;"	f
adc_hal_configure_hw_trigger	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_hw_trigger(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_interrupt	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_interrupt(uint32_t instance, uint32_t group, $/;"	f
adc_hal_configure_long_sample	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_long_sample(uint32_t instance, $/;"	f
adc_hal_configure_low_power	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_low_power(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_pga	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_pga(uint32_t instance, bool isEnabled)$/;"	f
adc_hal_configure_pga_chopping	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_pga_chopping(uint32_t instance, $/;"	f
adc_hal_configure_pga_in_low_power	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_pga_in_low_power(uint32_t instance, $/;"	f
adc_hal_configure_pga_offset_measurement	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_configure_pga_offset_measurement(uint32_t instance, $/;"	f
adc_hal_disable	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_disable(uint32_t instance, uint32_t group)$/;"	f
adc_hal_enable	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_enable(uint32_t instance, uint32_t group, $/;"	f
adc_hal_end_calibration	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_end_calibration(uint32_t instance)$/;"	f
adc_hal_get_calibration_offset	hal\adc\fsl_adc_hal.h	/^static inline uint32_t adc_hal_get_calibration_offset(uint32_t instance)$/;"	f
adc_hal_get_conversion_value	hal\adc\fsl_adc_hal.h	/^static inline uint32_t adc_hal_get_conversion_value(uint32_t instance, $/;"	f
adc_hal_get_pga_gain_mode	hal\adc\fsl_adc_hal.h	/^static inline adc_pga_mode_t adc_hal_get_pga_gain_mode(uint32_t instance)$/;"	f
adc_hal_is_calibration_fail	hal\adc\fsl_adc_hal.h	/^static inline bool adc_hal_is_calibration_fail(uint32_t instance)$/;"	f
adc_hal_is_conversion_completed	hal\adc\fsl_adc_hal.h	/^static inline bool adc_hal_is_conversion_completed(uint32_t instance, uint32_t group)$/;"	f
adc_hal_is_in_process	hal\adc\fsl_adc_hal.h	/^static inline bool adc_hal_is_in_process(uint32_t instance)$/;"	f
adc_hal_set_calibration_MG	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_calibration_MG(uint32_t instance, uint32_t val)$/;"	f
adc_hal_set_calibration_PG	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_calibration_PG(uint32_t instance, uint32_t val)$/;"	f
adc_hal_set_calibration_offset	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_calibration_offset(uint32_t instance, $/;"	f
adc_hal_set_clock_divider_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_clock_divider_mode(uint32_t instance, $/;"	f
adc_hal_set_clock_source_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_clock_source_mode(uint32_t instance, $/;"	f
adc_hal_set_group_mux	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_group_mux(uint32_t instance, adc_group_mux_mode_t group)$/;"	f
adc_hal_set_hw_average_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_hw_average_mode(uint32_t instance, $/;"	f
adc_hal_set_hw_compare_value1	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_hw_compare_value1(uint32_t instance, uint32_t value)$/;"	f
adc_hal_set_hw_compare_value2	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_hw_compare_value2(uint32_t instance, uint32_t value)$/;"	f
adc_hal_set_long_sample_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_long_sample_mode(uint32_t instance, $/;"	f
adc_hal_set_pga_gain_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_pga_gain_mode(uint32_t instance, $/;"	f
adc_hal_set_reference_voltage_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_reference_voltage_mode(uint32_t instance, $/;"	f
adc_hal_set_resolution_mode	hal\adc\fsl_adc_hal.h	/^static inline void adc_hal_set_resolution_mode(uint32_t instance, $/;"	f
adc_hw_average_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_hw_average_mode_t;$/;"	t	typeref:enum:_adc_hw_average_mode
adc_long_sample_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_long_sample_mode_t;$/;"	t	typeref:enum:_adc_long_sample_mode
adc_pga_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_pga_mode_t;$/;"	t	typeref:enum:_adc_pga_mode
adc_reference_voltage_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_reference_voltage_mode_t;$/;"	t	typeref:enum:_adc_reference_voltage_mode
adc_resolution_mode_t	hal\adc\fsl_adc_hal.h	/^} adc_resolution_mode_t;$/;"	t	typeref:enum:_adc_resolution_mode
adc_status_t	hal\adc\fsl_adc_hal.h	/^} adc_status_t;$/;"	t	typeref:enum:_adc_status
kAdcChannel0	hal\adc\fsl_adc_hal.h	/^    kAdcChannel0  = 0U,    \/*!< ADC channel 0*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel10	hal\adc\fsl_adc_hal.h	/^    kAdcChannel10 = 10U,   \/*!< ADC channel 10*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel11	hal\adc\fsl_adc_hal.h	/^    kAdcChannel11 = 11U,   \/*!< ADC channel 11*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel12	hal\adc\fsl_adc_hal.h	/^    kAdcChannel12 = 12U,   \/*!< ADC channel 12*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel13	hal\adc\fsl_adc_hal.h	/^    kAdcChannel13 = 13U,   \/*!< ADC channel 13*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel14	hal\adc\fsl_adc_hal.h	/^    kAdcChannel14 = 14U,   \/*!< ADC channel 14*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel15	hal\adc\fsl_adc_hal.h	/^    kAdcChannel15 = 15U,   \/*!< ADC channel 15*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel16	hal\adc\fsl_adc_hal.h	/^    kAdcChannel16 = 16U,   \/*!< ADC channel 16*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel17	hal\adc\fsl_adc_hal.h	/^    kAdcChannel17 = 17U,   \/*!< ADC channel 17*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel18	hal\adc\fsl_adc_hal.h	/^    kAdcChannel18 = 18U,   \/*!< ADC channel 18*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel19	hal\adc\fsl_adc_hal.h	/^    kAdcChannel19 = 19U,   \/*!< ADC channel 19*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel2	hal\adc\fsl_adc_hal.h	/^    kAdcChannel2  = 2U,    \/*!< ADC channel 2*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel20	hal\adc\fsl_adc_hal.h	/^    kAdcChannel20 = 20U,   \/*!< ADC channel 20*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel21	hal\adc\fsl_adc_hal.h	/^    kAdcChannel21 = 21U,   \/*!< ADC channel 21*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel22	hal\adc\fsl_adc_hal.h	/^    kAdcChannel22 = 22U,   \/*!< ADC channel 22*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel23	hal\adc\fsl_adc_hal.h	/^    kAdcChannel23 = 23U,   \/*!< ADC channel 23*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel3	hal\adc\fsl_adc_hal.h	/^    kAdcChannel3  = 3U,    \/*!< ADC channel 3*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel4	hal\adc\fsl_adc_hal.h	/^    kAdcChannel4  = 4U,    \/*!< ADC channel 4*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel5	hal\adc\fsl_adc_hal.h	/^    kAdcChannel5  = 5U,    \/*!< ADC channel 5*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel6	hal\adc\fsl_adc_hal.h	/^    kAdcChannel6  = 6U,    \/*!< ADC channel 6*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel7	hal\adc\fsl_adc_hal.h	/^    kAdcChannel7  = 7U,    \/*!< ADC channel 7*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel8	hal\adc\fsl_adc_hal.h	/^    kAdcChannel8  = 8U,    \/*!< ADC channel 8*\/$/;"	e	enum:_adc_channel_mode
kAdcChannel9	hal\adc\fsl_adc_hal.h	/^    kAdcChannel9  = 9U,    \/*!< ADC channel 9*\/$/;"	e	enum:_adc_channel_mode
kAdcChannelBandgap	hal\adc\fsl_adc_hal.h	/^    kAdcChannelBandgap              = 27U,  \/*!< Internal band gap*\/$/;"	e	enum:_adc_channel_mode
kAdcChannelDisable	hal\adc\fsl_adc_hal.h	/^    kAdcChannelDisable              = 31U   \/*!< Disable the sample process*\/$/;"	e	enum:_adc_channel_mode
kAdcChannelMuxA	hal\adc\fsl_adc_hal.h	/^    kAdcChannelMuxA = 0U, \/*!< Mux A group is actived *\/$/;"	e	enum:_adc_group_mux_mode
kAdcChannelMuxB	hal\adc\fsl_adc_hal.h	/^    kAdcChannelMuxB = 1U, \/*!< Mux B group is actived *\/$/;"	e	enum:_adc_group_mux_mode
kAdcChannelReferenceVoltageHigh	hal\adc\fsl_adc_hal.h	/^    kAdcChannelReferenceVoltageHigh = 29U,  \/*!< Internal ref voltage High *\/$/;"	e	enum:_adc_channel_mode
kAdcChannelReferenceVoltageLow	hal\adc\fsl_adc_hal.h	/^    kAdcChannelReferenceVoltageLow  = 30U,  \/*!< Internal ref voltage L*\/$/;"	e	enum:_adc_channel_mode
kAdcChannelTemperature	hal\adc\fsl_adc_hal.h	/^    kAdcChannelTemperature          = 26U,  \/*!< Internal temperature sensor *\/$/;"	e	enum:_adc_channel_mode
kAdcChannell	hal\adc\fsl_adc_hal.h	/^    kAdcChannell  = 1U,    \/*!< ADC channel 1*\/$/;"	e	enum:_adc_channel_mode
kAdcClockDivider1	hal\adc\fsl_adc_hal.h	/^    kAdcClockDivider1 = 0U,   \/*!< Divide 1*\/$/;"	e	enum:_adc_clock_divider_mode
kAdcClockDivider2	hal\adc\fsl_adc_hal.h	/^    kAdcClockDivider2 = 1U,   \/*!< Divide 2*\/$/;"	e	enum:_adc_clock_divider_mode
kAdcClockDivider4	hal\adc\fsl_adc_hal.h	/^    kAdcClockDivider4 = 2U,   \/*!< Divide 4*\/$/;"	e	enum:_adc_clock_divider_mode
kAdcClockDivider8	hal\adc\fsl_adc_hal.h	/^    kAdcClockDivider8 = 3U,   \/*!< Divide 8*\/$/;"	e	enum:_adc_clock_divider_mode
kAdcClockSourceAlternate	hal\adc\fsl_adc_hal.h	/^    kAdcClockSourceAlternate     = 2U,  \/*!< Use the optional external clock*\/$/;"	e	enum:_adc_clock_source_mode
kAdcClockSourceAsynchrounous	hal\adc\fsl_adc_hal.h	/^    kAdcClockSourceAsynchrounous = 3U,  \/*!< Use ADC's internal asynchronous clock *\/$/;"	e	enum:_adc_clock_source_mode
kAdcClockSourceBusClk	hal\adc\fsl_adc_hal.h	/^    kAdcClockSourceBusClk        = 0U,  \/*!< Use bus clock*\/$/;"	e	enum:_adc_clock_source_mode
kAdcClockSourceBusClk2	hal\adc\fsl_adc_hal.h	/^    kAdcClockSourceBusClk2       = 1U,  \/*!< Use bus clock \/ 2*\/$/;"	e	enum:_adc_clock_source_mode
kAdcHwAverageCount16	hal\adc\fsl_adc_hal.h	/^    kAdcHwAverageCount16 = 2U, \/*!<  Average the result after accumlated 16 conversion*\/$/;"	e	enum:_adc_hw_average_mode
kAdcHwAverageCount32	hal\adc\fsl_adc_hal.h	/^    kAdcHwAverageCount32 = 3U, \/*!<  Average the result after accumlated 32 conversion*\/$/;"	e	enum:_adc_hw_average_mode
kAdcHwAverageCount4	hal\adc\fsl_adc_hal.h	/^    kAdcHwAverageCount4  = 0U, \/*!<  Average the result after accumlated  4 conversion*\/$/;"	e	enum:_adc_hw_average_mode
kAdcHwAverageCount8	hal\adc\fsl_adc_hal.h	/^    kAdcHwAverageCount8  = 1U, \/*!<  Average the result after accumlated  8 conversion*\/$/;"	e	enum:_adc_hw_average_mode
kAdcLongSampleExtra12	hal\adc\fsl_adc_hal.h	/^    kAdcLongSampleExtra12 = 1U,  \/*!< Extra 12 cycles*\/$/;"	e	enum:_adc_long_sample_mode
kAdcLongSampleExtra2	hal\adc\fsl_adc_hal.h	/^    kAdcLongSampleExtra2  = 3U,  \/*!< Extra  2 cycles*\/$/;"	e	enum:_adc_long_sample_mode
kAdcLongSampleExtra20	hal\adc\fsl_adc_hal.h	/^    kAdcLongSampleExtra20 = 0U,  \/*!< Extra 20 cycles, total 24 cycles, default*\/$/;"	e	enum:_adc_long_sample_mode
kAdcLongSampleExtra6	hal\adc\fsl_adc_hal.h	/^    kAdcLongSampleExtra6  = 2U,  \/*!< Extra  6 cycles*\/$/;"	e	enum:_adc_long_sample_mode
kAdcPga1	hal\adc\fsl_adc_hal.h	/^    kAdcPga1  = 0U, \/*!< Gain is 1*\/$/;"	e	enum:_adc_pga_mode
kAdcPga16	hal\adc\fsl_adc_hal.h	/^    kAdcPga16 = 4U, \/*!< Gain is 16*\/$/;"	e	enum:_adc_pga_mode
kAdcPga2	hal\adc\fsl_adc_hal.h	/^    kAdcPga2  = 1U, \/*!< Gain is 2*\/$/;"	e	enum:_adc_pga_mode
kAdcPga32	hal\adc\fsl_adc_hal.h	/^    kAdcPga32 = 5U, \/*!< Gain is 32*\/$/;"	e	enum:_adc_pga_mode
kAdcPga4	hal\adc\fsl_adc_hal.h	/^    kAdcPga4  = 2U, \/*!< Gain is 4*\/$/;"	e	enum:_adc_pga_mode
kAdcPga64	hal\adc\fsl_adc_hal.h	/^    kAdcPga64 = 6U  \/*!< Gain is 64*\/$/;"	e	enum:_adc_pga_mode
kAdcPga8	hal\adc\fsl_adc_hal.h	/^    kAdcPga8  = 3U, \/*!< Gain is 8*\/$/;"	e	enum:_adc_pga_mode
kAdcSingleDiff10or11	hal\adc\fsl_adc_hal.h	/^    kAdcSingleDiff10or11 = 2U, \/*!< 10-bits in single-end or 11-bits in differential*\/$/;"	e	enum:_adc_resolution_mode
kAdcSingleDiff12or13	hal\adc\fsl_adc_hal.h	/^    kAdcSingleDiff12or13 = 1U, \/*!< 12-bits in single-end or 13-bits in differential*\/$/;"	e	enum:_adc_resolution_mode
kAdcSingleDiff16	hal\adc\fsl_adc_hal.h	/^    kAdcSingleDiff16     = 3U, \/*!< 16-bits both in single-end and differential*\/$/;"	e	enum:_adc_resolution_mode
kAdcSingleDiff8or9	hal\adc\fsl_adc_hal.h	/^    kAdcSingleDiff8or9   = 0U, \/*!<  8-bits in single-end or  9-bits in differential*\/$/;"	e	enum:_adc_resolution_mode
kAdcVoltageValt	hal\adc\fsl_adc_hal.h	/^    kAdcVoltageValt = 1U,   \/*!< Use V_ALTH & V_REFL as ref source pin*\/$/;"	e	enum:_adc_reference_voltage_mode
kAdcVoltageVref	hal\adc\fsl_adc_hal.h	/^    kAdcVoltageVref = 0U,   \/*!< Use V_REFH & V_REFL as ref source pin*\/$/;"	e	enum:_adc_reference_voltage_mode
kStatus_ADC_Fail	hal\adc\fsl_adc_hal.h	/^    kStatus_ADC_Fail = 2U \/*!< Function operation is failed *\/$/;"	e	enum:_adc_status
kStatus_ADC_InvalidArgument	hal\adc\fsl_adc_hal.h	/^    kStatus_ADC_InvalidArgument = 1U,\/*!< Parameter is not available for current configuration *\/$/;"	e	enum:_adc_status
kStatus_ADC_Success	hal\adc\fsl_adc_hal.h	/^    kStatus_ADC_Success = 0U,$/;"	e	enum:_adc_status
FSL_FEATURE_CAN_HAS_DOZE_MODE_SUPPORT	hal\can\fsl_flexcan_features.h	113;"	d
FSL_FEATURE_CAN_HAS_DOZE_MODE_SUPPORT	hal\can\fsl_flexcan_features.h	132;"	d
FSL_FEATURE_CAN_HAS_DOZE_MODE_SUPPORT	hal\can\fsl_flexcan_features.h	50;"	d
FSL_FEATURE_CAN_HAS_DOZE_MODE_SUPPORT	hal\can\fsl_flexcan_features.h	87;"	d
FSL_FEATURE_CAN_HAS_EXTENDED_FLAG_REGISTER	hal\can\fsl_flexcan_features.h	117;"	d
FSL_FEATURE_CAN_HAS_EXTENDED_FLAG_REGISTER	hal\can\fsl_flexcan_features.h	136;"	d
FSL_FEATURE_CAN_HAS_EXTENDED_FLAG_REGISTER	hal\can\fsl_flexcan_features.h	54;"	d
FSL_FEATURE_CAN_HAS_EXTENDED_FLAG_REGISTER	hal\can\fsl_flexcan_features.h	91;"	d
FSL_FEATURE_CAN_HAS_GLITCH_FILTER	hal\can\fsl_flexcan_features.h	115;"	d
FSL_FEATURE_CAN_HAS_GLITCH_FILTER	hal\can\fsl_flexcan_features.h	134;"	d
FSL_FEATURE_CAN_HAS_GLITCH_FILTER	hal\can\fsl_flexcan_features.h	52;"	d
FSL_FEATURE_CAN_HAS_GLITCH_FILTER	hal\can\fsl_flexcan_features.h	89;"	d
FSL_FEATURE_CAN_HAS_MESSAGE_BUFFER_MAX_NUMBER	hal\can\fsl_flexcan_features.h	111;"	d
FSL_FEATURE_CAN_HAS_MESSAGE_BUFFER_MAX_NUMBER	hal\can\fsl_flexcan_features.h	130;"	d
FSL_FEATURE_CAN_HAS_MESSAGE_BUFFER_MAX_NUMBER	hal\can\fsl_flexcan_features.h	48;"	d
FSL_FEATURE_CAN_HAS_MESSAGE_BUFFER_MAX_NUMBER	hal\can\fsl_flexcan_features.h	85;"	d
FSL_FEATURE_CAN_HAS_SEPARATE_BUFFER_0_FLAG	hal\can\fsl_flexcan_features.h	119;"	d
FSL_FEATURE_CAN_HAS_SEPARATE_BUFFER_0_FLAG	hal\can\fsl_flexcan_features.h	138;"	d
FSL_FEATURE_CAN_HAS_SEPARATE_BUFFER_0_FLAG	hal\can\fsl_flexcan_features.h	56;"	d
FSL_FEATURE_CAN_HAS_SEPARATE_BUFFER_0_FLAG	hal\can\fsl_flexcan_features.h	93;"	d
FSL_FEATURE_CAN_INTERRUPT_COUNT	hal\can\fsl_flexcan_features.h	121;"	d
FSL_FEATURE_CAN_INTERRUPT_COUNT	hal\can\fsl_flexcan_features.h	140;"	d
FSL_FEATURE_CAN_INTERRUPT_COUNT	hal\can\fsl_flexcan_features.h	58;"	d
FSL_FEATURE_CAN_INTERRUPT_COUNT	hal\can\fsl_flexcan_features.h	95;"	d
__FSL_CAN_FEATURES_H__	hal\can\fsl_flexcan_features.h	31;"	d
FLEXCAN_ALL_INT	hal\can\fsl_flexcan_hal.c	66;"	d	file:
FLEXCAN_BYTE_DATA_FIELD_MASK	hal\can\fsl_flexcan_hal.c	68;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK	hal\can\fsl_flexcan_hal.c	36;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT	hal\can\fsl_flexcan_hal.c	38;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_MASK	hal\can\fsl_flexcan_hal.c	40;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT	hal\can\fsl_flexcan_hal.c	42;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK	hal\can\fsl_flexcan_hal.c	44;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1	hal\can\fsl_flexcan_hal.c	46;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2	hal\can\fsl_flexcan_hal.c	48;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_MASK	hal\can\fsl_flexcan_hal.c	50;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1	hal\can\fsl_flexcan_hal.c	52;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2	hal\can\fsl_flexcan_hal.c	54;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK	hal\can\fsl_flexcan_hal.c	56;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT1	hal\can\fsl_flexcan_hal.c	58;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT2	hal\can\fsl_flexcan_hal.c	60;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT3	hal\can\fsl_flexcan_hal.c	62;"	d	file:
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT4	hal\can\fsl_flexcan_hal.c	64;"	d	file:
flexcan_hal_clear_err_interrupt_status	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_clear_err_interrupt_status(uint8_t instance)$/;"	f
flexcan_hal_disable	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_disable(uint8_t instance)$/;"	f
flexcan_hal_disable_error_interrupt	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_disable_error_interrupt(uint8_t instance)$/;"	f
flexcan_hal_disable_mb_interrupt	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_disable_mb_interrupt($/;"	f
flexcan_hal_disable_operation_mode	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_disable_operation_mode($/;"	f
flexcan_hal_disable_rx_fifo	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_disable_rx_fifo(uint8_t instance)$/;"	f
flexcan_hal_enable	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_enable(uint8_t instance)$/;"	f
flexcan_hal_enable_error_interrupt	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_enable_error_interrupt(uint8_t instance)$/;"	f
flexcan_hal_enable_mb_interrupt	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_enable_mb_interrupt($/;"	f
flexcan_hal_enable_operation_mode	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_enable_operation_mode($/;"	f
flexcan_hal_enable_rx_fifo	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_enable_rx_fifo(uint8_t instance)$/;"	f
flexcan_hal_enter_freeze_mode	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_enter_freeze_mode(uint8_t instance)$/;"	f
flexcan_hal_exit_freeze_mode	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_exit_freeze_mode(uint8_t instance)$/;"	f
flexcan_hal_get_err_counter	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_get_err_counter($/;"	f
flexcan_hal_get_mb	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_get_mb($/;"	f
flexcan_hal_get_mb_int_flag	hal\can\fsl_flexcan_hal.c	/^uint8_t flexcan_hal_get_mb_int_flag($/;"	f
flexcan_hal_get_time_segments	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_get_time_segments($/;"	f
flexcan_hal_init	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_init(uint8_t instance, flexcan_config_t *data)$/;"	f
flexcan_hal_lock_rx_mb	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_lock_rx_mb(uint8_t instance, flexcan_config_t *data, uint32_t mb_idx)$/;"	f
flexcan_hal_read_fifo	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_read_fifo($/;"	f
flexcan_hal_select_clk	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_select_clk($/;"	f
flexcan_hal_set_id_filter_table_elements	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_id_filter_table_elements($/;"	f
flexcan_hal_set_mask_type	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_mask_type($/;"	f
flexcan_hal_set_max_mb_number	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_max_mb_number($/;"	f
flexcan_hal_set_mb_rx	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_mb_rx($/;"	f
flexcan_hal_set_mb_tx	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_mb_tx($/;"	f
flexcan_hal_set_rx_fifo	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_rx_fifo($/;"	f
flexcan_hal_set_rx_fifo_filters_number	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_fifo_filters_number($/;"	f
flexcan_hal_set_rx_fifo_global_ext_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_fifo_global_ext_mask($/;"	f
flexcan_hal_set_rx_fifo_global_std_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_fifo_global_std_mask($/;"	f
flexcan_hal_set_rx_individual_ext_mask	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_rx_individual_ext_mask($/;"	f
flexcan_hal_set_rx_individual_std_mask	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_set_rx_individual_std_mask($/;"	f
flexcan_hal_set_rx_mb_buf14_ext_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_buf14_ext_mask($/;"	f
flexcan_hal_set_rx_mb_buf14_std_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_buf14_std_mask($/;"	f
flexcan_hal_set_rx_mb_buf15_ext_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_buf15_ext_mask($/;"	f
flexcan_hal_set_rx_mb_buf15_std_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_buf15_std_mask($/;"	f
flexcan_hal_set_rx_mb_global_ext_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_global_ext_mask($/;"	f
flexcan_hal_set_rx_mb_global_std_mask	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_rx_mb_global_std_mask($/;"	f
flexcan_hal_set_time_segments	hal\can\fsl_flexcan_hal.c	/^void flexcan_hal_set_time_segments($/;"	f
flexcan_hal_sw_reset	hal\can\fsl_flexcan_hal.c	/^flexcan_status_t flexcan_hal_sw_reset(uint8_t instance)$/;"	f
FLEXCANBerrCounter	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANBerrCounter {$/;"	s
FLEXCANConfig	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANConfig {$/;"	s
FLEXCANIdTable	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANIdTable {$/;"	s
FLEXCANMb	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANMb {$/;"	s
FLEXCANMbCodeStatusRx	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANMbCodeStatusRx {$/;"	s
FLEXCANMbCodeStatusTx	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANMbCodeStatusTx {$/;"	s
FLEXCANRxFifoConfig	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANRxFifoConfig {$/;"	s
FLEXCANTimeSegment	hal\can\fsl_flexcan_hal.h	/^typedef struct FLEXCANTimeSegment {$/;"	s
__FSL_FLEXCAN_HAL_H__	hal\can\fsl_flexcan_hal.h	31;"	d
_flexcan_clk_source	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_clk_source {$/;"	g
_flexcan_constants	hal\can\fsl_flexcan_hal.h	/^enum _flexcan_constants$/;"	g
_flexcan_err_status	hal\can\fsl_flexcan_hal.h	/^enum _flexcan_err_status$/;"	g
_flexcan_int_type	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_int_type {$/;"	g
_flexcan_mb_code_rx	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_mb_code_rx {$/;"	g
_flexcan_mb_code_tx	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_mb_code_tx {$/;"	g
_flexcan_mb_id_type	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_mb_id_type {$/;"	g
_flexcan_mb_transmission_type	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_mb_transmission_type {$/;"	g
_flexcan_operation_modes	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_operation_modes {$/;"	g
_flexcan_rx_fifo_id_element_format	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_rx_fifo_id_element_format {$/;"	g
_flexcan_rx_fifo_id_filter_number	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_rx_fifo_id_filter_number {$/;"	g
_flexcan_rx_mask_type	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_rx_mask_type {$/;"	g
_flexcan_status	hal\can\fsl_flexcan_hal.h	/^typedef enum _flexcan_status$/;"	g
code	hal\can\fsl_flexcan_hal.h	/^    flexcan_mb_code_rx_t code;                   \/*!< MB code for RX buffers*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
code	hal\can\fsl_flexcan_hal.h	/^    flexcan_mb_code_tx_t code;                   \/*!< MB code for TX buffers*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
cs	hal\can\fsl_flexcan_hal.h	/^    uint32_t cs;                        \/*!< Code and Status*\/$/;"	m	struct:FLEXCANMb
data	hal\can\fsl_flexcan_hal.h	/^    uint8_t data[kFlexCanMessageSize];  \/*!< bytes of the FlexCAN message*\/$/;"	m	struct:FLEXCANMb
data_length	hal\can\fsl_flexcan_hal.h	/^    uint32_t data_length;                                 \/*!< Length of Data in Bytes*\/$/;"	m	struct:FLEXCANRxFifoConfig
data_length	hal\can\fsl_flexcan_hal.h	/^    uint32_t data_length;                        \/*!< Length of Data in Bytes*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
data_length	hal\can\fsl_flexcan_hal.h	/^    uint32_t data_length;                        \/*!< Length of Data in Bytes*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
flexcan_berr_counter_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_berr_counter_t;$/;"	t	typeref:struct:FLEXCANBerrCounter
flexcan_clk_source_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_clk_source_t;$/;"	t	typeref:enum:_flexcan_clk_source
flexcan_config_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_config_t;$/;"	t	typeref:struct:FLEXCANConfig
flexcan_hal_clear_mb_int_flag	hal\can\fsl_flexcan_hal.h	/^static inline void flexcan_hal_clear_mb_int_flag($/;"	f
flexcan_hal_get_all_mb_int_flags	hal\can\fsl_flexcan_hal.h	/^static inline uint32_t flexcan_hal_get_all_mb_int_flags(uint8_t instance)$/;"	f
flexcan_hal_get_err_status	hal\can\fsl_flexcan_hal.h	/^static inline uint32_t flexcan_hal_get_err_status(uint8_t instance)$/;"	f
flexcan_hal_get_freeze_ack	hal\can\fsl_flexcan_hal.h	/^static inline uint32_t flexcan_hal_get_freeze_ack(uint8_t instance)$/;"	f
flexcan_hal_get_rx_fifo_id_acceptance_filter	hal\can\fsl_flexcan_hal.h	/^static inline uint32_t  flexcan_hal_get_rx_fifo_id_acceptance_filter(uint8_t instance)$/;"	f
flexcan_hal_is_enabled	hal\can\fsl_flexcan_hal.h	/^static inline bool flexcan_hal_is_enabled(uint8_t instance)$/;"	f
flexcan_hal_unlock_rx_mb	hal\can\fsl_flexcan_hal.h	/^static inline void flexcan_hal_unlock_rx_mb(uint8_t instance)$/;"	f
flexcan_id_table_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_id_table_t;$/;"	t	typeref:struct:FLEXCANIdTable
flexcan_int_type_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_int_type_t;$/;"	t	typeref:enum:_flexcan_int_type
flexcan_mb_code_rx_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_code_rx_t;$/;"	t	typeref:enum:_flexcan_mb_code_rx
flexcan_mb_code_status_rx_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_code_status_rx_t;$/;"	t	typeref:struct:FLEXCANMbCodeStatusRx
flexcan_mb_code_status_tx_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_code_status_tx_t;$/;"	t	typeref:struct:FLEXCANMbCodeStatusTx
flexcan_mb_code_tx_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_code_tx_t;$/;"	t	typeref:enum:_flexcan_mb_code_tx
flexcan_mb_id_type_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_id_type_t;$/;"	t	typeref:enum:_flexcan_mb_id_type
flexcan_mb_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_t;$/;"	t	typeref:struct:FLEXCANMb
flexcan_mb_transmission_type_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_mb_transmission_type_t;$/;"	t	typeref:enum:_flexcan_mb_transmission_type
flexcan_operation_modes_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_operation_modes_t;$/;"	t	typeref:enum:_flexcan_operation_modes
flexcan_rx_fifo_config_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_rx_fifo_config_t;$/;"	t	typeref:struct:FLEXCANRxFifoConfig
flexcan_rx_fifo_id_element_format_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_rx_fifo_id_element_format_t;$/;"	t	typeref:enum:_flexcan_rx_fifo_id_element_format
flexcan_rx_fifo_id_filter_num_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_rx_fifo_id_filter_num_t;$/;"	t	typeref:enum:_flexcan_rx_fifo_id_filter_number
flexcan_rx_mask_type_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_rx_mask_type_t;$/;"	t	typeref:enum:_flexcan_rx_mask_type
flexcan_status_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_status_t;$/;"	t	typeref:enum:_flexcan_status
flexcan_time_segment_t	hal\can\fsl_flexcan_hal.h	/^} flexcan_time_segment_t;$/;"	t	typeref:struct:FLEXCANTimeSegment
id_filter	hal\can\fsl_flexcan_hal.h	/^    uint32_t *id_filter;    \/*!< RX FITO ID filter elements*\/$/;"	m	struct:FLEXCANIdTable
id_filter_number	hal\can\fsl_flexcan_hal.h	/^    flexcan_rx_fifo_id_element_format_t id_filter_number; \/*!< The number of RX FIFO ID filters*\/$/;"	m	struct:FLEXCANRxFifoConfig
is_extended_mb	hal\can\fsl_flexcan_hal.h	/^    bool is_extended_mb;    \/*!< Extended frame*\/$/;"	m	struct:FLEXCANIdTable
is_remote_mb	hal\can\fsl_flexcan_hal.h	/^    bool is_remote_mb;      \/*!< Remote frame*\/$/;"	m	struct:FLEXCANIdTable
is_rx_fifo_needed	hal\can\fsl_flexcan_hal.h	/^    bool is_rx_fifo_needed;                         \/*!< 1 if need it; 0 if not*\/$/;"	m	struct:FLEXCANConfig
is_rx_mb_needed	hal\can\fsl_flexcan_hal.h	/^    bool is_rx_mb_needed;                        \/*!< 1 if need it; 0 if not*\/$/;"	m	struct:FLEXCANConfig
kFlexCanClkSource_Ipbus	hal\can\fsl_flexcan_hal.h	/^    kFlexCanClkSource_Ipbus,  \/*!< the peripheral clock*\/$/;"	e	enum:_flexcan_clk_source
kFlexCanClkSource_Osc	hal\can\fsl_flexcan_hal.h	/^    kFlexCanClkSource_Osc,    \/*!< the Oscillator clock*\/$/;"	e	enum:_flexcan_clk_source
kFlexCanDisableMode	hal\can\fsl_flexcan_hal.h	/^    kFlexCanDisableMode,       \/*!< Module disable mode*\/$/;"	e	enum:_flexcan_operation_modes
kFlexCanFreezeMode	hal\can\fsl_flexcan_hal.h	/^    kFlexCanFreezeMode,        \/*!< Freeze mode*\/$/;"	e	enum:_flexcan_operation_modes
kFlexCanInt_Boff	hal\can\fsl_flexcan_hal.h	/^    kFlexCanInt_Boff,          \/*!< Bus off interrupt*\/$/;"	e	enum:_flexcan_int_type
kFlexCanInt_Buf	hal\can\fsl_flexcan_hal.h	/^    kFlexCanInt_Buf,           \/*!< OR'd message buffers interrupt*\/$/;"	e	enum:_flexcan_int_type
kFlexCanInt_Err	hal\can\fsl_flexcan_hal.h	/^    kFlexCanInt_Err,           \/*!< Error interrupt*\/$/;"	e	enum:_flexcan_int_type
kFlexCanInt_Wakeup	hal\can\fsl_flexcan_hal.h	/^    kFlexCanInt_Wakeup,        \/*!< Wakeup interrupt*\/$/;"	e	enum:_flexcan_int_type
kFlexCanListenOnlyMode	hal\can\fsl_flexcan_hal.h	/^    kFlexCanListenOnlyMode,    \/*!< listen-only mode*\/$/;"	e	enum:_flexcan_operation_modes
kFlexCanLoopBackMode	hal\can\fsl_flexcan_hal.h	/^    kFlexCanLoopBackMode,      \/*!< loop-back mode*\/$/;"	e	enum:_flexcan_operation_modes
kFlexCanMBStatusType_RX	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMBStatusType_RX,          \/*!< receive MB*\/$/;"	e	enum:_flexcan_mb_transmission_type
kFlexCanMBStatusType_RXRemote	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMBStatusType_RXRemote,    \/*!< receive remote request MB*\/$/;"	e	enum:_flexcan_mb_transmission_type
kFlexCanMBStatusType_RXTXRemote	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMBStatusType_RXTXRemote,  \/*!< FlexCAN remote frame receives remote request,*\/$/;"	e	enum:_flexcan_mb_transmission_type
kFlexCanMBStatusType_TX	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMBStatusType_TX,          \/*!< transmit MB*\/$/;"	e	enum:_flexcan_mb_transmission_type
kFlexCanMBStatusType_TXRemote	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMBStatusType_TXRemote,    \/*!< transmit remote request MB*\/$/;"	e	enum:_flexcan_mb_transmission_type
kFlexCanMbId_Ext	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMbId_Ext,         \/*!< Extended ID*\/$/;"	e	enum:_flexcan_mb_id_type
kFlexCanMbId_Std	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMbId_Std,         \/*!< Standard ID*\/$/;"	e	enum:_flexcan_mb_id_type
kFlexCanMessageSize	hal\can\fsl_flexcan_hal.h	/^    kFlexCanMessageSize = 8,               \/*!< FlexCAN message buffer data size in bytes*\/$/;"	e	enum:_flexcan_constants
kFlexCanNormalMode	hal\can\fsl_flexcan_hal.h	/^    kFlexCanNormalMode,        \/*!< normal mode or user mode*\/$/;"	e	enum:_flexcan_operation_modes
kFlexCanRX_Busy	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Busy      = 0x8, \/*!< FlexCAN is updating the contents of the MB.*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_Empty	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Empty     = 0x4, \/*!< MB is active and empty*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_Full	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Full      = 0x2, \/*!< MB is full*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_Inactive	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Inactive  = 0x0, \/*!< MB is not active*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_NotUsed	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_NotUsed   = 0xF, \/*!< Not used*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_Overrun	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Overrun   = 0x6, \/*!< MB is being overwritten into a full buffer*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRX_Ranswer	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRX_Ranswer   = 0xA, \/*!< A frame was configured to recognize a Remote Request Frame*\/$/;"	e	enum:_flexcan_mb_code_rx
kFlexCanRxFifoIDFilters_104	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_104 = 0xC,         \/*!< 104 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_112	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_112 = 0xD,         \/*!< 112 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_120	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_120 = 0xE,         \/*!< 120 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_128	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_128 = 0xF          \/*!< 128 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_16	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_16  = 0x1,         \/*!<  16 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_24	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_24  = 0x2,         \/*!<  24 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_32	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_32  = 0x3,         \/*!<  32 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_40	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_40  = 0x4,         \/*!<  40 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_48	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_48  = 0x5,         \/*!<  48 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_56	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_56  = 0x6,         \/*!<  56 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_64	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_64  = 0x7,         \/*!<  64 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_72	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_72  = 0x8,         \/*!<  72 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_8	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_8   = 0x0,         \/*!<   8 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_80	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_80  = 0x9,         \/*!<  80 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_88	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_88  = 0xA,         \/*!<  88 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIDFilters_96	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIDFilters_96  = 0xB,         \/*!<  96 Rx FIFO Filters*\/$/;"	e	enum:_flexcan_rx_fifo_id_filter_number
kFlexCanRxFifoIdElementFormat_A	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIdElementFormat_A, \/*!< One full ID (standard and extended) per ID Filter Table*\/$/;"	e	enum:_flexcan_rx_fifo_id_element_format
kFlexCanRxFifoIdElementFormat_B	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIdElementFormat_B, \/*!< Two full standard IDs or two partial 14-bit (standard and*\/$/;"	e	enum:_flexcan_rx_fifo_id_element_format
kFlexCanRxFifoIdElementFormat_C	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIdElementFormat_C, \/*!< Four partial 8-bit Standard IDs per ID Filter Table*\/$/;"	e	enum:_flexcan_rx_fifo_id_element_format
kFlexCanRxFifoIdElementFormat_D	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxFifoIdElementFormat_D, \/*!< All frames rejected.*\/$/;"	e	enum:_flexcan_rx_fifo_id_element_format
kFlexCanRxMask_Global	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxMask_Global,      \/*!< RX global mask*\/$/;"	e	enum:_flexcan_rx_mask_type
kFlexCanRxMask_Individual	hal\can\fsl_flexcan_hal.h	/^    kFlexCanRxMask_Individual,  \/*!< RX individual mask*\/$/;"	e	enum:_flexcan_rx_mask_type
kFlexCanTX_Abort	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_Abort     = 0x09, \/*!< MB is aborted*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCanTX_Data	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_Data      = 0x0C, \/*!< MB is a TX Data Frame(MB RTR must be 0)*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCanTX_Inactive	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_Inactive  = 0x08, \/*!< MB is not active*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCanTX_NotUsed	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_NotUsed   = 0xF,  \/*!< Not used*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCanTX_Remote	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_Remote    = 0x1C, \/*!< MB is a TX Remote Request Frame (MB RTR must be 1)*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCanTX_Tanswer	hal\can\fsl_flexcan_hal.h	/^    kFlexCanTX_Tanswer   = 0x0E, \/*!< MB is a TX Response Request Frame from*\/$/;"	e	enum:_flexcan_mb_code_tx
kFlexCan_AckErr	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_AckErr  = 0x1000, \/*!< Received no ACK on transmission*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_Bit0Err	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_Bit0Err = 0x2000, \/*!< Unable to send dominant bit*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_Bit1Err	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_Bit1Err = 0x4000, \/*!< Unable to send recessive bit*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_CrcErr	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_CrcErr  = 0x0800, \/*!< Cyclic Redundancy Check Error*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_FrmErr	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_FrmErr  = 0x0400, \/*!< Form Error*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_RxWrn	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_RxWrn   = 0x0080, \/*!< Reached warning level for RX errors*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_StfErr	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_StfErr  = 0x0200, \/*!< Stuffing Error*\/$/;"	e	enum:_flexcan_err_status
kFlexCan_TxWrn	hal\can\fsl_flexcan_hal.h	/^    kFlexCan_TxWrn   = 0x0100, \/*!< Reached warning level for TX errors*\/$/;"	e	enum:_flexcan_err_status
kStatus_FLEXCAN_Fail	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_Fail,$/;"	e	enum:_flexcan_status
kStatus_FLEXCAN_InvalidArgument	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_InvalidArgument,$/;"	e	enum:_flexcan_status
kStatus_FLEXCAN_OutOfRange	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_OutOfRange,$/;"	e	enum:_flexcan_status
kStatus_FLEXCAN_Success	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_Success = 0,$/;"	e	enum:_flexcan_status
kStatus_FLEXCAN_TimeOut	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_TimeOut,$/;"	e	enum:_flexcan_status
kStatus_FLEXCAN_UnknownProperty	hal\can\fsl_flexcan_hal.h	/^    kStatus_FLEXCAN_UnknownProperty,$/;"	e	enum:_flexcan_status
local_priority_enable	hal\can\fsl_flexcan_hal.h	/^    bool local_priority_enable;                  \/*!< 1 if enable it; 0 if disable it*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
local_priority_enable	hal\can\fsl_flexcan_hal.h	/^    bool local_priority_enable;                  \/*!< 1 if enable it; 0 if disable it*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
local_priority_val	hal\can\fsl_flexcan_hal.h	/^    uint32_t local_priority_val;                 \/*!< Local priority value [0..2]*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
local_priority_val	hal\can\fsl_flexcan_hal.h	/^    uint32_t local_priority_val;                 \/*!< Local priority value [0..2]*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
max_num_mb	hal\can\fsl_flexcan_hal.h	/^    uint32_t max_num_mb;                            \/*!< The maximum number of Message Buffers*\/$/;"	m	struct:FLEXCANConfig
msg_id	hal\can\fsl_flexcan_hal.h	/^    uint32_t msg_id;                    \/*!< Message Buffer ID*\/$/;"	m	struct:FLEXCANMb
msg_id_type	hal\can\fsl_flexcan_hal.h	/^    flexcan_mb_id_type_t msg_id_type;                     \/*!< Type of message ID*\/$/;"	m	struct:FLEXCANRxFifoConfig
msg_id_type	hal\can\fsl_flexcan_hal.h	/^    flexcan_mb_id_type_t msg_id_type;            \/*!< Type of message ID (standard or extended)*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
msg_id_type	hal\can\fsl_flexcan_hal.h	/^    flexcan_mb_id_type_t msg_id_type;            \/*!< Type of message ID (standard or extended)*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
num_id_filters	hal\can\fsl_flexcan_hal.h	/^    flexcan_rx_fifo_id_filter_num_t num_id_filters; \/*!< The number of RX FIFO ID filters needed*\/$/;"	m	struct:FLEXCANConfig
num_mb	hal\can\fsl_flexcan_hal.h	/^    uint32_t num_mb;                                \/*!< The number of Message Buffers needed*\/$/;"	m	struct:FLEXCANConfig
pre_divider	hal\can\fsl_flexcan_hal.h	/^    uint32_t pre_divider; \/*!< Clock pre divider*\/$/;"	m	struct:FLEXCANTimeSegment
propseg	hal\can\fsl_flexcan_hal.h	/^    uint32_t propseg;     \/*!< Propagation segment*\/$/;"	m	struct:FLEXCANTimeSegment
pseg1	hal\can\fsl_flexcan_hal.h	/^    uint32_t pseg1;       \/*!< Phase segment 1*\/$/;"	m	struct:FLEXCANTimeSegment
pseg2	hal\can\fsl_flexcan_hal.h	/^    uint32_t pseg2;       \/*!< Phase segment 2*\/$/;"	m	struct:FLEXCANTimeSegment
remote_transmission	hal\can\fsl_flexcan_hal.h	/^    uint32_t remote_transmission;                         \/*!< Remote transmission request*\/$/;"	m	struct:FLEXCANRxFifoConfig
remote_transmission	hal\can\fsl_flexcan_hal.h	/^    uint32_t remote_transmission;                \/*!< Remote transmission request*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
remote_transmission	hal\can\fsl_flexcan_hal.h	/^    uint32_t remote_transmission;                \/*!< Remote transmission request*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
rjw	hal\can\fsl_flexcan_hal.h	/^    uint32_t rjw;         \/*!< Resync jump width*\/$/;"	m	struct:FLEXCANTimeSegment
rxerr	hal\can\fsl_flexcan_hal.h	/^    uint16_t rxerr;           \/*!< Receive error counter*\/$/;"	m	struct:FLEXCANBerrCounter
substitute_remote	hal\can\fsl_flexcan_hal.h	/^    uint32_t substitute_remote;                           \/*!< Substitute remote request (used*\/$/;"	m	struct:FLEXCANRxFifoConfig
substitute_remote	hal\can\fsl_flexcan_hal.h	/^    uint32_t substitute_remote;                  \/*!< Substitute remote request (used only in*\/$/;"	m	struct:FLEXCANMbCodeStatusRx
substitute_remote	hal\can\fsl_flexcan_hal.h	/^    uint32_t substitute_remote;                  \/*!< Substitute remote request (used only in*\/$/;"	m	struct:FLEXCANMbCodeStatusTx
txerr	hal\can\fsl_flexcan_hal.h	/^    uint16_t txerr;           \/*!< Transmit error counter*\/$/;"	m	struct:FLEXCANBerrCounter
FSL_FEATURE_DMAMUX_DMAMUX_CHANNELS	hal\dmamux\fsl_dmamux_features.h	123;"	d
FSL_FEATURE_DMAMUX_DMAMUX_CHANNELS	hal\dmamux\fsl_dmamux_features.h	168;"	d
FSL_FEATURE_DMAMUX_MODULE_CHANNEL	hal\dmamux\fsl_dmamux_features.h	121;"	d
FSL_FEATURE_DMAMUX_MODULE_CHANNEL	hal\dmamux\fsl_dmamux_features.h	166;"	d
__FSL_DMAMUX_FEATURES_H__	hal\dmamux\fsl_dmamux_features.h	31;"	d
dmamux_hal_init	hal\dmamux\fsl_dmamux_hal.c	/^void dmamux_hal_init(uint8_t module)$/;"	f
DmaMuxSource	hal\dmamux\fsl_dmamux_hal.h	/^typedef enum DmaMuxSource {$/;"	g
__FSL_DMAMUX_HAL_H__	hal\dmamux\fsl_dmamux_hal.h	31;"	d
dmamux_dma_request_source	hal\dmamux\fsl_dmamux_hal.h	/^} dmamux_dma_request_source;$/;"	t	typeref:enum:DmaMuxSource
dmamux_hal_disable_channel	hal\dmamux\fsl_dmamux_hal.h	/^static inline void dmamux_hal_disable_channel(uint8_t module, uint8_t channel)$/;"	f
dmamux_hal_disable_period_trigger	hal\dmamux\fsl_dmamux_hal.h	/^static inline void dmamux_hal_disable_period_trigger(uint8_t module, uint8_t channel)$/;"	f
dmamux_hal_enable_channel	hal\dmamux\fsl_dmamux_hal.h	/^static inline void dmamux_hal_enable_channel(uint8_t module, uint8_t channel)$/;"	f
dmamux_hal_enable_period_trigger	hal\dmamux\fsl_dmamux_hal.h	/^static inline void dmamux_hal_enable_period_trigger(uint8_t module, uint8_t channel)$/;"	f
dmamux_hal_set_trigger_source	hal\dmamux\fsl_dmamux_hal.h	/^static inline void dmamux_hal_set_trigger_source(uint8_t module, uint8_t channel, uint8_t source)$/;"	f
kDmamuxDmaRequestSource	hal\dmamux\fsl_dmamux_hal.h	/^    kDmamuxDmaRequestSource = 64U    \/*!< Max number of dma request allowed for a dma mux. *\/$/;"	e	enum:DmaMuxSource
FSL_FEATURE_SPI_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	291;"	d
FSL_FEATURE_SPI_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	325;"	d
FSL_FEATURE_SPI_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	356;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	185;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	238;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	285;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	319;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	350;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNTn	hal\dspi\fsl_dspi_features.h	161;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNTn	hal\dspi\fsl_dspi_features.h	215;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNTn	hal\dspi\fsl_dspi_features.h	259;"	d
FSL_FEATURE_SPI_CHIP_SELECT_COUNTn	hal\dspi\fsl_dspi_features.h	75;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	168;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	189;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	221;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	242;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	265;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	289;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	323;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	354;"	d
FSL_FEATURE_SPI_DATA_REGISTER_HAS_POSTFIX	hal\dspi\fsl_dspi_features.h	81;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	170;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	191;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	223;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	244;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	267;"	d
FSL_FEATURE_SPI_FEATURE_16BIT_TRANSFERS	hal\dspi\fsl_dspi_features.h	83;"	d
FSL_FEATURE_SPI_FIFO_SIZE	hal\dspi\fsl_dspi_features.h	179;"	d
FSL_FEATURE_SPI_FIFO_SIZE	hal\dspi\fsl_dspi_features.h	209;"	d
FSL_FEATURE_SPI_FIFO_SIZE	hal\dspi\fsl_dspi_features.h	279;"	d
FSL_FEATURE_SPI_FIFO_SIZE	hal\dspi\fsl_dspi_features.h	313;"	d
FSL_FEATURE_SPI_FIFO_SIZE	hal\dspi\fsl_dspi_features.h	69;"	d
FSL_FEATURE_SPI_FIFO_SIZEn	hal\dspi\fsl_dspi_features.h	146;"	d
FSL_FEATURE_SPI_FIFO_SIZEn	hal\dspi\fsl_dspi_features.h	151;"	d
FSL_FEATURE_SPI_FIFO_SIZEn	hal\dspi\fsl_dspi_features.h	230;"	d
FSL_FEATURE_SPI_FIFO_SIZEn	hal\dspi\fsl_dspi_features.h	251;"	d
FSL_FEATURE_SPI_FIFO_SIZEn	hal\dspi\fsl_dspi_features.h	342;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	166;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	187;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	219;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	240;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	263;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	287;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	321;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	352;"	d
FSL_FEATURE_SPI_HAS_CHIP_SELECT_STROBE	hal\dspi\fsl_dspi_features.h	79;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	143;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	177;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	207;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	228;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	249;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	277;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	311;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	340;"	d
FSL_FEATURE_SPI_HAS_DMA_SUPPORT	hal\dspi\fsl_dspi_features.h	67;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	141;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	175;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	205;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	226;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	247;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	275;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	309;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	338;"	d
FSL_FEATURE_SPI_IS_DSPI	hal\dspi\fsl_dspi_features.h	65;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	159;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	183;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	213;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	236;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	257;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	283;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	317;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	348;"	d
FSL_FEATURE_SPI_MAX_CHIP_SELECT_COUNT	hal\dspi\fsl_dspi_features.h	73;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	157;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	181;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	211;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	234;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	255;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	281;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	315;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	346;"	d
FSL_FEATURE_SPI_MAX_DATA_WIDTH	hal\dspi\fsl_dspi_features.h	71;"	d
__FSL_DSPI_FEATURES_H__	hal\dspi\fsl_dspi_features.h	31;"	d
dspi_hal_configure_data_format	hal\dspi\fsl_dspi_hal.c	/^dspi_status_t dspi_hal_configure_data_format(uint32_t instance,$/;"	f
dspi_hal_configure_delays	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_configure_delays(uint32_t instance,$/;"	f
dspi_hal_configure_dma	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_configure_dma(uint32_t instance, bool enableTransmit, bool enableReceive)$/;"	f
dspi_hal_configure_fifos	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_configure_fifos(uint32_t instance, bool disableTxFifo, bool disableRxFifo)$/;"	f
dspi_hal_configure_interrupt	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_configure_interrupt(uint32_t instance,$/;"	f
dspi_hal_configure_pcs_polarity	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_configure_pcs_polarity(uint32_t instance, dspi_which_pcs_config_t pcs,$/;"	f
dspi_hal_flush_fifos	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_flush_fifos(uint32_t instance, bool enableFlushTxFifo, bool enableFlushRxFifo)$/;"	f
dspi_hal_get_fifo_data	hal\dspi\fsl_dspi_hal.c	/^uint32_t dspi_hal_get_fifo_data(uint32_t instance, dspi_fifo_t whichFifo, uint32_t whichFifoEntry)$/;"	f
dspi_hal_master_init	hal\dspi\fsl_dspi_hal.c	/^dspi_status_t dspi_hal_master_init(uint32_t instance, const dspi_master_config_t * config,$/;"	f
dspi_hal_reset	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_reset(uint32_t instance)$/;"	f
dspi_hal_set_baud	hal\dspi\fsl_dspi_hal.c	/^uint32_t dspi_hal_set_baud(uint32_t instance, dspi_ctar_selection_t whichCtar, uint32_t bitsPerSec,$/;"	f
dspi_hal_set_baud_divisors	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_set_baud_divisors(uint32_t instance,$/;"	f
dspi_hal_slave_init	hal\dspi\fsl_dspi_hal.c	/^dspi_status_t dspi_hal_slave_init(uint32_t instance, const dspi_slave_config_t * config)$/;"	f
dspi_hal_write_data_master_mode	hal\dspi\fsl_dspi_hal.c	/^void dspi_hal_write_data_master_mode(uint32_t instance,$/;"	f
DspiBaudRateDivisors	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiBaudRateDivisors {$/;"	s
DspiCommandDataConfig	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiCommandDataConfig {$/;"	s
DspiDataFormatConfig	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiDataFormatConfig {$/;"	s
DspiDelaySettingsConfig	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiDelaySettingsConfig {$/;"	s
DspiMasterConfig	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiMasterConfig {$/;"	s
DspiSlaveConfig	hal\dspi\fsl_dspi_hal.h	/^typedef struct DspiSlaveConfig {$/;"	s
__FSL_DSPI_HAL_H__	hal\dspi\fsl_dspi_hal.h	31;"	d
_dspi_clock_phase	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_clock_phase {$/;"	g
_dspi_clock_polarity	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_clock_polarity {$/;"	g
_dspi_ctar_selection	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_ctar_selection {$/;"	g
_dspi_fifo	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_fifo {$/;"	g
_dspi_fifo_counter_pointer	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_fifo_counter_pointer {$/;"	g
_dspi_master_sample_point	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_master_sample_point {$/;"	g
_dspi_master_slave_mode	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_master_slave_mode {$/;"	g
_dspi_pcs_polarity_config	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_pcs_polarity_config {$/;"	g
_dspi_shift_direction	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_shift_direction {$/;"	g
_dspi_status	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_status$/;"	g
_dspi_status_and_interrupt_request	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_status_and_interrupt_request {$/;"	g
_dspi_which_pcs_config	hal\dspi\fsl_dspi_hal.h	/^typedef enum _dspi_which_pcs_config {$/;"	g
afterSck	hal\dspi\fsl_dspi_hal.h	/^    uint32_t afterSck;            \/*!< After SCK delay scalar (ASC)*\/$/;"	m	struct:DspiDelaySettingsConfig
afterSckPre	hal\dspi\fsl_dspi_hal.h	/^    uint32_t afterSckPre;         \/*!< After SCK delay prescalar (PASC)*\/$/;"	m	struct:DspiDelaySettingsConfig
afterTransfer	hal\dspi\fsl_dspi_hal.h	/^    uint32_t afterTransfer;       \/*!< Delay after transfer scalar (DT) *\/$/;"	m	struct:DspiDelaySettingsConfig
afterTransferPre	hal\dspi\fsl_dspi_hal.h	/^    uint32_t afterTransferPre;    \/*!< Delay after transfer prescalar (PDT)*\/$/;"	m	struct:DspiDelaySettingsConfig
baudRateDivisor	hal\dspi\fsl_dspi_hal.h	/^    uint32_t baudRateDivisor;     \/*!< Baud Rate scaler parameter setting *\/$/;"	m	struct:DspiBaudRateDivisors
bitsPerFrame	hal\dspi\fsl_dspi_hal.h	/^    uint32_t bitsPerFrame;        \/*!< Bits per frame, min 4, max 16 (master), 32 (slave) *\/$/;"	m	struct:DspiDataFormatConfig
bitsPerSec	hal\dspi\fsl_dspi_hal.h	/^    uint32_t bitsPerSec;                   \/*!< Baud rate in bits per second.*\/$/;"	m	struct:DspiMasterConfig
clearTransferCount	hal\dspi\fsl_dspi_hal.h	/^    bool clearTransferCount;      \/*!< Clears SPI_TCNT field; cleared before transmission starts*\/$/;"	m	struct:DspiCommandDataConfig
clkPhase	hal\dspi\fsl_dspi_hal.h	/^    dspi_clock_phase_t clkPhase;     \/*!< Clock phase setting to change and capture data*\/$/;"	m	struct:DspiDataFormatConfig
clkPolarity	hal\dspi\fsl_dspi_hal.h	/^    dspi_clock_polarity_t clkPolarity;   \/*!< Active high or low clock polarity*\/$/;"	m	struct:DspiDataFormatConfig
dataConfig	hal\dspi\fsl_dspi_hal.h	/^    dspi_data_format_config_t dataConfig;    \/*!< Data format configuration structure *\/$/;"	m	struct:DspiSlaveConfig
dataConfig	hal\dspi\fsl_dspi_hal.h	/^    dspi_data_format_config_t dataConfig;    \/*!< Data format configuration structure*\/$/;"	m	struct:DspiMasterConfig
direction	hal\dspi\fsl_dspi_hal.h	/^    dspi_shift_direction_t direction; \/*!< MSB or LSB data shift direction$/;"	m	struct:DspiDataFormatConfig
doubleBaudRate	hal\dspi\fsl_dspi_hal.h	/^    bool doubleBaudRate;          \/*!< Double Baud rate parameter setting *\/$/;"	m	struct:DspiBaudRateDivisors
dspi_baud_rate_divisors_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_baud_rate_divisors_t;$/;"	t	typeref:struct:DspiBaudRateDivisors
dspi_clock_phase_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_clock_phase_t;$/;"	t	typeref:enum:_dspi_clock_phase
dspi_clock_polarity_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_clock_polarity_t;$/;"	t	typeref:enum:_dspi_clock_polarity
dspi_command_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_command_config_t;$/;"	t	typeref:struct:DspiCommandDataConfig
dspi_ctar_selection_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_ctar_selection_t;$/;"	t	typeref:enum:_dspi_ctar_selection
dspi_data_format_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_data_format_config_t;$/;"	t	typeref:struct:DspiDataFormatConfig
dspi_delay_settings_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_delay_settings_config_t;$/;"	t	typeref:struct:DspiDelaySettingsConfig
dspi_fifo_counter_pointer_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_fifo_counter_pointer_t;$/;"	t	typeref:enum:_dspi_fifo_counter_pointer
dspi_fifo_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_fifo_t;$/;"	t	typeref:enum:_dspi_fifo
dspi_hal_clear_status_flag	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_clear_status_flag(uint32_t instance,$/;"	f
dspi_hal_configure_continuous_sck	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_continuous_sck(uint32_t instance, bool enable)$/;"	f
dspi_hal_configure_doze_mode	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_doze_mode(uint32_t instance, bool enable)$/;"	f
dspi_hal_configure_halt_in_debug_mode	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_halt_in_debug_mode(uint32_t instance, bool enable)$/;"	f
dspi_hal_configure_modified_timing_format	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_modified_timing_format(uint32_t instance, bool enable)$/;"	f
dspi_hal_configure_pcs_strobe	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_pcs_strobe(uint32_t instance, bool enable)$/;"	f
dspi_hal_configure_rx_fifo_overwrite	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_configure_rx_fifo_overwrite(uint32_t instance, bool enable)$/;"	f
dspi_hal_disable	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_disable(uint32_t instance)$/;"	f
dspi_hal_enable	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_enable(uint32_t instance)$/;"	f
dspi_hal_get_fifo_counter_or_pointer	hal\dspi\fsl_dspi_hal.h	/^static inline uint32_t dspi_hal_get_fifo_counter_or_pointer(uint32_t instance,$/;"	f
dspi_hal_get_interrupt_config	hal\dspi\fsl_dspi_hal.h	/^static inline bool dspi_hal_get_interrupt_config(uint32_t instance,$/;"	f
dspi_hal_get_status_flag	hal\dspi\fsl_dspi_hal.h	/^static inline bool dspi_hal_get_status_flag(uint32_t instance,$/;"	f
dspi_hal_get_transfer_count	hal\dspi\fsl_dspi_hal.h	/^static inline uint32_t dspi_hal_get_transfer_count(uint32_t instance)$/;"	f
dspi_hal_preset_transfer_count	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_preset_transfer_count(uint32_t instance, uint16_t presetValue)$/;"	f
dspi_hal_read_data	hal\dspi\fsl_dspi_hal.h	/^static inline uint32_t dspi_hal_read_data(uint32_t instance)$/;"	f
dspi_hal_set_datain_samplepoint	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_set_datain_samplepoint(uint32_t instance,$/;"	f
dspi_hal_set_master_slave	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_set_master_slave(uint32_t instance, dspi_master_slave_mode_t mode)$/;"	f
dspi_hal_start_transfer	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_start_transfer(uint32_t instance)$/;"	f
dspi_hal_stop_transfer	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_stop_transfer(uint32_t instance)$/;"	f
dspi_hal_write_data_slave_mode	hal\dspi\fsl_dspi_hal.h	/^static inline void dspi_hal_write_data_slave_mode(uint32_t instance, uint32_t data)$/;"	f
dspi_master_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_master_config_t;$/;"	t	typeref:struct:DspiMasterConfig
dspi_master_sample_point_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_master_sample_point_t;$/;"	t	typeref:enum:_dspi_master_sample_point
dspi_master_slave_mode_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_master_slave_mode_t;$/;"	t	typeref:enum:_dspi_master_slave_mode
dspi_pcs_polarity_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_pcs_polarity_config_t;$/;"	t	typeref:enum:_dspi_pcs_polarity_config
dspi_shift_direction_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_shift_direction_t;$/;"	t	typeref:enum:_dspi_shift_direction
dspi_slave_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_slave_config_t;$/;"	t	typeref:struct:DspiSlaveConfig
dspi_status_and_interrupt_request_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_status_and_interrupt_request_t;$/;"	t	typeref:enum:_dspi_status_and_interrupt_request
dspi_status_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_status_t;$/;"	t	typeref:enum:_dspi_status
dspi_which_pcs_config_t	hal\dspi\fsl_dspi_hal.h	/^} dspi_which_pcs_config_t;$/;"	t	typeref:enum:_dspi_which_pcs_config
isChipSelectContinuous	hal\dspi\fsl_dspi_hal.h	/^    bool isChipSelectContinuous;  \/*!< Option to enable the continuous assertion of chip select$/;"	m	struct:DspiCommandDataConfig
isEnabled	hal\dspi\fsl_dspi_hal.h	/^    bool isEnabled;                         \/*!< Set to true to enable the DSPI peripheral. *\/$/;"	m	struct:DspiSlaveConfig
isEnabled	hal\dspi\fsl_dspi_hal.h	/^    bool isEnabled;                         \/*!< Set to true to enable the DSPI peripheral.*\/$/;"	m	struct:DspiMasterConfig
isEndOfQueue	hal\dspi\fsl_dspi_hal.h	/^    bool isEndOfQueue;            \/*!< Signals that the current transfer is the last in the queue*\/$/;"	m	struct:DspiCommandDataConfig
isModifiedTimingFormatEnabled	hal\dspi\fsl_dspi_hal.h	/^    bool isModifiedTimingFormatEnabled;      \/*!< Disable(0) or Enable(1) modified timing format.*\/$/;"	m	struct:DspiMasterConfig
isRxFifoDisabled	hal\dspi\fsl_dspi_hal.h	/^    bool isRxFifoDisabled;                    \/*!< Disable(1) or Enable(0) rx fifo *\/$/;"	m	struct:DspiMasterConfig
isRxFifoDisabled	hal\dspi\fsl_dspi_hal.h	/^    bool isRxFifoDisabled;                    \/*!< Disable(1) or Enable(0) rx fifo *\/$/;"	m	struct:DspiSlaveConfig
isSckContinuous	hal\dspi\fsl_dspi_hal.h	/^    bool isSckContinuous;                    \/*!< Disable(0) or Enable(1) continuous SCK operation*\/$/;"	m	struct:DspiMasterConfig
isTxFifoDisabled	hal\dspi\fsl_dspi_hal.h	/^    bool isTxFifoDisabled;                    \/*!< Disable(1) or Enable(0) tx fifo  *\/$/;"	m	struct:DspiMasterConfig
isTxFifoDisabled	hal\dspi\fsl_dspi_hal.h	/^    bool isTxFifoDisabled;                    \/*!< Disable(1) or Enable(0) tx fifo *\/$/;"	m	struct:DspiSlaveConfig
kDspiClockPhase_FirstEdge	hal\dspi\fsl_dspi_hal.h	/^    kDspiClockPhase_FirstEdge = 0,       \/*!< Data is captured on the leading edge of SCK and$/;"	e	enum:_dspi_clock_phase
kDspiClockPhase_SecondEdge	hal\dspi\fsl_dspi_hal.h	/^    kDspiClockPhase_SecondEdge = 1       \/*!< Data is changed on the leading edge of SCK and$/;"	e	enum:_dspi_clock_phase
kDspiClockPolarity_ActiveHigh	hal\dspi\fsl_dspi_hal.h	/^    kDspiClockPolarity_ActiveHigh = 0,   \/*!< Active-high DSPI clock (idles low).*\/$/;"	e	enum:_dspi_clock_polarity
kDspiClockPolarity_ActiveLow	hal\dspi\fsl_dspi_hal.h	/^    kDspiClockPolarity_ActiveLow = 1     \/*!< Active-low DSPI clock (idles high).*\/$/;"	e	enum:_dspi_clock_polarity
kDspiCtar0	hal\dspi\fsl_dspi_hal.h	/^    kDspiCtar0 = 0,   \/*!< CTAR0 selection option for master or slave mode*\/$/;"	e	enum:_dspi_ctar_selection
kDspiCtar1	hal\dspi\fsl_dspi_hal.h	/^    kDspiCtar1 = 1    \/*!< CTAR1 selection option for master mode only*\/$/;"	e	enum:_dspi_ctar_selection
kDspiEndOfQueue	hal\dspi\fsl_dspi_hal.h	/^    kDspiEndOfQueue = BP_SPI_RSER_EOQF_RE, \/*!< EOQF status\/interrupt enable*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiLsbFirst	hal\dspi\fsl_dspi_hal.h	/^    kDspiLsbFirst = 1    \/*!< Data transfers start with least significant bit.*\/$/;"	e	enum:_dspi_shift_direction
kDspiMaster	hal\dspi\fsl_dspi_hal.h	/^    kDspiMaster = 1,     \/*!< DSPI peripheral operates in master mode.*\/$/;"	e	enum:_dspi_master_slave_mode
kDspiMsbFirst	hal\dspi\fsl_dspi_hal.h	/^    kDspiMsbFirst = 0,   \/*!< Data transfers start with most significant bit.*\/$/;"	e	enum:_dspi_shift_direction
kDspiPcs0	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs0 = 1 << 0, \/*!< PCS[0] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs1	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs1 = 1 << 1, \/*!< PCS[1] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs2	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs2 = 1 << 2, \/*!< PCS[2] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs3	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs3 = 1 << 3, \/*!< PCS[3] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs4	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs4 = 1 << 4, \/*!< PCS[4] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs5	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs5 = 1 << 5  \/*!< PCS[5] *\/$/;"	e	enum:_dspi_which_pcs_config
kDspiPcs_ActiveHigh	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs_ActiveHigh = 0, \/*!< PCS Active High (idles low)*\/$/;"	e	enum:_dspi_pcs_polarity_config
kDspiPcs_ActiveLow	hal\dspi\fsl_dspi_hal.h	/^    kDspiPcs_ActiveLow  = 1 \/*!< PCS Active Low (idles high)*\/$/;"	e	enum:_dspi_pcs_polarity_config
kDspiRxFifo	hal\dspi\fsl_dspi_hal.h	/^    kDspiRxFifo = 1     \/*!< DSPI rx fifo.*\/$/;"	e	enum:_dspi_fifo
kDspiRxFifoCounter	hal\dspi\fsl_dspi_hal.h	/^    kDspiRxFifoCounter = BP_SPI_SR_RXCTR,     \/*!< RX fifo counter*\/$/;"	e	enum:_dspi_fifo_counter_pointer
kDspiRxFifoDrainRequest	hal\dspi\fsl_dspi_hal.h	/^    kDspiRxFifoDrainRequest = BP_SPI_RSER_RFDF_RE \/*!< RFDF status\/interrupt enable*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiRxFifoOverflow	hal\dspi\fsl_dspi_hal.h	/^    kDspiRxFifoOverflow = BP_SPI_RSER_RFOF_RE, \/*!< RFOF status\/interrupt enable*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiRxFifoPointer	hal\dspi\fsl_dspi_hal.h	/^    kDspiRxFifoPointer = BP_SPI_SR_POPNXTPTR, \/*!< RX fifo pointer*\/$/;"	e	enum:_dspi_fifo_counter_pointer
kDspiSckToSin_0Clock	hal\dspi\fsl_dspi_hal.h	/^    kDspiSckToSin_0Clock = 0,  \/*!< 0 system clocks between SCK edge and SIN sample*\/$/;"	e	enum:_dspi_master_sample_point
kDspiSckToSin_1Clock	hal\dspi\fsl_dspi_hal.h	/^    kDspiSckToSin_1Clock = 1,  \/*!< 1 system clock between SCK edge and SIN sample*\/$/;"	e	enum:_dspi_master_sample_point
kDspiSckToSin_2Clock	hal\dspi\fsl_dspi_hal.h	/^    kDspiSckToSin_2Clock = 2   \/*!< 2 system clocks between SCK edge and SIN sample*\/$/;"	e	enum:_dspi_master_sample_point
kDspiSlave	hal\dspi\fsl_dspi_hal.h	/^    kDspiSlave = 0       \/*!< DSPI peripheral operates in slave mode.*\/$/;"	e	enum:_dspi_master_slave_mode
kDspiTxAndRxStatus	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxAndRxStatus = BP_SPI_SR_TXRXS,  \/*!< TXRXS status only, no interrupt*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiTxComplete	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxComplete = BP_SPI_RSER_TCF_RE,  \/*!< TCF status\/interrupt enable *\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiTxFifo	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxFifo = 0,    \/*!< DSPI tx fifo.*\/$/;"	e	enum:_dspi_fifo
kDspiTxFifoCounter	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxFifoCounter = BP_SPI_SR_TXCTR      \/*!< TX fifo counter*\/$/;"	e	enum:_dspi_fifo_counter_pointer
kDspiTxFifoFillRequest	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxFifoFillRequest = BP_SPI_RSER_TFFF_RE, \/*!< TFFF status\/interrupt enable*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kDspiTxFifoPointer	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxFifoPointer = BP_SPI_SR_TXNXTPTR,  \/*!< TX fifo pointer*\/$/;"	e	enum:_dspi_fifo_counter_pointer
kDspiTxFifoUnderflow	hal\dspi\fsl_dspi_hal.h	/^    kDspiTxFifoUnderflow = BP_SPI_RSER_TFUF_RE, \/*!< TFUF status\/interrupt enable*\/$/;"	e	enum:_dspi_status_and_interrupt_request
kStatus_DSPI_Busy	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_Busy,                       \/*!< DSPI instance is already busy performing a$/;"	e	enum:_dspi_status
kStatus_DSPI_InvalidBitCount	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_InvalidBitCount,             \/*!< bits-per-frame value not valid*\/$/;"	e	enum:_dspi_status
kStatus_DSPI_InvalidInstanceNumber	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_InvalidInstanceNumber,      \/*!< DSPI instance number does not match current count*\/$/;"	e	enum:_dspi_status
kStatus_DSPI_NoTransferInProgress	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_NoTransferInProgress,       \/*!< Attempt to abort a transfer when no transfer$/;"	e	enum:_dspi_status
kStatus_DSPI_OutOfRange	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_OutOfRange               \/*< DSPI out-of-range error used in slave callback *\/$/;"	e	enum:_dspi_status
kStatus_DSPI_SlaveRxOverrun	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_SlaveRxOverrun,             \/*!< DSPI Slave RX Overrun error.*\/$/;"	e	enum:_dspi_status
kStatus_DSPI_SlaveTxUnderrun	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_SlaveTxUnderrun,        \/*!< DSPI Slave TX Underrun error.*\/$/;"	e	enum:_dspi_status
kStatus_DSPI_Success	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_Success = 0,$/;"	e	enum:_dspi_status
kStatus_DSPI_Timeout	hal\dspi\fsl_dspi_hal.h	/^    kStatus_DSPI_Timeout,                    \/*!< DSPI transfer timed out.*\/$/;"	e	enum:_dspi_status
masterInSample	hal\dspi\fsl_dspi_hal.h	/^    dspi_master_sample_point_t masterInSample; \/*!< Master data-in (SIN) sample point setting.*\/$/;"	m	struct:DspiMasterConfig
pcsPolarity	hal\dspi\fsl_dspi_hal.h	/^    dspi_pcs_polarity_config_t pcsPolarity;  \/*!< Peripheral Chip Select (pcs) polarity setting.*\/$/;"	m	struct:DspiMasterConfig
pcsToSck	hal\dspi\fsl_dspi_hal.h	/^    uint32_t pcsToSck;            \/*!< PCS to SCK Delay scalar (CSSCK) *\/$/;"	m	struct:DspiDelaySettingsConfig
pcsToSckPre	hal\dspi\fsl_dspi_hal.h	/^    uint32_t pcsToSckPre;         \/*!< PCS to SCK delay prescalar (PCSSCK) *\/$/;"	m	struct:DspiDelaySettingsConfig
prescaleDivisor	hal\dspi\fsl_dspi_hal.h	/^    uint32_t prescaleDivisor;     \/*!< Baud Rate Prescalar parameter setting*\/$/;"	m	struct:DspiBaudRateDivisors
s_baudratePrescaler	hal\dspi\fsl_dspi_hal.h	/^static const uint32_t s_baudratePrescaler[] = { 2, 3, 5, 7 };$/;"	v
s_baudrateScaler	hal\dspi\fsl_dspi_hal.h	/^static const uint32_t s_baudrateScaler[] = { 2, 4, 6, 8, 16, 32, 64, 128, 256, 512, 1024, 2048,$/;"	v
sourceClockInHz	hal\dspi\fsl_dspi_hal.h	/^    uint32_t sourceClockInHz;               \/*!< Module source clock  *\/$/;"	m	struct:DspiMasterConfig
whichCtar	hal\dspi\fsl_dspi_hal.h	/^    dspi_ctar_selection_t whichCtar;  \/*!< Desired Clock and Transfer Attributes Register (CTAR)*\/$/;"	m	struct:DspiMasterConfig
whichCtar	hal\dspi\fsl_dspi_hal.h	/^    dspi_ctar_selection_t whichCtar; \/*!< The desired Clock and Transfer Attributes$/;"	m	struct:DspiCommandDataConfig
whichPcs	hal\dspi\fsl_dspi_hal.h	/^    dspi_which_pcs_config_t whichPcs;        \/*!< Desired Peripheral Chip Select (pcs) *\/$/;"	m	struct:DspiMasterConfig
whichPcs	hal\dspi\fsl_dspi_hal.h	/^    dspi_which_pcs_config_t whichPcs;   \/*!< The desired PCS signal to use for the data transfer*\/$/;"	m	struct:DspiCommandDataConfig
FSL_FEATURE_DMA_ASYNCHRO_REQUEST_CHANNEL_COUNT	hal\edma\fsl_edma_features.h	110;"	d
FSL_FEATURE_DMA_ASYNCHRO_REQUEST_CHANNEL_COUNT	hal\edma\fsl_edma_features.h	135;"	d
FSL_FEATURE_DMA_ASYNCHRO_REQUEST_CHANNEL_COUNT	hal\edma\fsl_edma_features.h	157;"	d
FSL_FEATURE_DMA_ASYNCHRO_REQUEST_CHANNEL_COUNT	hal\edma\fsl_edma_features.h	175;"	d
FSL_FEATURE_DMA_CHANNEL_GROUP_COUNT	hal\edma\fsl_edma_features.h	108;"	d
FSL_FEATURE_DMA_CHANNEL_GROUP_COUNT	hal\edma\fsl_edma_features.h	133;"	d
FSL_FEATURE_DMA_CHANNEL_GROUP_COUNT	hal\edma\fsl_edma_features.h	155;"	d
FSL_FEATURE_DMA_CHANNEL_GROUP_COUNT	hal\edma\fsl_edma_features.h	173;"	d
FSL_FEATURE_DMA_DMAMUX_CHANNELS	hal\edma\fsl_edma_features.h	104;"	d
FSL_FEATURE_DMA_DMAMUX_CHANNELS	hal\edma\fsl_edma_features.h	129;"	d
FSL_FEATURE_DMA_DMAMUX_CHANNELS	hal\edma\fsl_edma_features.h	151;"	d
FSL_FEATURE_DMA_DMAMUX_CHANNELS	hal\edma\fsl_edma_features.h	169;"	d
FSL_FEATURE_DMA_IS_EDMA	hal\edma\fsl_edma_features.h	106;"	d
FSL_FEATURE_DMA_IS_EDMA	hal\edma\fsl_edma_features.h	131;"	d
FSL_FEATURE_DMA_IS_EDMA	hal\edma\fsl_edma_features.h	153;"	d
FSL_FEATURE_DMA_IS_EDMA	hal\edma\fsl_edma_features.h	171;"	d
FSL_FEATURE_DMA_MODULE_CHANNEL	hal\edma\fsl_edma_features.h	102;"	d
FSL_FEATURE_DMA_MODULE_CHANNEL	hal\edma\fsl_edma_features.h	127;"	d
FSL_FEATURE_DMA_MODULE_CHANNEL	hal\edma\fsl_edma_features.h	149;"	d
FSL_FEATURE_DMA_MODULE_CHANNEL	hal\edma\fsl_edma_features.h	167;"	d
__FSL_DMA_FEATURES_H__	hal\edma\fsl_edma_features.h	31;"	d
edma_hal_htcd_get_begin_major_count	hal\edma\fsl_edma_hal.c	/^uint32_t edma_hal_htcd_get_begin_major_count(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_htcd_get_current_major_count	hal\edma\fsl_edma_hal.c	/^uint32_t edma_hal_htcd_get_current_major_count(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_htcd_get_finished_bytes	hal\edma\fsl_edma_hal.c	/^uint32_t edma_hal_htcd_get_finished_bytes(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_htcd_get_nbytes_configuration	hal\edma\fsl_edma_hal.c	/^uint32_t edma_hal_htcd_get_nbytes_configuration(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_htcd_get_unfinished_bytes	hal\edma\fsl_edma_hal.c	/^uint32_t edma_hal_htcd_get_unfinished_bytes(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_init	hal\edma\fsl_edma_hal.c	/^void edma_hal_init(uint32_t instance, edma_config_t *init)$/;"	f
edma_hal_stcd_push_to_htcd	hal\edma\fsl_edma_hal.c	/^void edma_hal_stcd_push_to_htcd(uint32_t instance, uint32_t channel, edma_software_tcd_t *stcd)$/;"	f
ATTR	hal\edma\fsl_edma_hal.h	/^    uint16_t ATTR;$/;"	m	struct:EdmaSoftwareTcd
B	hal\edma\fsl_edma_hal.h	/^    uint16_t B;$/;"	m	union:EdmaTCDControl
B	hal\edma\fsl_edma_hal.h	/^    uint32_t B;$/;"	m	union:EdmaErrorStatusAll
BITER_ELINKNO	hal\edma\fsl_edma_hal.h	/^        uint16_t BITER_ELINKNO;$/;"	m	union:EdmaSoftwareTcd::__anon10
BITER_ELINKYES	hal\edma\fsl_edma_hal.h	/^        uint16_t BITER_ELINKYES;$/;"	m	union:EdmaSoftwareTcd::__anon10
CITER_ELINKNO	hal\edma\fsl_edma_hal.h	/^        uint16_t CITER_ELINKNO;$/;"	m	union:EdmaSoftwareTcd::__anon9
CITER_ELINKYES	hal\edma\fsl_edma_hal.h	/^        uint16_t CITER_ELINKYES;$/;"	m	union:EdmaSoftwareTcd::__anon9
CSR	hal\edma\fsl_edma_hal.h	/^    uint16_t CSR;$/;"	m	struct:EdmaSoftwareTcd
DADDR	hal\edma\fsl_edma_hal.h	/^    uint32_t DADDR;$/;"	m	struct:EdmaSoftwareTcd
DLAST_SGA	hal\edma\fsl_edma_hal.h	/^    uint32_t DLAST_SGA;$/;"	m	struct:EdmaSoftwareTcd
DOFF	hal\edma\fsl_edma_hal.h	/^    uint16_t DOFF;$/;"	m	struct:EdmaSoftwareTcd
EdmaBandwidthConfiguration	hal\edma\fsl_edma_hal.h	/^typedef enum EdmaBandwidthConfiguration {$/;"	g
EdmaChannelPriority	hal\edma\fsl_edma_hal.h	/^typedef enum EdmaChannelPriority {$/;"	g
EdmaConfiguration	hal\edma\fsl_edma_hal.h	/^typedef struct EdmaConfiguration {$/;"	s
EdmaErrorStatusAll	hal\edma\fsl_edma_hal.h	/^typedef union EdmaErrorStatusAll {$/;"	u
EdmaGroupPriority	hal\edma\fsl_edma_hal.h	/^typedef enum EdmaGroupPriority {$/;"	g
EdmaMinorLoopOffset	hal\edma\fsl_edma_hal.h	/^typedef struct EdmaMinorLoopOffset {$/;"	s
EdmaModulo	hal\edma\fsl_edma_hal.h	/^typedef enum EdmaModulo {$/;"	g
EdmaSoftwareTcd	hal\edma\fsl_edma_hal.h	/^typedef struct EdmaSoftwareTcd {$/;"	s
EdmaTCDControl	hal\edma\fsl_edma_hal.h	/^typedef union EdmaTCDControl {$/;"	u
EdmaTransferSize	hal\edma\fsl_edma_hal.h	/^typedef enum EdmaTransferSize {$/;"	g
NBYTES_MLNO	hal\edma\fsl_edma_hal.h	/^        uint32_t NBYTES_MLNO;$/;"	m	union:EdmaSoftwareTcd::__anon8
NBYTES_MLOFFNO	hal\edma\fsl_edma_hal.h	/^        uint32_t NBYTES_MLOFFNO;$/;"	m	union:EdmaSoftwareTcd::__anon8
NBYTES_MLOFFYES	hal\edma\fsl_edma_hal.h	/^        uint32_t NBYTES_MLOFFYES;$/;"	m	union:EdmaSoftwareTcd::__anon8
SADDR	hal\edma\fsl_edma_hal.h	/^    uint32_t SADDR;$/;"	m	struct:EdmaSoftwareTcd
SLAST	hal\edma\fsl_edma_hal.h	/^    uint32_t SLAST;$/;"	m	struct:EdmaSoftwareTcd
SOFF	hal\edma\fsl_edma_hal.h	/^    uint16_t SOFF;$/;"	m	struct:EdmaSoftwareTcd
U	hal\edma\fsl_edma_hal.h	/^    } U;$/;"	m	union:EdmaErrorStatusAll	typeref:struct:EdmaErrorStatusAll::__anon7
U	hal\edma\fsl_edma_hal.h	/^    } U;$/;"	m	union:EdmaTCDControl	typeref:struct:EdmaTCDControl::__anon6
__EDMA_HAL_H__	hal\edma\fsl_edma_hal.h	31;"	d
_edma_status	hal\edma\fsl_edma_hal.h	/^typedef enum _edma_status$/;"	g
_reserved0	hal\edma\fsl_edma_hal.h	/^        uint32_t _reserved0 : 14;$/;"	m	struct:EdmaErrorStatusAll::__anon7
_reserved1	hal\edma\fsl_edma_hal.h	/^        uint32_t _reserved1 : 1;$/;"	m	struct:EdmaErrorStatusAll::__anon7
bandwidthControl	hal\edma\fsl_edma_hal.h	/^        uint16_t bandwidthControl : 2;      \/*!< Bandwidth control configuration. *\/$/;"	m	struct:EdmaTCDControl::__anon6
channelPriorityError	hal\edma\fsl_edma_hal.h	/^        uint32_t channelPriorityError : 1;              \/*!< Channel priority error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
destinationAddressError	hal\edma\fsl_edma_hal.h	/^        uint32_t destinationAddressError : 1;           \/*!< Destination address error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
destinationBusError	hal\edma\fsl_edma_hal.h	/^        uint32_t destinationBusError : 1;               \/*!< Bus error on dest address. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
destinationOffsetError	hal\edma\fsl_edma_hal.h	/^        uint32_t destinationOffsetError : 1;            \/*!< Destination offset error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
disabledDmaRequest	hal\edma\fsl_edma_hal.h	/^        uint16_t disabledDmaRequest : 1;    \/*!< Disabled dma request after major loop complete. *\/$/;"	m	struct:EdmaTCDControl::__anon6
edma_bandwidth_configuration_t	hal\edma\fsl_edma_hal.h	/^} edma_bandwidth_configuration_t;$/;"	t	typeref:enum:EdmaBandwidthConfiguration
edma_channel_priority_t	hal\edma\fsl_edma_hal.h	/^} edma_channel_priority_t;$/;"	t	typeref:enum:EdmaChannelPriority
edma_config_t	hal\edma\fsl_edma_hal.h	/^} edma_config_t;$/;"	t	typeref:struct:EdmaConfiguration
edma_error_status_all_t	hal\edma\fsl_edma_hal.h	/^} edma_error_status_all_t;$/;"	t	typeref:union:EdmaErrorStatusAll
edma_group_priority_t	hal\edma\fsl_edma_hal.h	/^} edma_group_priority_t;$/;"	t	typeref:enum:EdmaGroupPriority
edma_hal_cancel_transfer	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_cancel_transfer(uint32_t instance)$/;"	f
edma_hal_check_dma_request_enable_status	hal\edma\fsl_edma_hal.h	/^static inline bool edma_hal_check_dma_request_enable_status(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_clear_all_channel_done_status	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_all_channel_done_status(uint32_t instance)$/;"	f
edma_hal_clear_all_channel_error_status	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_all_channel_error_status(uint32_t instance)$/;"	f
edma_hal_clear_all_channel_interrupt_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_all_channel_interrupt_request(uint32_t instance)$/;"	f
edma_hal_clear_done_status	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_done_status(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_clear_error_status	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_error_status(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_clear_halt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_halt(uint32_t instance)$/;"	f
edma_hal_clear_interrupt_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_clear_interrupt_request(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_disable_all_channel_dma_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_disable_all_channel_dma_request(uint32_t instance)$/;"	f
edma_hal_disable_all_enabled_error_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_disable_all_enabled_error_interrupt(uint32_t instance)$/;"	f
edma_hal_disable_dma_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_disable_dma_request(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_disable_error_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_disable_error_interrupt(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_enable_all_channel_dma_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_enable_all_channel_dma_request(uint32_t instance)$/;"	f
edma_hal_enable_all_channel_error_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_enable_all_channel_error_interrupt(uint32_t instance)$/;"	f
edma_hal_enable_dma_request	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_enable_dma_request(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_enable_error_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_enable_error_interrupt(uint32_t instance, uint32_t channel)$/;"	f
edma_hal_error_cancel_transfer	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_error_cancel_transfer(uint32_t instance)$/;"	f
edma_hal_get_all_channel_dma_request_status	hal\edma\fsl_edma_hal.h	/^static inline uint32_t edma_hal_get_all_channel_dma_request_status(uint32_t instance)$/;"	f
edma_hal_get_all_channel_error_status	hal\edma\fsl_edma_hal.h	/^static inline uint32_t edma_hal_get_all_channel_error_status(uint32_t instance)$/;"	f
edma_hal_get_all_channel_interrupt_request_status	hal\edma\fsl_edma_hal.h	/^static inline uint32_t edma_hal_get_all_channel_interrupt_request_status(uint32_t instance)$/;"	f
edma_hal_get_error_status	hal\edma\fsl_edma_hal.h	/^static inline uint32_t edma_hal_get_error_status(uint32_t instance)$/;"	f
edma_hal_halt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_halt(uint32_t instance)$/;"	f
edma_hal_htcd_configure_bandwidth	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_bandwidth($/;"	f
edma_hal_htcd_configure_current_majorcount_minorlink_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_current_majorcount_minorlink_disabled($/;"	f
edma_hal_htcd_configure_current_majorcount_minorlink_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_current_majorcount_minorlink_enabled($/;"	f
edma_hal_htcd_configure_current_minor_link_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_current_minor_link_channel($/;"	f
edma_hal_htcd_configure_dest_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_dest_address($/;"	f
edma_hal_htcd_configure_dest_last_adjustment_or_scatter_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_dest_last_adjustment_or_scatter_address($/;"	f
edma_hal_htcd_configure_dest_modulo	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_dest_modulo($/;"	f
edma_hal_htcd_configure_dest_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_dest_offset($/;"	f
edma_hal_htcd_configure_dest_transfersize	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_dest_transfersize($/;"	f
edma_hal_htcd_configure_majorcount_minorlink_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_majorcount_minorlink_disabled($/;"	f
edma_hal_htcd_configure_majorcount_minorlink_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_majorcount_minorlink_enabled($/;"	f
edma_hal_htcd_configure_majorlink_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_majorlink_channel($/;"	f
edma_hal_htcd_configure_minor_link_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_minor_link_channel($/;"	f
edma_hal_htcd_configure_minorloop_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_minorloop_offset($/;"	f
edma_hal_htcd_configure_nbytes_minorloop_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_nbytes_minorloop_disabled($/;"	f
edma_hal_htcd_configure_nbytes_minorloop_enabled_offset_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_nbytes_minorloop_enabled_offset_disabled($/;"	f
edma_hal_htcd_configure_nbytes_minorloop_enabled_offset_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_nbytes_minorloop_enabled_offset_enabled($/;"	f
edma_hal_htcd_configure_source_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_source_address($/;"	f
edma_hal_htcd_configure_source_last_adjustment	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_source_last_adjustment($/;"	f
edma_hal_htcd_configure_source_modulo	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_source_modulo($/;"	f
edma_hal_htcd_configure_source_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_source_offset($/;"	f
edma_hal_htcd_configure_source_transfersize	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_configure_source_transfersize($/;"	f
edma_hal_htcd_get_majorlink_channel	hal\edma\fsl_edma_hal.h	/^static inline uint32_t edma_hal_htcd_get_majorlink_channel( $/;"	f
edma_hal_htcd_is_channel_active	hal\edma\fsl_edma_hal.h	/^static inline bool edma_hal_htcd_is_channel_active($/;"	f
edma_hal_htcd_is_channel_done	hal\edma\fsl_edma_hal.h	/^static inline bool edma_hal_htcd_is_channel_done($/;"	f
edma_hal_htcd_is_gather_scatter_enabled	hal\edma\fsl_edma_hal.h	/^static inline bool edma_hal_htcd_is_gather_scatter_enabled($/;"	f
edma_hal_htcd_set_complete_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_complete_interrupt($/;"	f
edma_hal_htcd_set_current_minor_link	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_current_minor_link($/;"	f
edma_hal_htcd_set_disable_dma_request_after_tcd_done	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_disable_dma_request_after_tcd_done($/;"	f
edma_hal_htcd_set_half_complete_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_half_complete_interrupt($/;"	f
edma_hal_htcd_set_majorlink	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_majorlink(uint32_t instance, uint32_t channel, bool isEnabled)$/;"	f
edma_hal_htcd_set_minor_link	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_minor_link($/;"	f
edma_hal_htcd_set_scatter_gather_process	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_set_scatter_gather_process($/;"	f
edma_hal_htcd_trigger_channel_start	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_htcd_trigger_channel_start($/;"	f
edma_hal_set_asynchronous_request_in_stop_mode	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_asynchronous_request_in_stop_mode($/;"	f
edma_hal_set_channel_preemp_ability	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_channel_preemp_ability($/;"	f
edma_hal_set_channel_preemption_ability	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_channel_preemption_ability(uint32_t instance, uint32_t channel, bool isEnabled)$/;"	f
edma_hal_set_channel_priority	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_channel_priority($/;"	f
edma_hal_set_continuous_mode	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_continuous_mode(uint32_t instance, bool isContinuous)$/;"	f
edma_hal_set_debug_mode	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_debug_mode(uint32_t instance, bool isEnabled)$/;"	f
edma_hal_set_fixed_priority_channel_arbitration	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_fixed_priority_channel_arbitration(uint32_t instance)$/;"	f
edma_hal_set_fixed_priority_group_arbitration	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_fixed_priority_group_arbitration(uint32_t instance)$/;"	f
edma_hal_set_group_priority	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_group_priority(uint32_t instance, edma_group_priority_t groupPriority)$/;"	f
edma_hal_set_halt_on_error	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_halt_on_error(uint32_t instance, bool isHaltOnError)$/;"	f
edma_hal_set_minor_loop_mapping	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_minor_loop_mapping(uint32_t instance, bool isEnabled)$/;"	f
edma_hal_set_roundrobin_channel_arbitration	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_roundrobin_channel_arbitration(uint32_t instance)$/;"	f
edma_hal_set_roundrobin_group_arbitration	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_set_roundrobin_group_arbitration(uint32_t instance)$/;"	f
edma_hal_stcd_configure_bandwidth	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_bandwidth($/;"	f
edma_hal_stcd_configure_current_majorcount_minorlink_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_current_majorcount_minorlink_disabled($/;"	f
edma_hal_stcd_configure_current_majorcount_minorlink_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_current_majorcount_minorlink_enabled($/;"	f
edma_hal_stcd_configure_current_minor_link_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_current_minor_link_channel($/;"	f
edma_hal_stcd_configure_dest_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_dest_address($/;"	f
edma_hal_stcd_configure_dest_last_adjustment_or_scatter_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_dest_last_adjustment_or_scatter_address($/;"	f
edma_hal_stcd_configure_dest_modulo	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_dest_modulo($/;"	f
edma_hal_stcd_configure_dest_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_dest_offset($/;"	f
edma_hal_stcd_configure_dest_transfersize	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_dest_transfersize($/;"	f
edma_hal_stcd_configure_majorcount_minorlink_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_majorcount_minorlink_disabled($/;"	f
edma_hal_stcd_configure_majorcount_minorlink_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_majorcount_minorlink_enabled($/;"	f
edma_hal_stcd_configure_majorlink_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_majorlink_channel($/;"	f
edma_hal_stcd_configure_minor_link_channel	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_minor_link_channel($/;"	f
edma_hal_stcd_configure_minorloop_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_minorloop_offset($/;"	f
edma_hal_stcd_configure_nbytes_minorloop_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_nbytes_minorloop_disabled($/;"	f
edma_hal_stcd_configure_nbytes_minorloop_enabled_offset_disabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_nbytes_minorloop_enabled_offset_disabled($/;"	f
edma_hal_stcd_configure_nbytes_minorloop_enabled_offset_enabled	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_nbytes_minorloop_enabled_offset_enabled($/;"	f
edma_hal_stcd_configure_source_address	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_source_address($/;"	f
edma_hal_stcd_configure_source_last_adjustment	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_source_last_adjustment($/;"	f
edma_hal_stcd_configure_source_modulo	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_source_modulo($/;"	f
edma_hal_stcd_configure_source_offset	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_source_offset($/;"	f
edma_hal_stcd_configure_source_transfersize	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_configure_source_transfersize($/;"	f
edma_hal_stcd_set_complete_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_complete_interrupt($/;"	f
edma_hal_stcd_set_current_minor_link	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_current_minor_link($/;"	f
edma_hal_stcd_set_disable_dma_request_after_tcd_done	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_disable_dma_request_after_tcd_done($/;"	f
edma_hal_stcd_set_half_complete_interrupt	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_half_complete_interrupt($/;"	f
edma_hal_stcd_set_majorlink	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_majorlink(edma_software_tcd_t *stcd, bool isEnabled)$/;"	f
edma_hal_stcd_set_minor_link	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_minor_link($/;"	f
edma_hal_stcd_set_scatter_gather_process	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_set_scatter_gather_process($/;"	f
edma_hal_stcd_trigger_channel_start	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_stcd_trigger_channel_start($/;"	f
edma_hal_trigger_all_channel_start_bit	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_trigger_all_channel_start_bit(uint32_t instance)$/;"	f
edma_hal_trigger_start_bit	hal\edma\fsl_edma_hal.h	/^static inline void edma_hal_trigger_start_bit(uint32_t instance, uint32_t channel)$/;"	f
edma_minorloop_offset_config_t	hal\edma\fsl_edma_hal.h	/^} edma_minorloop_offset_config_t;$/;"	t	typeref:struct:EdmaMinorLoopOffset
edma_modulo_t	hal\edma\fsl_edma_hal.h	/^} edma_modulo_t;$/;"	t	typeref:enum:EdmaModulo
edma_software_tcd_t	hal\edma\fsl_edma_hal.h	/^} edma_software_tcd_t;$/;"	t	typeref:struct:EdmaSoftwareTcd
edma_status_t	hal\edma\fsl_edma_hal.h	/^} edma_status_t;$/;"	t	typeref:enum:_edma_status
edma_tcd_control_t	hal\edma\fsl_edma_hal.h	/^} edma_tcd_control_t;$/;"	t	typeref:union:EdmaTCDControl
edma_transfer_size_t	hal\edma\fsl_edma_hal.h	/^} edma_transfer_size_t;$/;"	t	typeref:enum:EdmaTransferSize
enableMajorLink	hal\edma\fsl_edma_hal.h	/^        uint16_t enableMajorLink : 1;       \/*!< Enabled major link after major loop complete. *\/$/;"	m	struct:EdmaTCDControl::__anon6
enabledScatterGather	hal\edma\fsl_edma_hal.h	/^        uint16_t enabledScatterGather : 1;  \/*!< Enable scatter\/gather processing. *\/$/;"	m	struct:EdmaTCDControl::__anon6
errorChannel	hal\edma\fsl_edma_hal.h	/^        uint32_t errorChannel : 5;                      \/*!< Error channel number of cancelled$/;"	m	struct:EdmaErrorStatusAll::__anon7
groupPriority	hal\edma\fsl_edma_hal.h	/^    edma_group_priority_t groupPriority;$/;"	m	struct:EdmaConfiguration
groupPriorityError	hal\edma\fsl_edma_hal.h	/^        uint32_t groupPriorityError : 1;                \/*!< Group priority error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
halfInterrupt	hal\edma\fsl_edma_hal.h	/^        uint16_t halfInterrupt : 1;         \/*!< Interrupt after half of major loop complete. *\/$/;"	m	struct:EdmaTCDControl::__anon6
isEnableContinuousMode	hal\edma\fsl_edma_hal.h	/^    bool isEnableContinuousMode;        \/*!< Enabled continuous mode. *\/$/;"	m	struct:EdmaConfiguration
isEnableDebug	hal\edma\fsl_edma_hal.h	/^    bool isEnableDebug;                \/*!< Enabled Debug mode. *\/$/;"	m	struct:EdmaConfiguration
isEnableDestMinorloop	hal\edma\fsl_edma_hal.h	/^    bool isEnableDestMinorloop;$/;"	m	struct:EdmaMinorLoopOffset
isEnableGroupRoundrobinArbitration	hal\edma\fsl_edma_hal.h	/^    bool isEnableGroupRoundrobinArbitration;$/;"	m	struct:EdmaConfiguration
isEnableMinorLoopping	hal\edma\fsl_edma_hal.h	/^    bool isEnableMinorLoopping;         \/*!< Enabled minor loop mapping. *\/$/;"	m	struct:EdmaConfiguration
isEnableRoundrobinArbitration	hal\edma\fsl_edma_hal.h	/^    bool isEnableRoundrobinArbitration; \/*!< Enabled roundrobin or fixed priority arbitration. *\/$/;"	m	struct:EdmaConfiguration
isEnableSourceMinorloop	hal\edma\fsl_edma_hal.h	/^    bool isEnableSourceMinorloop;$/;"	m	struct:EdmaMinorLoopOffset
isHaltOnError	hal\edma\fsl_edma_hal.h	/^	bool isHaltOnError;                 \/*!< Halt if error happens. *\/$/;"	m	struct:EdmaConfiguration
kEdmaBandwidthStall4Cycle	hal\edma\fsl_edma_hal.h	/^    kEdmaBandwidthStall4Cycle = 2,  \/*!< eDMA engine stalls for 4 cycles after each r\/w. *\/$/;"	e	enum:EdmaBandwidthConfiguration
kEdmaBandwidthStall8Cycle	hal\edma\fsl_edma_hal.h	/^    kEdmaBandwidthStall8Cycle = 3   \/*!< eDMA engine stalls for 4 cycles after each r\/w. *\/$/;"	e	enum:EdmaBandwidthConfiguration
kEdmaBandwidthStallNone	hal\edma\fsl_edma_hal.h	/^    kEdmaBandwidthStallNone = 0,    \/*!< No eDMA engine stalls. *\/$/;"	e	enum:EdmaBandwidthConfiguration
kEdmaChannelPriority	hal\edma\fsl_edma_hal.h	/^    kEdmaChannelPriority = 16$/;"	e	enum:EdmaChannelPriority
kEdmaGroup0Priority0Group1Priority1	hal\edma\fsl_edma_hal.h	/^    kEdmaGroup0Priority0Group1Priority1,$/;"	e	enum:EdmaGroupPriority
kEdmaGroup0Priority1Group1Priority0	hal\edma\fsl_edma_hal.h	/^    kEdmaGroup0Priority1Group1Priority0$/;"	e	enum:EdmaGroupPriority
kEdmaModulo1024Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo1024Gbytes = 0x1fU$/;"	e	enum:EdmaModulo
kEdmaModulo128Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo128Gbytes = 0x1cU,$/;"	e	enum:EdmaModulo
kEdmaModulo128Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo128Kbytes = 0x12U,$/;"	e	enum:EdmaModulo
kEdmaModulo128bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo128bytes = 0x8U, $/;"	e	enum:EdmaModulo
kEdmaModulo16Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo16Gbytes = 0x19U,$/;"	e	enum:EdmaModulo
kEdmaModulo16bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo16bytes = 0x5U, $/;"	e	enum:EdmaModulo
kEdmaModulo1Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo1Gbytes = 0x15U,$/;"	e	enum:EdmaModulo
kEdmaModulo1Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo1Kbytes = 0xbU,$/;"	e	enum:EdmaModulo
kEdmaModulo1bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo1bytes = 0x1U,$/;"	e	enum:EdmaModulo
kEdmaModulo256Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo256Gbytes = 0x1dU,$/;"	e	enum:EdmaModulo
kEdmaModulo256Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo256Kbytes = 0x13U,$/;"	e	enum:EdmaModulo
kEdmaModulo256bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo256bytes = 0x9U, $/;"	e	enum:EdmaModulo
kEdmaModulo2Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo2Gbytes = 0x16U,$/;"	e	enum:EdmaModulo
kEdmaModulo2Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo2Kbytes = 0xcU,$/;"	e	enum:EdmaModulo
kEdmaModulo2bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo2bytes = 0x2U, $/;"	e	enum:EdmaModulo
kEdmaModulo32Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo32Gbytes = 0x1aU,$/;"	e	enum:EdmaModulo
kEdmaModulo32Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo32Kbytes = 0x10U,$/;"	e	enum:EdmaModulo
kEdmaModulo32bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo32bytes = 0x6U, $/;"	e	enum:EdmaModulo
kEdmaModulo4Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo4Gbytes = 0x17U,$/;"	e	enum:EdmaModulo
kEdmaModulo4Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo4Kbytes = 0xdU,$/;"	e	enum:EdmaModulo
kEdmaModulo4bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo4bytes = 0x3U, $/;"	e	enum:EdmaModulo
kEdmaModulo512Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo512Gbytes = 0x1eU,$/;"	e	enum:EdmaModulo
kEdmaModulo512Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo512Kbytes = 0x14U,$/;"	e	enum:EdmaModulo
kEdmaModulo512bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo512bytes = 0xaU, $/;"	e	enum:EdmaModulo
kEdmaModulo64Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo64Gbytes = 0x1bU,$/;"	e	enum:EdmaModulo
kEdmaModulo64Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo64Kbytes = 0x11U,$/;"	e	enum:EdmaModulo
kEdmaModulo64bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo64bytes = 0x7U, $/;"	e	enum:EdmaModulo
kEdmaModulo8Gbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo8Gbytes = 0x18U,$/;"	e	enum:EdmaModulo
kEdmaModulo8Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo8Kbytes = 0xeU,$/;"	e	enum:EdmaModulo
kEdmaModulo8bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulo8bytes = 0x4U, $/;"	e	enum:EdmaModulo
kEdmaModuloDisable	hal\edma\fsl_edma_hal.h	/^    kEdmaModuloDisable = 0x0U,$/;"	e	enum:EdmaModulo
kEdmaModulol6Kbytes	hal\edma\fsl_edma_hal.h	/^    kEdmaModulol6Kbytes = 0xfU,$/;"	e	enum:EdmaModulo
kEdmaTransferSize16bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaTransferSize16bytes = 0x4U,$/;"	e	enum:EdmaTransferSize
kEdmaTransferSize1bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaTransferSize1bytes = 0x0U,$/;"	e	enum:EdmaTransferSize
kEdmaTransferSize2bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaTransferSize2bytes = 0x1U,$/;"	e	enum:EdmaTransferSize
kEdmaTransferSize32bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaTransferSize32bytes = 0x5U$/;"	e	enum:EdmaTransferSize
kEdmaTransferSize4bytes	hal\edma\fsl_edma_hal.h	/^    kEdmaTransferSize4bytes = 0x2U,$/;"	e	enum:EdmaTransferSize
kStatus_EDMA_Fail	hal\edma\fsl_edma_hal.h	/^    kStatus_EDMA_Fail = 2U              \/*!< Function operation is failed *\/$/;"	e	enum:_edma_status
kStatus_EDMA_InvalidArgument	hal\edma\fsl_edma_hal.h	/^    kStatus_EDMA_InvalidArgument = 1U,  \/*!< Parameter is not available for current configuration *\/$/;"	e	enum:_edma_status
kStatus_EDMA_Success	hal\edma\fsl_edma_hal.h	/^    kStatus_EDMA_Success = 0U,$/;"	e	enum:_edma_status
majorInterrupt	hal\edma\fsl_edma_hal.h	/^        uint16_t majorInterrupt : 1;        \/*!< Interrupt after major loop complete. *\/$/;"	m	struct:EdmaTCDControl::__anon6
majorLinkChannel	hal\edma\fsl_edma_hal.h	/^        uint16_t majorLinkChannel : 4;      \/*!< Major link channel number.*\/$/;"	m	struct:EdmaTCDControl::__anon6
nbyteOrCiterConfigurationError	hal\edma\fsl_edma_hal.h	/^        uint32_t nbyteOrCiterConfigurationError : 1;    \/*!< NBYTES\/CITER configuration error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
offset	hal\edma\fsl_edma_hal.h	/^    uint32_t offset;$/;"	m	struct:EdmaMinorLoopOffset
orOfAllError	hal\edma\fsl_edma_hal.h	/^        uint32_t orOfAllError : 1;                      \/*!< Logical OR of all ERR status bits. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
reserve1	hal\edma\fsl_edma_hal.h	/^        uint16_t reserve1 : 1;$/;"	m	struct:EdmaTCDControl::__anon6
reserve2	hal\edma\fsl_edma_hal.h	/^        uint16_t reserve2 : 1;$/;"	m	struct:EdmaTCDControl::__anon6
reserve3	hal\edma\fsl_edma_hal.h	/^        uint16_t reserve3 : 1;$/;"	m	struct:EdmaTCDControl::__anon6
reserve4	hal\edma\fsl_edma_hal.h	/^        uint16_t reserve4 : 2;$/;"	m	struct:EdmaTCDControl::__anon6
scatterOrGatherConfigurationError	hal\edma\fsl_edma_hal.h	/^        uint32_t scatterOrGatherConfigurationError : 1; \/*!< Error on Scatter\/Gather address. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
sourceAddressError	hal\edma\fsl_edma_hal.h	/^        uint32_t sourceAddressError : 1;                \/*!< Source adderss error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
sourceBusError	hal\edma\fsl_edma_hal.h	/^        uint32_t sourceBusError : 1;                    \/*!< Bus error on Src address. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
sourceOffsetError	hal\edma\fsl_edma_hal.h	/^        uint32_t sourceOffsetError : 1;                 \/*!< Source offset error. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
transferCancelledError	hal\edma\fsl_edma_hal.h	/^        uint32_t transferCancelledError : 1;            \/*!< Transfer cancelled. *\/$/;"	m	struct:EdmaErrorStatusAll::__anon7
FSL_FEATURE_ENET_DMA_BIG_ENDIAN_ONLY	hal\enet\fsl_enet_features.h	35;"	d
FSL_FEATURE_ENET_DMA_BIG_ENDIAN_ONLY	hal\enet\fsl_enet_features.h	40;"	d
FSL_FEATURE_ENET_INTERRUPT_COUNT	hal\enet\fsl_enet_features.h	37;"	d
FSL_FEATURE_ENET_INTERRUPT_COUNT	hal\enet\fsl_enet_features.h	42;"	d
FSL_FEATURE_ENET_PTP_TIMER_CHANNEL_INTERRUPT	hal\enet\fsl_enet_features.h	38;"	d
FSL_FEATURE_ENET_SUPPORT_PTP	hal\enet\fsl_enet_features.h	36;"	d
FSL_FEATURE_ENET_SUPPORT_PTP	hal\enet\fsl_enet_features.h	41;"	d
__FSL_ENET_FEATURES_H__	hal\enet\fsl_enet_features.h	31;"	d
enet_hal_config_ethernet	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_ethernet(uint32_t instance, bool isEnhanced, bool isEnabled)$/;"	f
enet_hal_config_interrupt	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_interrupt(uint32_t instance, uint32_t source, bool isEnabled)$/;"	f
enet_hal_config_rmii	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_rmii(uint32_t instance, enet_config_rmii_t mode, enet_config_speed_t speed, enet_config_duplex_t duplex, bool isRxOnTxDisabled,  bool isLoopEnabled)$/;"	f
enet_hal_config_rx_accelerator	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_rx_accelerator(uint32_t instance, enet_config_rx_accelerator_t *rxCfgPtr)$/;"	f
enet_hal_config_rx_fifo	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_rx_fifo(uint32_t instance,enet_config_rx_fifo_t *thresholdCfg )$/;"	f
enet_hal_config_tx_accelerator	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_tx_accelerator(uint32_t instance, enet_config_tx_accelerator_t *txCfgPtr)$/;"	f
enet_hal_config_tx_fifo	hal\enet\fsl_enet_hal.c	/^void enet_hal_config_tx_fifo(uint32_t instance, enet_config_tx_fifo_t *thresholdCfg)$/;"	f
enet_hal_get_rxbd_control	hal\enet\fsl_enet_hal.c	/^uint16_t enet_hal_get_rxbd_control(void *curBd)$/;"	f
enet_hal_get_rxbd_control_extend	hal\enet\fsl_enet_hal.c	/^bool enet_hal_get_rxbd_control_extend(void *curBd,enet_rx_bd_control_extend_t controlRegion)$/;"	f
enet_hal_get_txbd_control	hal\enet\fsl_enet_hal.c	/^uint16_t enet_hal_get_txbd_control(void *curBd)$/;"	f
enet_hal_get_txbd_control_extend	hal\enet\fsl_enet_hal.c	/^uint16_t enet_hal_get_txbd_control_extend(void *curBd)$/;"	f
enet_hal_get_txbd_timestamp_flag	hal\enet\fsl_enet_hal.c	/^bool enet_hal_get_txbd_timestamp_flag(void *curBd)$/;"	f
enet_hal_init_bd_address	hal\enet\fsl_enet_hal.c	/^void enet_hal_init_bd_address(uint32_t instance, uint32_t rxBdAddr, uint32_t txBdAddr)$/;"	f
enet_hal_init_ptp_timer	hal\enet\fsl_enet_hal.c	/^void enet_hal_init_ptp_timer(uint32_t instance,enet_config_ptp_timer_t *ptpCfgPtr)$/;"	f
enet_hal_init_rxbds	hal\enet\fsl_enet_hal.c	/^void enet_hal_init_rxbds(void *rxBds, uint8_t *buffer, bool isLastBd)$/;"	f
enet_hal_init_txbds	hal\enet\fsl_enet_hal.c	/^void enet_hal_init_txbds(void *txBds, bool isLastBd)$/;"	f
enet_hal_set_group_hashtable	hal\enet\fsl_enet_hal.c	/^void enet_hal_set_group_hashtable(uint32_t instance, uint32_t crcValue, enet_special_address_filter_t mode)$/;"	f
enet_hal_set_individual_hashtable	hal\enet\fsl_enet_hal.c	/^void enet_hal_set_individual_hashtable(uint32_t instance, uint32_t crcValue, enet_special_address_filter_t mode)$/;"	f
enet_hal_set_mac_address	hal\enet\fsl_enet_hal.c	/^void enet_hal_set_mac_address(uint32_t instance, enetMacAddr hwAddr)$/;"	f
enet_hal_set_mii_command	hal\enet\fsl_enet_hal.c	/^void enet_hal_set_mii_command(uint32_t instance, uint32_t phyAddr, uint32_t phyReg, enet_mii_operation_t operation, uint32_t data)$/;"	f
enet_hal_update_rxbds	hal\enet\fsl_enet_hal.c	/^void enet_hal_update_rxbds(void *rxBds, uint8_t *data, bool isbufferUpdate)$/;"	f
enet_hal_update_txbds	hal\enet\fsl_enet_hal.c	/^void enet_hal_update_txbds(void *txBds,uint8_t *buffer, uint16_t length, bool isTxtsCfged)$/;"	f
BSWAP_16	hal\enet\fsl_enet_hal.h	52;"	d
BSWAP_32	hal\enet\fsl_enet_hal.h	53;"	d
HTONL	hal\enet\fsl_enet_hal.h	56;"	d
HTONL	hal\enet\fsl_enet_hal.h	61;"	d
HTONS	hal\enet\fsl_enet_hal.h	55;"	d
HTONS	hal\enet\fsl_enet_hal.h	60;"	d
NTOHL	hal\enet\fsl_enet_hal.h	58;"	d
NTOHL	hal\enet\fsl_enet_hal.h	63;"	d
NTOHS	hal\enet\fsl_enet_hal.h	57;"	d
NTOHS	hal\enet\fsl_enet_hal.h	62;"	d
SYSTEM_LITTLE_ENDIAN	hal\enet\fsl_enet_hal.h	49;"	d
__FSL_ENET_HAL_H__	hal\enet\fsl_enet_hal.h	32;"	d
_enet_config_duplex	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_config_duplex$/;"	g
_enet_config_rmii	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_config_rmii$/;"	g
_enet_config_speed	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_config_speed$/;"	g
_enet_constant_parameter	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_constant_parameter$/;"	g
_enet_interrupt_request	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_interrupt_request$/;"	g
_enet_mii_operation	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_mii_operation$/;"	g
_enet_rx_bd_control_extend	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_rx_bd_control_extend$/;"	g
_enet_rx_bd_control_status	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_rx_bd_control_status$/;"	g
_enet_special_address_filter	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_special_address_filter$/;"	g
_enet_status	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_status$/;"	g
_enet_timer_channel_mode	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_timer_channel_mode$/;"	g
_enet_tx_bd_control_extend	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_tx_bd_control_extend$/;"	g
_enet_tx_bd_control_extend2	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_tx_bd_control_extend2$/;"	g
_enet_tx_bd_control_status	hal\enet\fsl_enet_hal.h	/^typedef enum _enet_tx_bd_control_status$/;"	g
buffer	hal\enet\fsl_enet_hal.h	/^    uint8_t   *buffer;          \/*!< Data buffer pointer*\/$/;"	m	struct:enet_bd_struct
clockIncease	hal\enet\fsl_enet_hal.h	/^    uint32_t clockIncease;      \/*!< Timer increase value each clock period*\/$/;"	m	struct:enet_config_ptp_timer
control	hal\enet\fsl_enet_hal.h	/^    uint16_t  control;          \/*!< Buffer descriptor control   *\/$/;"	m	struct:enet_bd_struct
control	hal\enet\fsl_enet_hal.h	/^    uint16_t  control;          \/*!< Buffer descriptor control*\/$/;"	m	struct:enet_bd_struct
controlExtend0	hal\enet\fsl_enet_hal.h	/^    uint16_t  controlExtend0;   \/*!< Extend buffer descriptor control0*\/$/;"	m	struct:enet_bd_struct
controlExtend1	hal\enet\fsl_enet_hal.h	/^    uint16_t  controlExtend1;   \/*!< Extend buffer descriptor control1*\/$/;"	m	struct:enet_bd_struct
controlExtend2	hal\enet\fsl_enet_hal.h	/^    uint16_t  controlExtend2;   \/*!< Extend buffer descriptor control2*\/$/;"	m	struct:enet_bd_struct
enetMacAddr	hal\enet\fsl_enet_hal.h	/^typedef uint8_t enetMacAddr[kEnetMacAddrLen];$/;"	t
enet_bd_struct	hal\enet\fsl_enet_hal.h	/^typedef struct enet_bd_struct$/;"	s
enet_bd_struct_t	hal\enet\fsl_enet_hal.h	/^}enet_bd_struct_t;$/;"	t	typeref:struct:enet_bd_struct
enet_config_duplex_t	hal\enet\fsl_enet_hal.h	/^} enet_config_duplex_t;$/;"	t	typeref:enum:_enet_config_duplex
enet_config_ptp_timer	hal\enet\fsl_enet_hal.h	/^typedef struct enet_config_ptp_timer$/;"	s
enet_config_ptp_timer_t	hal\enet\fsl_enet_hal.h	/^} enet_config_ptp_timer_t;$/;"	t	typeref:struct:enet_config_ptp_timer
enet_config_rmii_t	hal\enet\fsl_enet_hal.h	/^} enet_config_rmii_t;$/;"	t	typeref:enum:_enet_config_rmii
enet_config_rx_accelerator	hal\enet\fsl_enet_hal.h	/^typedef struct enet_config_rx_accelerator$/;"	s
enet_config_rx_accelerator_t	hal\enet\fsl_enet_hal.h	/^} enet_config_rx_accelerator_t;$/;"	t	typeref:struct:enet_config_rx_accelerator
enet_config_rx_fifo	hal\enet\fsl_enet_hal.h	/^typedef struct enet_config_rx_fifo$/;"	s
enet_config_rx_fifo_t	hal\enet\fsl_enet_hal.h	/^} enet_config_rx_fifo_t;$/;"	t	typeref:struct:enet_config_rx_fifo
enet_config_speed_t	hal\enet\fsl_enet_hal.h	/^} enet_config_speed_t;$/;"	t	typeref:enum:_enet_config_speed
enet_config_tx_accelerator	hal\enet\fsl_enet_hal.h	/^typedef struct enet_config_tx_accelerator$/;"	s
enet_config_tx_accelerator_t	hal\enet\fsl_enet_hal.h	/^} enet_config_tx_accelerator_t;$/;"	t	typeref:struct:enet_config_tx_accelerator
enet_config_tx_fifo	hal\enet\fsl_enet_hal.h	/^typedef struct enet_config_tx_fifo$/;"	s
enet_config_tx_fifo_t	hal\enet\fsl_enet_hal.h	/^} enet_config_tx_fifo_t;$/;"	t	typeref:struct:enet_config_tx_fifo
enet_constant_parameter_t	hal\enet\fsl_enet_hal.h	/^}enet_constant_parameter_t;$/;"	t	typeref:enum:_enet_constant_parameter
enet_hal_active_rxbd	hal\enet\fsl_enet_hal.h	/^ static inline void enet_hal_active_rxbd(uint32_t instance)$/;"	f
enet_hal_active_txbd	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_active_txbd(uint32_t instance)$/;"	f
enet_hal_adjust_ptp_timer	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_adjust_ptp_timer(uint32_t instance, uint32_t increaseCorrection, uint32_t periodCorrection)$/;"	f
enet_hal_clear_interrupt	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_clear_interrupt(uint32_t instance, uint32_t source)$/;"	f
enet_hal_clear_mib	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_clear_mib(uint32_t instance, bool isEnabled)$/;"	f
enet_hal_clear_timer_channel_flag	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_clear_timer_channel_flag(uint32_t instance, uint32_t channel)$/;"	f
enet_hal_clear_txbds	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_clear_txbds(void *CurBd)$/;"	f
enet_hal_config_mib	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_config_mib(uint32_t instance, bool isEnabled)$/;"	f
enet_hal_config_mii	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_config_mii(uint32_t instance, uint32_t miiSpeed, bool isPreambleDisabled)$/;"	f
enet_hal_config_promiscuous	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_config_promiscuous(uint32_t instance, bool isEnabled)$/;"	f
enet_hal_get_bd_buffer	hal\enet\fsl_enet_hal.h	/^static inline uint8_t* enet_hal_get_bd_buffer(void *curBd)$/;"	f
enet_hal_get_bd_length	hal\enet\fsl_enet_hal.h	/^static inline uint16_t enet_hal_get_bd_length(void *curBd)$/;"	f
enet_hal_get_bd_size	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_bd_size(void)$/;"	f
enet_hal_get_bd_timestamp	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_bd_timestamp(void *curBd)$/;"	f
enet_hal_get_current_time	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_current_time(uint32_t instance)$/;"	f
enet_hal_get_interrupt_status	hal\enet\fsl_enet_hal.h	/^static inline bool enet_hal_get_interrupt_status(uint32_t instance, uint32_t source)$/;"	f
enet_hal_get_mib_status	hal\enet\fsl_enet_hal.h	/^static inline bool enet_hal_get_mib_status(uint32_t instance)$/;"	f
enet_hal_get_mii_data	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_mii_data(uint32_t instance)$/;"	f
enet_hal_get_rx_timestamp	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_rx_timestamp(void *curRxBd)$/;"	f
enet_hal_get_timer_channel_status	hal\enet\fsl_enet_hal.h	/^static inline bool enet_hal_get_timer_channel_status(uint32_t instance, uint32_t channel)$/;"	f
enet_hal_get_tx_timestamp	hal\enet\fsl_enet_hal.h	/^static inline uint32_t enet_hal_get_tx_timestamp(uint32_t instance)$/;"	f
enet_hal_init_timer_channel	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_init_timer_channel(uint32_t instance, uint32_t channel, enet_timer_channel_mode_t mode)$/;"	f
enet_hal_is_mii_enabled	hal\enet\fsl_enet_hal.h	/^static inline bool enet_hal_is_mii_enabled(uint32_t instance)$/;"	f
enet_hal_is_reset_completed	hal\enet\fsl_enet_hal.h	/^static inline bool enet_hal_is_reset_completed(uint32_t instance)$/;"	f
enet_hal_reset_ethernet	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_reset_ethernet(uint32_t instance)$/;"	f
enet_hal_restart_ptp_timer	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_restart_ptp_timer(uint32_t instance)$/;"	f
enet_hal_set_current_time	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_set_current_time(uint32_t instance, uint32_t nanSecond)$/;"	f
enet_hal_set_rx_max_size	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_set_rx_max_size(uint32_t instance, uint32_t maxBufferSize, uint32_t maxFrameSize)$/;"	f
enet_hal_set_timer_capture	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_set_timer_capture(uint32_t instance)$/;"	f
enet_hal_set_timer_channel_compare	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_set_timer_channel_compare(uint32_t instance, uint32_t channel, uint32_t compareValue)$/;"	f
enet_hal_start_ptp_timer	hal\enet\fsl_enet_hal.h	/^static inline void enet_hal_start_ptp_timer(uint32_t instance, uint32_t isEnabled)$/;"	f
enet_interrupt_request_t	hal\enet\fsl_enet_hal.h	/^} enet_interrupt_request_t;$/;"	t	typeref:enum:_enet_interrupt_request
enet_mii_operation_t	hal\enet\fsl_enet_hal.h	/^}enet_mii_operation_t;$/;"	t	typeref:enum:_enet_mii_operation
enet_rx_bd_control_extend_t	hal\enet\fsl_enet_hal.h	/^} enet_rx_bd_control_extend_t;$/;"	t	typeref:enum:_enet_rx_bd_control_extend
enet_rx_bd_control_status_t	hal\enet\fsl_enet_hal.h	/^} enet_rx_bd_control_status_t;$/;"	t	typeref:enum:_enet_rx_bd_control_status
enet_special_address_filter_t	hal\enet\fsl_enet_hal.h	/^} enet_special_address_filter_t;$/;"	t	typeref:enum:_enet_special_address_filter
enet_status_t	hal\enet\fsl_enet_hal.h	/^}enet_status_t;$/;"	t	typeref:enum:_enet_status
enet_timer_channel_mode_t	hal\enet\fsl_enet_hal.h	/^} enet_timer_channel_mode_t;$/;"	t	typeref:enum:_enet_timer_channel_mode
enet_tx_bd_control_extend2_t	hal\enet\fsl_enet_hal.h	/^}enet_tx_bd_control_extend2_t;$/;"	t	typeref:enum:_enet_tx_bd_control_extend2
enet_tx_bd_control_extend_t	hal\enet\fsl_enet_hal.h	/^} enet_tx_bd_control_extend_t;$/;"	t	typeref:enum:_enet_tx_bd_control_extend
enet_tx_bd_control_status_t	hal\enet\fsl_enet_hal.h	/^} enet_tx_bd_control_status_t;$/;"	t	typeref:enum:_enet_tx_bd_control_status
headerLength	hal\enet\fsl_enet_hal.h	/^    uint8_t   headerLength;     \/*!< Header length*\/$/;"	m	struct:enet_bd_struct
isIpCheckEnabled	hal\enet\fsl_enet_hal.h	/^    bool  isIpCheckEnabled;         \/*!< Insert ip header checksum *\/$/;"	m	struct:enet_config_tx_accelerator
isIpcheckEnabled	hal\enet\fsl_enet_hal.h	/^    bool isIpcheckEnabled;        \/*!< Discard with wrong ip header checksum *\/$/;"	m	struct:enet_config_rx_accelerator
isMacCheckEnabled	hal\enet\fsl_enet_hal.h	/^    bool isMacCheckEnabled;       \/*!< Discard with mac layer errors*\/$/;"	m	struct:enet_config_rx_accelerator
isPadRemoveEnabled	hal\enet\fsl_enet_hal.h	/^    bool isPadRemoveEnabled;      \/*!< Padding removal for short ip frames*\/$/;"	m	struct:enet_config_rx_accelerator
isProtocolCheckEnabled	hal\enet\fsl_enet_hal.h	/^    bool  isProtocolCheckEnabled;   \/*!< Insert protocol checksum*\/$/;"	m	struct:enet_config_tx_accelerator
isProtocolCheckEnabled	hal\enet\fsl_enet_hal.h	/^    bool isProtocolCheckEnabled;  \/*!< Discard with wrong protocol checksum*\/$/;"	m	struct:enet_config_rx_accelerator
isShift16Enabled	hal\enet\fsl_enet_hal.h	/^    bool  isShift16Enabled;         \/*!< Tx fifo shift-16*\/$/;"	m	struct:enet_config_tx_accelerator
isShift16Enabled	hal\enet\fsl_enet_hal.h	/^    bool isShift16Enabled;        \/*!< Rx fifo shift-16*\/$/;"	m	struct:enet_config_rx_accelerator
isSlaveEnabled	hal\enet\fsl_enet_hal.h	/^    bool isSlaveEnabled;        \/*!< Master or slave ptp timer*\/$/;"	m	struct:enet_config_ptp_timer
isStoreForwardEnabled	hal\enet\fsl_enet_hal.h	/^    bool isStoreForwardEnabled;   \/*!< Transmit fifo store and forward *\/$/;"	m	struct:enet_config_tx_fifo
kEnetAllInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetAllInterrupt = 0xFFFFFFFF     \/*!< All interrupt*\/$/;"	e	enum:_enet_interrupt_request
kEnetBabrInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetBabrInterrupt = 0x40000000,   \/*!< BABR interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetBabtInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetBabtInterrupt = 0x20000000,   \/*!< BABT interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetCfgFullDuplex	hal\enet\fsl_enet_hal.h	/^    kEnetCfgFullDuplex = 1  \/*!< Full duplex mode*\/$/;"	e	enum:_enet_config_duplex
kEnetCfgHalfDuplex	hal\enet\fsl_enet_hal.h	/^    kEnetCfgHalfDuplex = 0, \/*!< Half duplex mode*\/$/;"	e	enum:_enet_config_duplex
kEnetCfgMii	hal\enet\fsl_enet_hal.h	/^    kEnetCfgMii = 0,   \/*!< Mii mode for data interface*\/$/;"	e	enum:_enet_config_rmii
kEnetCfgRmii	hal\enet\fsl_enet_hal.h	/^    kEnetCfgRmii = 1   \/*!< RMii mode for data interface*\/$/;"	e	enum:_enet_config_rmii
kEnetCfgSpeed100M	hal\enet\fsl_enet_hal.h	/^    kEnetCfgSpeed100M = 0,  \/*!< Speed 100M mode*\/$/;"	e	enum:_enet_config_speed
kEnetCfgSpeed10M	hal\enet\fsl_enet_hal.h	/^    kEnetCfgSpeed10M = 1    \/*!< Speed 10M mode*\/$/;"	e	enum:_enet_config_speed
kEnetChannelBothCapture	hal\enet\fsl_enet_hal.h	/^    kEnetChannelBothCapture = 3,     \/*!< Input capture on both edges*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelClearCompare	hal\enet\fsl_enet_hal.h	/^    kEnetChannelClearCompare = 6,    \/*!< Clear output on compare*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelClearCompareSetOverflow	hal\enet\fsl_enet_hal.h	/^    kEnetChannelClearCompareSetOverflow = 8, \/*!< Clear output on compare, set output on overflow*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelDisable	hal\enet\fsl_enet_hal.h	/^    kEnetChannelDisable = 0,         \/*!< Disable timer channel*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelFallingCapture	hal\enet\fsl_enet_hal.h	/^    kEnetChannelFallingCapture = 2,  \/*!< Input capture on falling edge*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelRisingCapture	hal\enet\fsl_enet_hal.h	/^    kEnetChannelRisingCapture = 1,   \/*!< Input capture on rising edge*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelSetCompare	hal\enet\fsl_enet_hal.h	/^    kEnetChannelSetCompare = 7,      \/*!< Set output on compare*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelSetCompareClearOverflow	hal\enet\fsl_enet_hal.h	/^    kEnetChannelSetCompareClearOverflow = 9 \/*!< Set output on compare,clear output on overflow*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelSoftCompare	hal\enet\fsl_enet_hal.h	/^    kEnetChannelSoftCompare = 4,     \/*!< Output compare software only*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetChannelToggleCompare	hal\enet\fsl_enet_hal.h	/^    kEnetChannelToggleCompare = 5,   \/*!< Toggle output on compare*\/$/;"	e	enum:_enet_timer_channel_mode
kEnetEBERInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetEBERInterrupt = 0x0400000,    \/*!< EBERR interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetGraInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetGraInterrupt = 0x10000000,    \/*!< GRA interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetHashValMask	hal\enet\fsl_enet_hal.h	/^    kEnetHashValMask = 0x1f,   \/*!< enet hash value mask*\/$/;"	e	enum:_enet_constant_parameter
kEnetLcInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetLcInterrupt = 0x0200000,      \/*!< LC interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetMacAddrLen	hal\enet\fsl_enet_hal.h	/^    kEnetMacAddrLen = 6,       \/*!< enet mac address length*\/$/;"	e	enum:_enet_constant_parameter
kEnetMiiInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetMiiInterrupt = 0x0800000,     \/*!< MII interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetPlrInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetPlrInterrupt = 0x0040000,     \/*!< PLR interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetReadNoCompliant	hal\enet\fsl_enet_hal.h	/^    kEnetReadNoCompliant = 3   \/*!< Read frame operation, but not MII compliant*\/$/;"	e	enum:_enet_mii_operation
kEnetReadValidFrame	hal\enet\fsl_enet_hal.h	/^    kEnetReadValidFrame = 2,   \/*!< Read frame operation for a valid MII management frame.*\/$/;"	e	enum:_enet_mii_operation
kEnetRlInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetRlInterrupt = 0x0100000,      \/*!< RL interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetRxBdBroadCast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdBroadCast = 0x0080,       \/*!< Broadcast *\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdBroadCast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdBroadCast = 0x8000,       \/*!< Broadcast *\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdCollision	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCollision = 0x0002,            \/*!< Bd collision*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdCollision	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCollision = 0x0200,            \/*!< Bd collision*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdCrc	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCrc = 0x0004,             \/*!< Receive crc error*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdCrc	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCrc = 0x0400,             \/*!< Receive crc error*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdCtlJudge1	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCtlJudge1 = 0x0080,\/*!< enet receive buffer descriptor control judge value1*\/$/;"	e	enum:_enet_constant_parameter
kEnetRxBdCtlJudge2	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdCtlJudge2 = 0x8000 \/*!< enet receive buffer descriptor control judge value2*\/$/;"	e	enum:_enet_constant_parameter
kEnetRxBdEmpty	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdEmpty = 0x0080,           \/*!< Empty bit*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdEmpty	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdEmpty = 0x8000,           \/*!< Empty bit*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdIntrrupt	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIntrrupt = 0x0080,             \/*!< Bd interrupt*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIntrrupt	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIntrrupt = 0x8000              \/*!< bd interrupt*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpHeaderChecksumErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpHeaderChecksumErr = 0x0020,  \/*!< Ip header checksum error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpHeaderChecksumErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpHeaderChecksumErr = 0x2000,  \/*!< ip header checksum error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpv4	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpv4 = 0x0001,                 \/*!< Ipv4 frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpv4	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpv4 = 0x0100,                 \/*!< Ipv4 frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpv6	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpv6 = 0x0002,                 \/*!< Ipv6 frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdIpv6	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdIpv6 = 0x0200,                 \/*!< Ipv6 frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdLast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdLast = 0x0008,            \/*!< last bd in the frame*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdLast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdLast = 0x0800,            \/*!< Last bd in the frame*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdLengthViolation	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdLengthViolation = 0x0020, \/*!< Receive length violation*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdLengthViolation	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdLengthViolation = 0x2000, \/*!< Receive length violation*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdMacErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMacErr = 0x0080,               \/*!< Mac error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdMacErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMacErr = 0x8000                \/*!< Mac error *\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdMiss	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMiss = 0x0001             \/*!< receive for promiscuous mode*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdMiss	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMiss = 0x0100,            \/*!< Receive for promiscuous mode*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdMultiCast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMultiCast = 0x0040,       \/*!< Multicast*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdMultiCast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdMultiCast = 0x4000,       \/*!< Multicast*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdNoOctet	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdNoOctet = 0x0010,         \/*!< Receive non-octet aligned frame*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdNoOctet	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdNoOctet = 0x1000,         \/*!< Receive non-octet aligned frame*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdOverRun	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdOverRun = 0x0002,         \/*!< Receive FIFO overrun*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdOverRun	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdOverRun = 0x0200,         \/*!< Receive FIFO overrun*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdPhyErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdPhyErr = 0x0004,               \/*!< Phy error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdPhyErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdPhyErr = 0x0400,               \/*!< Phy error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdProtocolChecksumErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdProtocolChecksumErr = 0x0010,  \/*!< Protocol checksum error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdProtocolChecksumErr	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdProtocolChecksumErr = 0x1000,  \/*!< protocol checksum error*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdRxSoftOwner1	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdRxSoftOwner1 = 0x0040,    \/*!< Receive software owner*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdRxSoftOwner1	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdRxSoftOwner1 = 0x4000,    \/*!< Receive software owner*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdRxSoftOwner2	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdRxSoftOwner2 = 0x0010,    \/*!< receive software owner*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdRxSoftOwner2	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdRxSoftOwner2 = 0x1000,    \/*!< Receive software owner*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdTrunc	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdTrunc = 0x0001            \/*!< Frame is truncated    *\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdTrunc	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdTrunc = 0x0100,           \/*!< Frame is truncated *\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdUnicast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdUnicast = 0x0001,              \/*!< Unicast frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdUnicast	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdUnicast = 0x0100,              \/*!< Unicast frame*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdVlan	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdVlan = 0x0004,                 \/*!< Vlan*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdVlan	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdVlan = 0x0400,                 \/*!< Vlan*\/$/;"	e	enum:_enet_rx_bd_control_extend
kEnetRxBdWrap	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdWrap = 0x0020,            \/*!< Update buffer descriptor*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxBdWrap	hal\enet\fsl_enet_hal.h	/^    kEnetRxBdWrap = 0x2000,            \/*!< Update buffer descriptor*\/$/;"	e	enum:_enet_rx_bd_control_status
kEnetRxByteInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetRxByteInterrupt = 0x1000000,  \/*!< RXBYTE interrupt source *\/$/;"	e	enum:_enet_interrupt_request
kEnetRxFrameInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetRxFrameInterrupt = 0x2000000, \/*!< RXFRAME interrupt source *\/$/;"	e	enum:_enet_interrupt_request
kEnetSpecialAddressDisable	hal\enet\fsl_enet_hal.h	/^    kEnetSpecialAddressDisable = 2  \/*!< Disable special address filter*\/$/;"	e	enum:_enet_special_address_filter
kEnetSpecialAddressEnable	hal\enet\fsl_enet_hal.h	/^    kEnetSpecialAddressEnable = 1,  \/*!< Enbale special address filter*\/$/;"	e	enum:_enet_special_address_filter
kEnetSpecialAddressInit	hal\enet\fsl_enet_hal.h	/^    kEnetSpecialAddressInit= 0,     \/*!< Initialize special address filter *\/$/;"	e	enum:_enet_special_address_filter
kEnetTsAvailInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTsAvailInterrupt = 0x0010000, \/*!< TS AVAIL interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetTsTimerInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTsTimerInterrupt = 0x0008000, \/*!< TS WRAP interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetTxBdExcessCollisionErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdExcessCollisionErr = 0x0010,    \/*!<  Excess collision error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdExcessCollisionErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdExcessCollisionErr = 0x1000,   \/*!<  Excess collision error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdLast	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdLast = 0x0008,          \/*!<  Last bd in the frame*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdLast	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdLast = 0x0800,          \/*!<  Last bd in the frame*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdLatecollisionErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdLatecollisionErr = 0x0004,      \/*!<  Late collision error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdLatecollisionErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdLatecollisionErr = 0x0400,     \/*!<  Late collision error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdOverFlowErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdOverFlowErr = 0x0002,           \/*!<  Overflow error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdOverFlowErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdOverFlowErr = 0x0200,          \/*!<  Overflow error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdReady	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdReady = 0x0080,         \/*!<  Ready bit*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdReady	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdReady = 0x8000,         \/*!<  Ready bit*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTimeStamp	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTimeStamp = 0x0020    \/*!< Transmit timesstamp flag *\/$/;"	e	enum:_enet_tx_bd_control_extend2
kEnetTxBdTimeStamp	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTimeStamp = 0x2000    \/*!< Transmit timesstamp flag *\/$/;"	e	enum:_enet_tx_bd_control_extend2
kEnetTxBdTransmitCrc	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTransmitCrc = 0x0004    \/*!<  Receive for transmit CRC*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTransmitCrc	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTransmitCrc = 0x0400    \/*!<  Receive for transmit CRC   *\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTxErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxErr = 0x0080,                 \/*!<  Transmit error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdTxErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxErr = 0x8000,                \/*!<  Transmit error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdTxFrameErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxFrameErr = 0x0008,            \/*!<  Frame error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdTxFrameErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxFrameErr = 0x0800,           \/*!<  Frame error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdTxInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxInterrupt = 0x0040, \/*!< Transmit interrupt*\/$/;"	e	enum:_enet_tx_bd_control_extend2
kEnetTxBdTxInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxInterrupt = 0x4000, \/*!< Transmit interrupt*\/$/;"	e	enum:_enet_tx_bd_control_extend2
kEnetTxBdTxSoftOwner1	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxSoftOwner1 = 0x0040,  \/*!<  Transmit software owner*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTxSoftOwner1	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxSoftOwner1 = 0x4000,  \/*!<  Transmit software owner*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTxSoftOwner2	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxSoftOwner2 = 0x0010,  \/*!<  Transmit software owner*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTxSoftOwner2	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxSoftOwner2 = 0x1000,  \/*!<  Transmit software owner*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdTxUnderFlowErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxUnderFlowErr = 0x0020,        \/*!<  Underflow error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdTxUnderFlowErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdTxUnderFlowErr = 0x2000,       \/*!<  Underflow error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxBdWrap	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdWrap = 0x0020,          \/*!<  Wrap buffer descriptor*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxBdWrap	hal\enet\fsl_enet_hal.h	/^    kEnetTxBdWrap = 0x2000,          \/*!<  Wrap buffer descriptor*\/$/;"	e	enum:_enet_tx_bd_control_status
kEnetTxByteInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTxByteInterrupt = 0x4000000,  \/*!< TXBYTE interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetTxFrameInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetTxFrameInterrupt = 0x8000000, \/*!< TXFRAME interrupt source *\/$/;"	e	enum:_enet_interrupt_request
kEnetTxTimestampErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxTimestampErr = 0x0001             \/*!<  Timestamp error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetTxTimestampErr	hal\enet\fsl_enet_hal.h	/^    kEnetTxTimestampErr = 0x0100            \/*!<  Timestamp error*\/$/;"	e	enum:_enet_tx_bd_control_extend
kEnetUnInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetUnInterrupt = 0x0080000,      \/*!< UN interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetWakeupInterrupt	hal\enet\fsl_enet_hal.h	/^    kEnetWakeupInterrupt = 0x0020000,  \/*!< WAKEUP interrupt source*\/$/;"	e	enum:_enet_interrupt_request
kEnetWriteNoCompliant	hal\enet\fsl_enet_hal.h	/^    kEnetWriteNoCompliant = 0, \/*!< Write frame operation, but not MII compliant.*\/$/;"	e	enum:_enet_mii_operation
kEnetWriteValidFrame	hal\enet\fsl_enet_hal.h	/^    kEnetWriteValidFrame = 1,  \/*!< Write frame operation for a valid MII management frame*\/$/;"	e	enum:_enet_mii_operation
kStatus_ENET_AlreadyAddedMulticast	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_AlreadyAddedMulticast \/*!< Have Already added to multicast group*\/$/;"	e	enum:_enet_status
kStatus_ENET_GetClockFreqFail	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_GetClockFreqFail,   \/*!< Get clock frequency failure*\/$/;"	e	enum:_enet_status
kStatus_ENET_Initialized	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Initialized,        \/*!< ENET device already initialized*\/$/;"	e	enum:_enet_status
kStatus_ENET_InvalidInput	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_InvalidInput,       \/*!< Invalid enet input parameter *\/$/;"	e	enum:_enet_status
kStatus_ENET_LargeBufferFull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_LargeBufferFull,    \/*!< Receive large buffer full*\/$/;"	e	enum:_enet_status
kStatus_ENET_Layer2BufferFull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Layer2BufferFull,   \/*!< Layer2 packet buffer full*\/$/;"	e	enum:_enet_status
kStatus_ENET_Layer2OverLarge	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Layer2OverLarge,    \/*!< Layer2 packet length over large*\/$/;"	e	enum:_enet_status
kStatus_ENET_Layer2QueueNull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Layer2QueueNull,    \/*!< NULL L2 ptp buffer queue pointer*\/$/;"	e	enum:_enet_status
kStatus_ENET_MemoryAllocateFail	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_MemoryAllocateFail, \/*!< Memory allocate failure*\/$/;"	e	enum:_enet_status
kStatus_ENET_Miiuninitialized	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Miiuninitialized,   \/*!< MII uninitialized*\/$/;"	e	enum:_enet_status
kStatus_ENET_MulticastPointerNull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_MulticastPointerNull, \/*!< Null multicast group pointer*\/$/;"	e	enum:_enet_status
kStatus_ENET_NoRxBufferLeft	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_NoRxBufferLeft,       \/*!< No more receive buffer left*\/$/;"	e	enum:_enet_status
kStatus_ENET_PtpringBufferEmpty	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_PtpringBufferEmpty, \/*!< Ptp ring buffer empty*\/$/;"	e	enum:_enet_status
kStatus_ENET_PtpringBufferFull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_PtpringBufferFull,  \/*!< Ptp ring buffer full*\/$/;"	e	enum:_enet_status
kStatus_ENET_RxBdFull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_RxBdFull,           \/*!< Receive buffer descriptor full*\/$/;"	e	enum:_enet_status
kStatus_ENET_RxbdEmpty	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_RxbdEmpty,          \/*!< Receive buffer descriptor empty*\/$/;"	e	enum:_enet_status
kStatus_ENET_RxbdError	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_RxbdError,          \/*!< Receive buffer descriptor error*\/$/;"	e	enum:_enet_status
kStatus_ENET_RxbdInvalid	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_RxbdInvalid,        \/*!< Receive buffer descriptor invalid*\/$/;"	e	enum:_enet_status
kStatus_ENET_RxbdTrunc	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_RxbdTrunc,          \/*!< Receive buffer descriptor truncate*\/$/;"	e	enum:_enet_status
kStatus_ENET_SmallBdSize	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_SmallBdSize,        \/*!< Small receive buffer size*\/$/;"	e	enum:_enet_status
kStatus_ENET_Success	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_Success = 0,$/;"	e	enum:_enet_status
kStatus_ENET_TimeOut	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_TimeOut,            \/*!< ENET Timeout*\/$/;"	e	enum:_enet_status
kStatus_ENET_TxBufferNull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_TxBufferNull,       \/*!< Transmit data buffer Null*\/$/;"	e	enum:_enet_status
kStatus_ENET_TxbdFull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_TxbdFull,           \/*!< Transmit buffer descriptor full*\/$/;"	e	enum:_enet_status
kStatus_ENET_TxbdNull	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_TxbdNull,           \/*!< Transmit buffer descriptor Null*\/$/;"	e	enum:_enet_status
kStatus_ENET_UnknownCommand	hal\enet\fsl_enet_hal.h	/^    kStatus_ENET_UnknownCommand,     \/*!< Invalid ENET ptp ioctl command*\/$/;"	e	enum:_enet_status
length	hal\enet\fsl_enet_hal.h	/^    uint16_t   length;          \/*!< Buffer descriptor data length*\/$/;"	m	struct:enet_bd_struct
length	hal\enet\fsl_enet_hal.h	/^    uint16_t  length;           \/*!< Buffer descriptor data length*\/$/;"	m	struct:enet_bd_struct
payloadCheckSum	hal\enet\fsl_enet_hal.h	/^    uint16_t  payloadCheckSum;  \/*!< Internal payload checksum*\/$/;"	m	struct:enet_bd_struct
period	hal\enet\fsl_enet_hal.h	/^    uint32_t period;            \/*!< Timer period for generate interrupt event  *\/$/;"	m	struct:enet_config_ptp_timer
protocalTyte	hal\enet\fsl_enet_hal.h	/^    uint8_t   protocalTyte;     \/*!< Protocal type*\/$/;"	m	struct:enet_bd_struct
reserved0	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved0;  $/;"	m	struct:enet_bd_struct
reserved0	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved0;$/;"	m	struct:enet_bd_struct
reserved1	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved1;$/;"	m	struct:enet_bd_struct
reserved2	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved2;$/;"	m	struct:enet_bd_struct
reserved3	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved3;$/;"	m	struct:enet_bd_struct
reserved4	hal\enet\fsl_enet_hal.h	/^    uint16_t  reserved4;$/;"	m	struct:enet_bd_struct
rxAlmostEmpty	hal\enet\fsl_enet_hal.h	/^    uint8_t rxAlmostEmpty;    \/*!< Receive fifo section almost empty threshold*\/$/;"	m	struct:enet_config_rx_fifo
rxAlmostFull	hal\enet\fsl_enet_hal.h	/^    uint8_t rxAlmostFull;     \/*!< Receive fifo section almost full threshold*\/$/;"	m	struct:enet_config_rx_fifo
rxEmpty	hal\enet\fsl_enet_hal.h	/^    uint8_t rxEmpty;          \/*!< Receive fifo section empty threshold*\/$/;"	m	struct:enet_config_rx_fifo
rxFull	hal\enet\fsl_enet_hal.h	/^    uint8_t rxFull;           \/*!< Receive fifo section full threshold*\/$/;"	m	struct:enet_config_rx_fifo
timestamp	hal\enet\fsl_enet_hal.h	/^    uint32_t  timestamp;        \/*!< Timestamp *\/$/;"	m	struct:enet_bd_struct
timestamp	hal\enet\fsl_enet_hal.h	/^    uint32_t  timestamp;        \/*!< Timestamp pointer*\/$/;"	m	struct:enet_bd_struct
txAlmostEmpty	hal\enet\fsl_enet_hal.h	/^    uint8_t txAlmostEmpty;        \/*!< Transmit fifo section almost empty threshold*\/$/;"	m	struct:enet_config_tx_fifo
txAlmostFull	hal\enet\fsl_enet_hal.h	/^    uint8_t txAlmostFull;         \/*!< Transmit fifo section almost full threshold*\/$/;"	m	struct:enet_config_tx_fifo
txEmpty	hal\enet\fsl_enet_hal.h	/^    uint8_t txEmpty;              \/*!< Transmit fifo section empty threshold*\/$/;"	m	struct:enet_config_tx_fifo
txFifoWrite	hal\enet\fsl_enet_hal.h	/^    uint8_t txFifoWrite;          \/*!< Transmit fifo write *\/$/;"	m	struct:enet_config_tx_fifo
FSL_FEATURE_FTM_BUS_CLOCK	hal\flextimer\fsl_ftm_features.h	34;"	d
FSL_FEATURE_FTM_BUS_CLOCK	hal\flextimer\fsl_ftm_features.h	37;"	d
FSL_FEATURE_FTM_BUS_CLOCK	hal\flextimer\fsl_ftm_features.h	39;"	d
__FSL_FTM_FEATURES_H__	hal\flextimer\fsl_ftm_features.h	31;"	d
ftm_hal_disable_pwm_mode	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_disable_pwm_mode(uint8_t instance, ftm_config_t *config)$/;"	f
ftm_hal_enable_channel_trigger	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_enable_channel_trigger(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_pwm_mode	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_enable_pwm_mode(uint8_t instance, ftm_config_t *config)$/;"	f
ftm_hal_init	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_init(uint8_t instance, ftm_config_t *config)$/;"	f
ftm_hal_reset	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_reset(uint8_t instance)$/;"	f
ftm_hal_set_channel_input_capture_filter	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_set_channel_input_capture_filter(uint8_t instance, uint8_t channel, uint8_t val)$/;"	f
ftm_hal_set_hardware_trigger	hal\flextimer\fsl_ftm_hal.c	/^void ftm_hal_set_hardware_trigger(uint8_t instance, uint8_t trigger_num, bool enable)$/;"	f
FTMConfig	hal\flextimer\fsl_ftm_hal.h	/^typedef struct FTMConfig {$/;"	s
FTM_COMBINE_CHAN_CTRL_WIDTH	hal\flextimer\fsl_ftm_hal.h	57;"	d
HW_CHAN0	hal\flextimer\fsl_ftm_hal.h	48;"	d
HW_CHAN1	hal\flextimer\fsl_ftm_hal.h	49;"	d
HW_CHAN2	hal\flextimer\fsl_ftm_hal.h	50;"	d
HW_CHAN3	hal\flextimer\fsl_ftm_hal.h	51;"	d
HW_CHAN4	hal\flextimer\fsl_ftm_hal.h	52;"	d
HW_CHAN5	hal\flextimer\fsl_ftm_hal.h	53;"	d
HW_CHAN6	hal\flextimer\fsl_ftm_hal.h	54;"	d
HW_CHAN7	hal\flextimer\fsl_ftm_hal.h	55;"	d
HW_FTM_CHANNEL_COUNT	hal\flextimer\fsl_ftm_hal.h	46;"	d
HW_FTM_CHANNEL_PAIR_COUNT	hal\flextimer\fsl_ftm_hal.h	47;"	d
__FSL_FTM_HAL_H__	hal\flextimer\fsl_ftm_hal.h	31;"	d
_ftm_clock_ps	hal\flextimer\fsl_ftm_hal.h	/^typedef enum _ftm_clock_ps$/;"	g
_ftm_clock_source	hal\flextimer\fsl_ftm_hal.h	/^typedef enum _ftm_clock_source$/;"	g
_ftm_config_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef enum _ftm_config_mode_t$/;"	g
_ftm_counting_mode	hal\flextimer\fsl_ftm_hal.h	/^typedef enum _ftm_counting_mode$/;"	g
_ftm_deadtime_ps	hal\flextimer\fsl_ftm_hal.h	/^typedef enum _ftm_deadtime_ps$/;"	g
_ftm_dual_capture_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef enum _ftm_dual_capture_edge_mode_t$/;"	g
_ftm_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef union _ftm_edge_mode_t$/;"	u
_ftm_input_capture_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef enum _ftm_input_capture_edge_mode_t$/;"	g
_ftm_output_compare_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef enum _ftm_output_compare_edge_mode_t$/;"	g
_ftm_phase_t	hal\flextimer\fsl_ftm_hal.h	/^typedef enum _ftm_phase_t$/;"	g
_ftm_pwm_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ typedef enum _ftm_pwm_edge_mode_t$/;"	g
channel	hal\flextimer\fsl_ftm_hal.h	/^  uint8_t             channel;   \/*channle or channel pair in combine mode*\/$/;"	m	struct:FTMConfig
edge_mode	hal\flextimer\fsl_ftm_hal.h	/^  ftm_edge_mode_t     edge_mode;$/;"	m	struct:FTMConfig
ftm_clock_ps_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_clock_ps_t;$/;"	t	typeref:enum:_ftm_clock_ps
ftm_clock_source_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_clock_source_t;$/;"	t	typeref:enum:_ftm_clock_source
ftm_config_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_config_mode_t;$/;"	t	typeref:enum:_ftm_config_mode_t
ftm_config_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_config_t;$/;"	t	typeref:struct:FTMConfig
ftm_counting_mode_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_counting_mode_t;$/;"	t	typeref:enum:_ftm_counting_mode
ftm_deadtime_ps_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_deadtime_ps_t;$/;"	t	typeref:enum:_ftm_deadtime_ps
ftm_dual_capture_edge_mode	hal\flextimer\fsl_ftm_hal.h	/^    ftm_dual_capture_edge_mode_t   ftm_dual_capture_edge_mode;$/;"	m	union:_ftm_edge_mode_t
ftm_dual_capture_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_dual_capture_edge_mode_t;$/;"	t	typeref:enum:_ftm_dual_capture_edge_mode_t
ftm_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_edge_mode_t;$/;"	t	typeref:union:_ftm_edge_mode_t
ftm_hal_clear_channel_event_status	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_clear_channel_event_status(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_disable_channel_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_disable_channel_interrupt(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_disable_fault_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_disable_fault_interrupt(uint8_t instance)$/;"	f
ftm_hal_disable_timer_overflow_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_disable_timer_overflow_interrupt(uint8_t instance)$/;"	f
ftm_hal_enable_capture_test	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_capture_test(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_channel_fault_input	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channel_fault_input(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_channel_fault_input_filter	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channel_fault_input_filter(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_channel_init_output	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channel_init_output(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_channel_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channel_interrupt(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_enable_channel_software_ctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channel_software_ctrl(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_channle_dma	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_channle_dma(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_cntin_sync_with_rising_edge	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_cntin_sync_with_rising_edge(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_count_reinit_sync	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_count_reinit_sync(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_dual_capture	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_capture(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_combine	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_combine(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_comp	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_comp(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_deadtime	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_deadtime(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_decap	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_decap(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_fault	hal\flextimer\fsl_ftm_hal.h	/^static inline  void ftm_hal_enable_dual_channel_fault(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_dual_channel_invert	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_invert(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_dual_channel_pwm_sync	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_dual_channel_pwm_sync(uint8_t instance, uint8_t channel, bool enable)$/;"	f
ftm_hal_enable_enhanced_pwm_sync_mdoe	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_enhanced_pwm_sync_mdoe(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_fault_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_fault_interrupt(uint8_t instance)$/;"	f
ftm_hal_enable_global_time_base	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_global_time_base(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_global_time_base_output	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_global_time_base_output(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_hardware_sycn_mod_cntin_cv	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_hardware_sycn_mod_cntin_cv(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_hardware_sync_counter	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_hardware_sync_counter(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_hardware_sync_invert_ctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_hardware_sync_invert_ctrl(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_hardware_sync_output_mask	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_hardware_sync_output_mask(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_hardware_sync_software_output_ctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_hardware_sync_software_output_ctrl(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_invert_sync_with_rising_edge	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_invert_sync_with_rising_edge(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_max_loading	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_max_loading(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_min_loading	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_min_loading(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_output_mask_sync_by_pwm	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_output_mask_sync_by_pwm(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_pwm_load	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_pwm_load(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_pwm_load_matching_channel	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_pwm_load_matching_channel(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_enable_pwm_sync_swoctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_pwm_sync_swoctrl(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_quad_capture	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_quad_capture(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_software_sycn_mod_cntin_cv	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_sycn_mod_cntin_cv(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_software_sync_counter	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_sync_counter(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_software_sync_invert_ctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_sync_invert_ctrl(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_software_sync_output_mask	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_sync_output_mask(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_software_sync_swoctrl	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_sync_swoctrl(uint8_t instance, bool enable )$/;"	f
ftm_hal_enable_software_trigger	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_software_trigger(uint8_t instance, bool enable)$/;"	f
ftm_hal_enable_timer_overflow_interrupt	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_timer_overflow_interrupt(uint8_t instance)$/;"	f
ftm_hal_enable_write_protection	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_enable_write_protection(uint8_t instance, bool enable)$/;"	f
ftm_hal_ftm_enable	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_ftm_enable(uint8_t instance, bool enable)$/;"	f
ftm_hal_get_channel_count_value	hal\flextimer\fsl_ftm_hal.h	/^static inline uint16_t ftm_hal_get_channel_count_value(uint8_t instance, uint8_t channel, uint16_t val)$/;"	f
ftm_hal_get_channel_edge_level	hal\flextimer\fsl_ftm_hal.h	/^static inline uint8_t ftm_hal_get_channel_edge_level(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_get_channel_event_status	hal\flextimer\fsl_ftm_hal.h	/^static inline uint32_t ftm_hal_get_channel_event_status(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_get_channel_mode	hal\flextimer\fsl_ftm_hal.h	/^static inline uint8_t ftm_hal_get_channel_mode(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_get_counter	hal\flextimer\fsl_ftm_hal.h	/^static inline uint16_t  ftm_hal_get_counter(uint8_t instance)$/;"	f
ftm_hal_get_counter_init_val	hal\flextimer\fsl_ftm_hal.h	/^static inline uint16_t  ftm_hal_get_counter_init_val(uint8_t instance)$/;"	f
ftm_hal_get_detected_fault_input	hal\flextimer\fsl_ftm_hal.h	/^static inline uint8_t ftm_hal_get_detected_fault_input(uint8_t instance)$/;"	f
ftm_hal_get_mod	hal\flextimer\fsl_ftm_hal.h	/^static inline uint16_t  ftm_hal_get_mod(uint8_t instance)$/;"	f
ftm_hal_is_channel_dma	hal\flextimer\fsl_ftm_hal.h	/^static inline bool ftm_hal_is_channel_dma(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_is_channel_trigger_generated	hal\flextimer\fsl_ftm_hal.h	/^static inline bool ftm_hal_is_channel_trigger_generated(uint8_t instance, uint8_t channel)$/;"	f
ftm_hal_is_write_protection_enable	hal\flextimer\fsl_ftm_hal.h	/^static inline bool    ftm_hal_is_write_protection_enable(uint8_t instance)$/;"	f
ftm_hal_set_bdm_mode	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_bdm_mode(uint8_t instance, uint8_t val)$/;"	f
ftm_hal_set_channel_MSnBA_mode	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_MSnBA_mode(uint8_t instance, uint8_t channel, uint8_t selection)$/;"	f
ftm_hal_set_channel_count_value	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_count_value(uint8_t instance, uint8_t channel, uint16_t val)$/;"	f
ftm_hal_set_channel_edge_level	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_edge_level(uint8_t instance, uint8_t channel, uint8_t level)$/;"	f
ftm_hal_set_channel_fault_input_polarity	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_fault_input_polarity(uint8_t instance, uint8_t channel, uint8_t pol)$/;"	f
ftm_hal_set_channel_output_init_state	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_output_init_state(uint8_t instance, uint8_t channel, uint8_t state)$/;"	f
ftm_hal_set_channel_output_mask	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_output_mask(uint8_t instance, uint8_t channel, bool  mask)$/;"	f
ftm_hal_set_channel_output_polarity	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_output_polarity(uint8_t instance, uint8_t channel, uint8_t pol)$/;"	f
ftm_hal_set_channel_software_ctrl_val	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_channel_software_ctrl_val(uint8_t instance, uint8_t channel, bool val)$/;"	f
ftm_hal_set_clock_ps	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_clock_ps(uint8_t instance, ftm_clock_ps_t ps)$/;"	f
ftm_hal_set_clock_source	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_clock_source(uint8_t instance, ftm_clock_source_t clock)$/;"	f
ftm_hal_set_counter	hal\flextimer\fsl_ftm_hal.h	/^static inline void  ftm_hal_set_counter(uint8_t instance,uint16_t val)$/;"	f
ftm_hal_set_counter_init_val	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_counter_init_val(uint8_t instance, uint16_t val)$/;"	f
ftm_hal_set_cpwms	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_cpwms(uint8_t instance, uint8_t mode)$/;"	f
ftm_hal_set_deadtime_count	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_deadtime_count(uint8_t instance, uint8_t count)$/;"	f
ftm_hal_set_deadtime_prescale	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_deadtime_prescale(uint8_t instance, ftm_deadtime_ps_t divider)$/;"	f
ftm_hal_set_fault_control_mode	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_fault_control_mode(uint8_t instance, uint8_t mode)$/;"	f
ftm_hal_set_mod	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_mod(uint8_t instance, uint16_t val)$/;"	f
ftm_hal_set_pwm_sync_mdoe	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_pwm_sync_mdoe(uint8_t instance, bool enable)$/;"	f
ftm_hal_set_tof_frequency	hal\flextimer\fsl_ftm_hal.h	/^static inline void ftm_hal_set_tof_frequency(uint8_t instance, uint8_t val)$/;"	f
ftm_input_capture_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_input_capture_edge_mode_t;$/;"	t	typeref:enum:_ftm_input_capture_edge_mode_t
ftm_is_channel_event_occurred	hal\flextimer\fsl_ftm_hal.h	/^static inline bool ftm_is_channel_event_occurred(uint8_t instance, uint8_t channel)$/;"	f
ftm_is_timer_overflow	hal\flextimer\fsl_ftm_hal.h	/^static inline bool ftm_is_timer_overflow(uint8_t instance)$/;"	f
ftm_output_compare_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_output_compare_edge_mode_t;$/;"	t	typeref:enum:_ftm_output_compare_edge_mode_t
ftm_phase_t	hal\flextimer\fsl_ftm_hal.h	/^}ftm_phase_t;$/;"	t	typeref:enum:_ftm_phase_t
ftm_pwm_edge_mode	hal\flextimer\fsl_ftm_hal.h	/^    ftm_pwm_edge_mode_t            ftm_pwm_edge_mode;$/;"	m	union:_ftm_edge_mode_t
ftm_pwm_edge_mode_t	hal\flextimer\fsl_ftm_hal.h	/^ }ftm_pwm_edge_mode_t;$/;"	t	typeref:enum:_ftm_pwm_edge_mode_t
get_channel_pair_index	hal\flextimer\fsl_ftm_hal.h	/^static uint32_t get_channel_pair_index(uint8_t channel)$/;"	f
input_capture_edge_mode	hal\flextimer\fsl_ftm_hal.h	/^    ftm_input_capture_edge_mode_t  input_capture_edge_mode;$/;"	m	union:_ftm_edge_mode_t
kClock_source_FTM_ExternalClk	hal\flextimer\fsl_ftm_hal.h	/^     kClock_source_FTM_ExternalClk$/;"	e	enum:_ftm_clock_source
kClock_source_FTM_FixedClk	hal\flextimer\fsl_ftm_hal.h	/^     kClock_source_FTM_FixedClk,$/;"	e	enum:_ftm_clock_source
kClock_source_FTM_None	hal\flextimer\fsl_ftm_hal.h	/^     kClock_source_FTM_None = 0,$/;"	e	enum:_ftm_clock_source
kClock_source_FTM_SystemClk	hal\flextimer\fsl_ftm_hal.h	/^     kClock_source_FTM_SystemClk,$/;"	e	enum:_ftm_clock_source
kCounting_FTM_Down	hal\flextimer\fsl_ftm_hal.h	/^     kCounting_FTM_Down$/;"	e	enum:_ftm_counting_mode
kCounting_FTM_UP	hal\flextimer\fsl_ftm_hal.h	/^     kCounting_FTM_UP = 0,$/;"	e	enum:_ftm_counting_mode
kFtmCenterAlignedPWM	hal\flextimer\fsl_ftm_hal.h	/^    kFtmCenterAlignedPWM,$/;"	e	enum:_ftm_config_mode_t
kFtmClearOnMatch	hal\flextimer\fsl_ftm_hal.h	/^   kFtmClearOnMatch$/;"	e	enum:_ftm_output_compare_edge_mode_t
kFtmCombinedPWM	hal\flextimer\fsl_ftm_hal.h	/^    kFtmCombinedPWM,$/;"	e	enum:_ftm_config_mode_t
kFtmContinuous	hal\flextimer\fsl_ftm_hal.h	/^   kFtmContinuous$/;"	e	enum:_ftm_dual_capture_edge_mode_t
kFtmDivided0	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDivided0 = 0,$/;"	e	enum:_ftm_deadtime_ps
kFtmDivided1	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDivided1 = 1,$/;"	e	enum:_ftm_deadtime_ps
kFtmDivided16	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDivided16 = 3,$/;"	e	enum:_ftm_deadtime_ps
kFtmDivided4	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDivided4  = 2,$/;"	e	enum:_ftm_deadtime_ps
kFtmDividedBy1	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy1 = 0,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy128	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy128$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy16	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy16,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy2	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy2 ,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy32	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy32,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy4	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy4 ,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy64	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy64,$/;"	e	enum:_ftm_clock_ps
kFtmDividedBy8	hal\flextimer\fsl_ftm_hal.h	/^     kFtmDividedBy8,$/;"	e	enum:_ftm_clock_ps
kFtmDualEdgeCapture	hal\flextimer\fsl_ftm_hal.h	/^    kFtmDualEdgeCapture,$/;"	e	enum:_ftm_config_mode_t
kFtmEdgeAlignedPWM	hal\flextimer\fsl_ftm_hal.h	/^    kFtmEdgeAlignedPWM,$/;"	e	enum:_ftm_config_mode_t
kFtmFallingEdge	hal\flextimer\fsl_ftm_hal.h	/^   kFtmFallingEdge,$/;"	e	enum:_ftm_input_capture_edge_mode_t
kFtmHighTrue	hal\flextimer\fsl_ftm_hal.h	/^   kFtmHighTrue = 0,$/;"	e	enum:_ftm_pwm_edge_mode_t
kFtmInputCapture	hal\flextimer\fsl_ftm_hal.h	/^    kFtmInputCapture,$/;"	e	enum:_ftm_config_mode_t
kFtmLowTrue	hal\flextimer\fsl_ftm_hal.h	/^   kFtmLowTrue$/;"	e	enum:_ftm_pwm_edge_mode_t
kFtmOneShout	hal\flextimer\fsl_ftm_hal.h	/^   kFtmOneShout = 0,$/;"	e	enum:_ftm_dual_capture_edge_mode_t
kFtmOutputCompare	hal\flextimer\fsl_ftm_hal.h	/^    kFtmOutputCompare,$/;"	e	enum:_ftm_config_mode_t
kFtmPhaseA	hal\flextimer\fsl_ftm_hal.h	/^    kFtmPhaseA = 0,$/;"	e	enum:_ftm_phase_t
kFtmPhaseB	hal\flextimer\fsl_ftm_hal.h	/^    kFtmPhaseB$/;"	e	enum:_ftm_phase_t
kFtmQuadCapture	hal\flextimer\fsl_ftm_hal.h	/^    kFtmQuadCapture$/;"	e	enum:_ftm_config_mode_t
kFtmRisingAndFalling	hal\flextimer\fsl_ftm_hal.h	/^   kFtmRisingAndFalling$/;"	e	enum:_ftm_input_capture_edge_mode_t
kFtmRisingEdge	hal\flextimer\fsl_ftm_hal.h	/^   kFtmRisingEdge = 0,$/;"	e	enum:_ftm_input_capture_edge_mode_t
kFtmToggleOnMatch	hal\flextimer\fsl_ftm_hal.h	/^   kFtmToggleOnMatch = 0,$/;"	e	enum:_ftm_output_compare_edge_mode_t
mode	hal\flextimer\fsl_ftm_hal.h	/^  ftm_config_mode_t   mode;$/;"	m	struct:FTMConfig
output_compare_edge_mode	hal\flextimer\fsl_ftm_hal.h	/^    ftm_output_compare_edge_mode_t output_compare_edge_mode;$/;"	m	union:_ftm_edge_mode_t
FSL_FEATURE_GPIO_HAS_FAST_GPIO	hal\gpio\fsl_gpio_features.h	137;"	d
FSL_FEATURE_GPIO_HAS_FAST_GPIO	hal\gpio\fsl_gpio_features.h	145;"	d
FSL_FEATURE_GPIO_HAS_FAST_GPIO	hal\gpio\fsl_gpio_features.h	177;"	d
FSL_FEATURE_GPIO_HAS_INPUT_DISABLE	hal\gpio\fsl_gpio_features.h	139;"	d
FSL_FEATURE_GPIO_HAS_INPUT_DISABLE	hal\gpio\fsl_gpio_features.h	147;"	d
FSL_FEATURE_GPIO_HAS_INPUT_DISABLE	hal\gpio\fsl_gpio_features.h	179;"	d
__FSL_GPIO_FEATURES_H__	hal\gpio\fsl_gpio_features.h	31;"	d
gpio_hal_write_pin_output	hal\gpio\fsl_gpio_hal.c	/^void gpio_hal_write_pin_output(uint32_t instance, uint32_t pin, uint32_t output)$/;"	f
__FSL_GPIO_HAL_H__	hal\gpio\fsl_gpio_hal.h	31;"	d
_gpio_pin_direction	hal\gpio\fsl_gpio_hal.h	/^typedef enum _gpio_pin_direction {$/;"	g
fgpio_hal_clear_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void fgpio_hal_clear_pin_output(uint32_t instance, uint32_t pin)$/;"	f
fgpio_hal_read_pin_input	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t fgpio_hal_read_pin_input(uint32_t instance, uint32_t pin)$/;"	f
fgpio_hal_read_port_input	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t fgpio_hal_read_port_input(uint32_t instance)$/;"	f
fgpio_hal_set_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void fgpio_hal_set_pin_output(uint32_t instance, uint32_t pin)$/;"	f
fgpio_hal_toggle_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void fgpio_hal_toggle_pin_output(uint32_t instance, uint32_t pin)$/;"	f
fgpio_hal_write_port_output	hal\gpio\fsl_gpio_hal.h	/^static inline void fgpio_hal_write_port_output(uint32_t instance, uint32_t portOutput)$/;"	f
gpio_hal_clear_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_clear_pin_output(uint32_t instance, uint32_t pin)$/;"	f
gpio_hal_get_pin_direction	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t gpio_hal_get_pin_direction(uint32_t instance, uint32_t pin)$/;"	f
gpio_hal_get_port_direction	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t gpio_hal_get_port_direction(uint32_t instance)$/;"	f
gpio_hal_read_pin_input	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t gpio_hal_read_pin_input(uint32_t instance, uint32_t pin)$/;"	f
gpio_hal_read_port_input	hal\gpio\fsl_gpio_hal.h	/^static inline uint32_t gpio_hal_read_port_input(uint32_t instance)$/;"	f
gpio_hal_set_pin_direction	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_set_pin_direction(uint32_t instance, uint32_t pin,$/;"	f
gpio_hal_set_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_set_pin_output(uint32_t instance, uint32_t pin)$/;"	f
gpio_hal_set_port_direction	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_set_port_direction(uint32_t instance, uint32_t direction)$/;"	f
gpio_hal_toggle_pin_output	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_toggle_pin_output(uint32_t instance, uint32_t pin)$/;"	f
gpio_hal_write_port_output	hal\gpio\fsl_gpio_hal.h	/^static inline void gpio_hal_write_port_output(uint32_t instance, uint32_t portOutput)$/;"	f
gpio_pin_direction_t	hal\gpio\fsl_gpio_hal.h	/^} gpio_pin_direction_t;$/;"	t	typeref:enum:_gpio_pin_direction
kGpioDigitalInput	hal\gpio\fsl_gpio_hal.h	/^    kGpioDigitalInput  = 0, \/*!< Set current pin as digital input*\/$/;"	e	enum:_gpio_pin_direction
kGpioDigitalOutput	hal\gpio\fsl_gpio_hal.h	/^    kGpioDigitalOutput = 1  \/*!< Set current pin as digital output*\/$/;"	e	enum:_gpio_pin_direction
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	135;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	160;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	179;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	201;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	221;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	255;"	d
FSL_FEATURE_I2C_HAS_DMA_SUPPORT	hal\i2c\fsl_i2c_features.h	284;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	133;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	158;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	177;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	199;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	219;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	253;"	d
FSL_FEATURE_I2C_HAS_ERRATA_6070	hal\i2c\fsl_i2c_features.h	282;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	145;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	170;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	189;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	211;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	231;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	265;"	d
FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION	hal\i2c\fsl_i2c_features.h	294;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	131;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	156;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	175;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	197;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	217;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	251;"	d
FSL_FEATURE_I2C_HAS_SMBUS	hal\i2c\fsl_i2c_features.h	280;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	137;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	162;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	181;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	203;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	223;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	257;"	d
FSL_FEATURE_I2C_HAS_START_DETECT	hal\i2c\fsl_i2c_features.h	286;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	129;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	154;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	173;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	195;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	215;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	249;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT	hal\i2c\fsl_i2c_features.h	278;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	139;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	164;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	183;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	205;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	225;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	259;"	d
FSL_FEATURE_I2C_HAS_STOP_DETECT_INTERRUPT	hal\i2c\fsl_i2c_features.h	288;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	141;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	166;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	185;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	207;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	227;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	261;"	d
FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF	hal\i2c\fsl_i2c_features.h	290;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	143;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	168;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	187;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	209;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	229;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	263;"	d
FSL_FEATURE_I2C_MAX_GLITCH_FILTER_WIDTH	hal\i2c\fsl_i2c_features.h	292;"	d
__FSL_I2C_FEATURES_H__	hal\i2c\fsl_i2c_features.h	31;"	d
ARRAY_SIZE	hal\i2c\fsl_i2c_hal.c	36;"	d	file:
I2CDividerTableEntry	hal\i2c\fsl_i2c_hal.c	/^typedef struct I2CDividerTableEntry {$/;"	s	file:
i2c_divider_table_entry_t	hal\i2c\fsl_i2c_hal.c	/^} i2c_divider_table_entry_t;$/;"	t	typeref:struct:I2CDividerTableEntry	file:
i2c_hal_get_max_baud	hal\i2c\fsl_i2c_hal.c	/^uint32_t i2c_hal_get_max_baud(uint32_t instance, uint32_t sourceClockInHz)$/;"	f
i2c_hal_init	hal\i2c\fsl_i2c_hal.c	/^void i2c_hal_init(uint32_t instance, const i2c_config_t * config, uint32_t sourceClockInHz)$/;"	f
i2c_hal_reset	hal\i2c\fsl_i2c_hal.c	/^void i2c_hal_reset(uint32_t instance)$/;"	f
i2c_hal_send_start	hal\i2c\fsl_i2c_hal.c	/^void i2c_hal_send_start(uint32_t instance)$/;"	f
i2c_hal_set_baud	hal\i2c\fsl_i2c_hal.c	/^i2c_status_t i2c_hal_set_baud(uint32_t instance, uint32_t sourceClockInHz, uint32_t kbps,$/;"	f
i2c_hal_set_slave_address_10bit	hal\i2c\fsl_i2c_hal.c	/^void i2c_hal_set_slave_address_10bit(uint32_t instance, uint16_t address)$/;"	f
i2c_hal_set_slave_address_7bit	hal\i2c\fsl_i2c_hal.c	/^void i2c_hal_set_slave_address_7bit(uint32_t instance, uint8_t address)$/;"	f
icr	hal\i2c\fsl_i2c_hal.c	/^    uint8_t icr;            \/*!< F register ICR value.*\/$/;"	m	struct:I2CDividerTableEntry	file:
kI2CDividerTable	hal\i2c\fsl_i2c_hal.c	/^const i2c_divider_table_entry_t kI2CDividerTable[] = {$/;"	v
sclDivider	hal\i2c\fsl_i2c_hal.c	/^    uint16_t sclDivider;    \/*!< SCL clock divider.*\/$/;"	m	struct:I2CDividerTableEntry	file:
I2CConfig	hal\i2c\fsl_i2c_hal.h	/^typedef struct I2CConfig {$/;"	s
__FSL_I2C_HAL_H__	hal\i2c\fsl_i2c_hal.h	31;"	d
_i2c_status	hal\i2c\fsl_i2c_hal.h	/^typedef enum _i2c_status$/;"	g
_i2c_transmit_receive_mode	hal\i2c\fsl_i2c_hal.h	/^typedef enum _i2c_transmit_receive_mode {$/;"	g
baudRate_kbps	hal\i2c\fsl_i2c_hal.h	/^    uint32_t baudRate_kbps;         \/*!< Requested baud rate in kilobits per second, i.e. 100 or 400. Pass zero to not set the baud rate.*\/$/;"	m	struct:I2CConfig
enableBusStopInterrupt	hal\i2c\fsl_i2c_hal.h	/^    bool enableBusStopInterrupt;    \/*!< Enable for the bus stop detection interrupt.*\/$/;"	m	struct:I2CConfig
enableDma	hal\i2c\fsl_i2c_hal.h	/^    bool enableDma;                 \/*!< Enable DMA transfer signaling.*\/$/;"	m	struct:I2CConfig
enableGeneralCallAddress	hal\i2c\fsl_i2c_hal.h	/^    bool enableGeneralCallAddress;  \/*!< Enable general call address matching.*\/$/;"	m	struct:I2CConfig
enableHighDrive	hal\i2c\fsl_i2c_hal.h	/^    bool enableHighDrive;           \/*!< Enable high drive pin mode.*\/$/;"	m	struct:I2CConfig
enableInterrupt	hal\i2c\fsl_i2c_hal.h	/^    bool enableInterrupt;           \/*!< Enable for the I2C interrupt.*\/$/;"	m	struct:I2CConfig
enableModule	hal\i2c\fsl_i2c_hal.h	/^    bool enableModule;              \/*!< Whether the enable the I2C peripheral operation.*\/$/;"	m	struct:I2CConfig
enableRangeAddressMatch	hal\i2c\fsl_i2c_hal.h	/^    bool enableRangeAddressMatch;   \/*!< Determines if addresses between @a slaveAddress and @a upperSlaveAddress are matched. Both of those fields must be nonzero.*\/$/;"	m	struct:I2CConfig
enableStopModeHoldoff	hal\i2c\fsl_i2c_hal.h	/^    bool enableStopModeHoldoff;     \/*!< Option to hold off CPU low power stop mode until the current byte transfer is complete.*\/$/;"	m	struct:I2CConfig
enableWakeup	hal\i2c\fsl_i2c_hal.h	/^    bool enableWakeup;              \/*!< Enable low power wakeup.*\/$/;"	m	struct:I2CConfig
glitchFilterWidth	hal\i2c\fsl_i2c_hal.h	/^    uint8_t glitchFilterWidth;      \/*!< Specify the glitch filter width in terms of bus clock cycles. Set this value to zero to disable the glitch filter.*\/$/;"	m	struct:I2CConfig
i2c_config_t	hal\i2c\fsl_i2c_hal.h	/^} i2c_config_t;$/;"	t	typeref:struct:I2CConfig
i2c_hal_clear_arbitration_lost	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_clear_arbitration_lost(uint32_t instance)$/;"	f
i2c_hal_clear_interrupt	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_clear_interrupt(uint32_t instance)$/;"	f
i2c_hal_clear_stop_detect	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_clear_stop_detect(uint32_t instance)$/;"	f
i2c_hal_disable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_disable(uint32_t instance)$/;"	f
i2c_hal_disable_bus_stop_interrupt	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_disable_bus_stop_interrupt(uint32_t instance)$/;"	f
i2c_hal_disable_interrupt	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_disable_interrupt(uint32_t instance)$/;"	f
i2c_hal_enable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_enable(uint32_t instance)$/;"	f
i2c_hal_enable_bus_stop_interrupt	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_enable_bus_stop_interrupt(uint32_t instance)$/;"	f
i2c_hal_enable_interrupt	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_enable_interrupt(uint32_t instance)$/;"	f
i2c_hal_get_direction	hal\i2c\fsl_i2c_hal.h	/^static inline i2c_transmit_receive_mode_t i2c_hal_get_direction(uint32_t instance)$/;"	f
i2c_hal_get_interrupt_status	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_get_interrupt_status(uint32_t instance)$/;"	f
i2c_hal_get_receive_ack	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_get_receive_ack(uint32_t instance)$/;"	f
i2c_hal_get_slave_direction	hal\i2c\fsl_i2c_hal.h	/^static inline i2c_transmit_receive_mode_t i2c_hal_get_slave_direction(uint32_t instance)$/;"	f
i2c_hal_get_stop_detect	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_get_stop_detect(uint32_t instance)$/;"	f
i2c_hal_is_addressed_as_slave	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_addressed_as_slave(uint32_t instance)$/;"	f
i2c_hal_is_bus_busy	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_bus_busy(uint32_t instance)$/;"	f
i2c_hal_is_bus_stop_interrupt_enabled	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_bus_stop_interrupt_enabled(uint32_t instance)$/;"	f
i2c_hal_is_interrupt_enabled	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_interrupt_enabled(uint32_t instance)$/;"	f
i2c_hal_is_master	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_master(uint32_t instance)$/;"	f
i2c_hal_is_range_address_match	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_range_address_match(uint32_t instance)$/;"	f
i2c_hal_is_transfer_complete	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_is_transfer_complete(uint32_t instance)$/;"	f
i2c_hal_read	hal\i2c\fsl_i2c_hal.h	/^static inline uint8_t i2c_hal_read(uint32_t instance)$/;"	f
i2c_hal_send_ack	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_send_ack(uint32_t instance)$/;"	f
i2c_hal_send_nak	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_send_nak(uint32_t instance)$/;"	f
i2c_hal_send_stop	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_send_stop(uint32_t instance)$/;"	f
i2c_hal_set_baud_icr	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_baud_icr(uint32_t instance, uint8_t mult, uint8_t icr)$/;"	f
i2c_hal_set_direction	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_direction(uint32_t instance, i2c_transmit_receive_mode_t mode)$/;"	f
i2c_hal_set_dma_enable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_dma_enable(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_general_call_enable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_general_call_enable(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_glitch_filter	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_glitch_filter(uint32_t instance, uint8_t glitchWidth)$/;"	f
i2c_hal_set_high_drive	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_high_drive(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_independent_slave_baud	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_independent_slave_baud(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_slave_range_address_enable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_slave_range_address_enable(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_stop_holdoff	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_stop_holdoff(uint32_t instance, bool enable)$/;"	f
i2c_hal_set_upper_slave_address_7bit	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_upper_slave_address_7bit(uint32_t instance, uint8_t address)$/;"	f
i2c_hal_set_wakeup_enable	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_set_wakeup_enable(uint32_t instance, bool enable)$/;"	f
i2c_hal_was_arbitration_lost	hal\i2c\fsl_i2c_hal.h	/^static inline bool i2c_hal_was_arbitration_lost(uint32_t instance)$/;"	f
i2c_hal_write	hal\i2c\fsl_i2c_hal.h	/^static inline void i2c_hal_write(uint32_t instance, uint8_t data)$/;"	f
i2c_status_t	hal\i2c\fsl_i2c_hal.h	/^} i2c_status_t;$/;"	t	typeref:enum:_i2c_status
i2c_transmit_receive_mode_t	hal\i2c\fsl_i2c_hal.h	/^} i2c_transmit_receive_mode_t;$/;"	t	typeref:enum:_i2c_transmit_receive_mode
kI2CReceive	hal\i2c\fsl_i2c_hal.h	/^    kI2CReceive = 0,    \/*!< Master and slave receive.*\/$/;"	e	enum:_i2c_transmit_receive_mode
kI2CTransmit	hal\i2c\fsl_i2c_hal.h	/^    kI2CTransmit = 1    \/*!< Master and slave transmit.*\/$/;"	e	enum:_i2c_transmit_receive_mode
kStatus_I2C_AribtrationLost	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_AribtrationLost,     \/*!< I2C Arbitration Lost error.*\/$/;"	e	enum:_i2c_status
kStatus_I2C_Busy	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_Busy,                \/*!< The master is already performing a transfer.*\/$/;"	e	enum:_i2c_status
kStatus_I2C_Fail	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_Fail,$/;"	e	enum:_i2c_status
kStatus_I2C_InvalidArgument	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_InvalidArgument,$/;"	e	enum:_i2c_status
kStatus_I2C_OutOfRange	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_OutOfRange,$/;"	e	enum:_i2c_status
kStatus_I2C_ReceivedNak	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_ReceivedNak,         \/*!< The slave device sent a NAK in response to a byte.*\/$/;"	e	enum:_i2c_status
kStatus_I2C_SlaveRxOverrun	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_SlaveRxOverrun,      \/*!< I2C Slave RX Overrun error.*\/$/;"	e	enum:_i2c_status
kStatus_I2C_SlaveTxUnderrun	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_SlaveTxUnderrun,     \/*!< I2C Slave TX Underrun error.*\/$/;"	e	enum:_i2c_status
kStatus_I2C_Success	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_Success = 0,$/;"	e	enum:_i2c_status
kStatus_I2C_Timeout	hal\i2c\fsl_i2c_hal.h	/^    kStatus_I2C_Timeout,             \/*!< The transfer timed out.*\/$/;"	e	enum:_i2c_status
slaveAddress	hal\i2c\fsl_i2c_hal.h	/^    uint16_t slaveAddress;          \/*!< 7-bit or 10-bit slave address.*\/$/;"	m	struct:I2CConfig
upperSlaveAddress	hal\i2c\fsl_i2c_hal.h	/^    uint8_t upperSlaveAddress;      \/*!< 7-bit upper slave address, or zero to disable. If 10-bit addresses are enabled, the top 3 bits are provided by the @a slaveAddress field.*\/$/;"	m	struct:I2CConfig
use10bitSlaveAddress	hal\i2c\fsl_i2c_hal.h	/^    bool use10bitSlaveAddress;      \/*!< Controls whether 10-bit slave addresses are enabled.*\/$/;"	m	struct:I2CConfig
useIndependentSlaveBaud	hal\i2c\fsl_i2c_hal.h	/^    bool useIndependentSlaveBaud;   \/*!< Enables independent slave mode baud rate at max frequency.*\/$/;"	m	struct:I2CConfig
FSL_FEATURE_MCG_HAS_FCFTRIM	hal\mcg\fsl_mcg_features.h	43;"	d
FSL_FEATURE_MCG_HAS_FCFTRIM	hal\mcg\fsl_mcg_features.h	56;"	d
FSL_FEATURE_MCG_HAS_FCFTRIM	hal\mcg\fsl_mcg_features.h	68;"	d
FSL_FEATURE_MCG_HAS_IRC_48M	hal\mcg\fsl_mcg_features.h	41;"	d
FSL_FEATURE_MCG_HAS_IRC_48M	hal\mcg\fsl_mcg_features.h	54;"	d
FSL_FEATURE_MCG_HAS_IRC_48M	hal\mcg\fsl_mcg_features.h	66;"	d
FSL_FEATURE_MCG_HAS_LOLRE	hal\mcg\fsl_mcg_features.h	44;"	d
FSL_FEATURE_MCG_HAS_LOLRE	hal\mcg\fsl_mcg_features.h	57;"	d
FSL_FEATURE_MCG_HAS_LOLRE	hal\mcg\fsl_mcg_features.h	69;"	d
FSL_FEATURE_MCG_HAS_OSC1	hal\mcg\fsl_mcg_features.h	42;"	d
FSL_FEATURE_MCG_HAS_OSC1	hal\mcg\fsl_mcg_features.h	55;"	d
FSL_FEATURE_MCG_HAS_OSC1	hal\mcg\fsl_mcg_features.h	67;"	d
FSL_FEATURE_MCG_HAS_PLL1	hal\mcg\fsl_mcg_features.h	40;"	d
FSL_FEATURE_MCG_HAS_PLL1	hal\mcg\fsl_mcg_features.h	53;"	d
FSL_FEATURE_MCG_HAS_PLL1	hal\mcg\fsl_mcg_features.h	65;"	d
FSL_FEATURE_MCG_HAS_PLL_EXTRA_DIV	hal\mcg\fsl_mcg_features.h	38;"	d
FSL_FEATURE_MCG_HAS_PLL_EXTRA_DIV	hal\mcg\fsl_mcg_features.h	51;"	d
FSL_FEATURE_MCG_HAS_PLL_EXTRA_DIV	hal\mcg\fsl_mcg_features.h	63;"	d
FSL_FEATURE_MCG_HAS_RTC_32K	hal\mcg\fsl_mcg_features.h	39;"	d
FSL_FEATURE_MCG_HAS_RTC_32K	hal\mcg\fsl_mcg_features.h	52;"	d
FSL_FEATURE_MCG_HAS_RTC_32K	hal\mcg\fsl_mcg_features.h	64;"	d
FSL_FEATURE_MCG_PLL_VDIV_BASE	hal\mcg\fsl_mcg_features.h	37;"	d
FSL_FEATURE_MCG_PLL_VDIV_BASE	hal\mcg\fsl_mcg_features.h	50;"	d
FSL_FEATURE_MCG_PLL_VDIV_BASE	hal\mcg\fsl_mcg_features.h	62;"	d
FSL_FEATURE_MCG_USE_OSCSEL	hal\mcg\fsl_mcg_features.h	45;"	d
FSL_FEATURE_MCG_USE_OSCSEL	hal\mcg\fsl_mcg_features.h	58;"	d
FSL_FEATURE_MCG_USE_OSCSEL	hal\mcg\fsl_mcg_features.h	70;"	d
FSL_FEATURE_MCG_USE_PLLREFSEL	hal\mcg\fsl_mcg_features.h	46;"	d
FSL_FEATURE_MCG_USE_PLLREFSEL	hal\mcg\fsl_mcg_features.h	59;"	d
FSL_FEATURE_MCG_USE_PLLREFSEL	hal\mcg\fsl_mcg_features.h	71;"	d
FSL_FEATURE_MCG_USE_SYSTEM_CLOCK	hal\mcg\fsl_mcg_features.h	47;"	d
FSL_FEATURE_MCG_USE_SYSTEM_CLOCK	hal\mcg\fsl_mcg_features.h	60;"	d
FSL_FEATURE_MCG_USE_SYSTEM_CLOCK	hal\mcg\fsl_mcg_features.h	72;"	d
__FSL_MCG_FEATURES_H__	hal\mcg\fsl_mcg_features.h	31;"	d
clock_hal_get_fllclk	hal\mcg\fsl_mcg_hal.c	/^uint32_t clock_hal_get_fllclk(void)$/;"	f
clock_hal_get_irclk	hal\mcg\fsl_mcg_hal.c	/^uint32_t clock_hal_get_irclk(void)$/;"	f
clock_hal_get_outclk	hal\mcg\fsl_mcg_hal.c	/^uint32_t clock_hal_get_outclk(void)$/;"	f
clock_hal_get_pll0clk	hal\mcg\fsl_mcg_hal.c	/^uint32_t clock_hal_get_pll0clk(void)$/;"	f
clock_hal_get_pll1clk	hal\mcg\fsl_mcg_hal.c	/^uint32_t clock_hal_get_pll1clk(void)$/;"	f
get_mcgffclk	hal\mcg\fsl_mcg_hal.c	/^uint32_t get_mcgffclk(void)$/;"	f
__FSL_MCG_HAL_H__	hal\mcg\fsl_mcg_hal.h	32;"	d
_mcg_atmf_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_atmf_status$/;"	g
_mcg_atms_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_atms_select$/;"	g
_mcg_clkst_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_clkst_status$/;"	g
_mcg_clock_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_clock_select$/;"	g
_mcg_constant	hal\mcg\fsl_mcg_hal.h	/^enum _mcg_constant$/;"	g
_mcg_dco_range_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_dco_range_select$/;"	g
_mcg_dmx32_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_dmx32_select$/;"	g
_mcg_eref_clock_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_eref_clock_select$/;"	g
_mcg_freq_range_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_freq_range_select$/;"	g
_mcg_hgo_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_hgo_select$/;"	g
_mcg_ircst_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_ircst_status$/;"	g
_mcg_iref_clock_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_iref_clock_select$/;"	g
_mcg_iref_clock_source	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_iref_clock_source$/;"	g
_mcg_irefst_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_irefst_status$/;"	g
_mcg_lock_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_lock_status$/;"	g
_mcg_locs0_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_locs0_status$/;"	g
_mcg_locs1_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_locs1_status$/;"	g
_mcg_locs2_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_locs2_status$/;"	g
_mcg_lols_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_lols_status$/;"	g
_mcg_lp_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_lp_select$/;"	g
_mcg_oscsel_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_oscsel_select$/;"	g
_mcg_pll_eref_clock_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_pll_eref_clock_select$/;"	g
_mcg_pll_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_pll_select$/;"	g
_mcg_pllcs_select	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_pllcs_select$/;"	g
_mcg_pllst_status	hal\mcg\fsl_mcg_hal.h	/^typedef enum _mcg_pllst_status$/;"	g
clock_get_atcvh	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_atcvh(void)$/;"	f
clock_get_atcvl	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_atcvl(void)$/;"	f
clock_get_atme	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_atme(void)$/;"	f
clock_get_atmf	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_atmf_status_t clock_get_atmf(void)$/;"	f
clock_get_atms	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_atms_select_t clock_get_atms(void)$/;"	f
clock_get_clks	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_clock_select_t clock_get_clks(void)$/;"	f
clock_get_clkst	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_clkst_status_t clock_get_clkst(void)$/;"	f
clock_get_cme0	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_cme0(void)$/;"	f
clock_get_cme1	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_cme1(void)$/;"	f
clock_get_cme2	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_cme2(void)$/;"	f
clock_get_dmx32	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_dmx32_select_t clock_get_dmx32(void)$/;"	f
clock_get_drst_drs	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_dco_range_select_t clock_get_drst_drs(void)$/;"	f
clock_get_erefs0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_eref_clock_select_t clock_get_erefs0(void)$/;"	f
clock_get_erefs1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_eref_clock_select_t clock_get_erefs1(void)$/;"	f
clock_get_fcftrim	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_fcftrim(void)$/;"	f
clock_get_fcrdiv	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_fcrdiv(void)$/;"	f
clock_get_fctrim	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_fctrim(void)$/;"	f
clock_get_fltprsrv	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_fltprsrv(void)$/;"	f
clock_get_frdiv	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_frdiv(void)$/;"	f
clock_get_hgo0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_hgo_select_t clock_get_hgo0(void)$/;"	f
clock_get_hgo1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_hgo_select_t clock_get_hgo1(void)$/;"	f
clock_get_irclken	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_irclken(void)$/;"	f
clock_get_ircs	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_iref_clock_select_t clock_get_ircs(void)$/;"	f
clock_get_ircst	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_ircst_status_t clock_get_ircst(void)$/;"	f
clock_get_irefs	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_iref_clock_source_t clock_get_irefs(void)$/;"	f
clock_get_irefst	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_irefst_status_t clock_get_irefst(void)$/;"	f
clock_get_irefsten	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_irefsten(void)$/;"	f
clock_get_lock0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_lock_status_t clock_get_lock0(void)$/;"	f
clock_get_lock1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_lock_status_t clock_get_lock1(void)$/;"	f
clock_get_locre0	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_locre0(void)$/;"	f
clock_get_locre1	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_locre1(void)$/;"	f
clock_get_locre2	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_locre2(void)$/;"	f
clock_get_locs0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_locs0_status_t clock_get_locs0(void)$/;"	f
clock_get_locs1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_locs1_status_t clock_get_locs1(void)$/;"	f
clock_get_locs2	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_locs2_status_t clock_get_locs2(void)$/;"	f
clock_get_lolie0	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_lolie0(void)$/;"	f
clock_get_lolie1	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_lolie1(void)$/;"	f
clock_get_lolre	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_lolre(void)$/;"	f
clock_get_lols0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_lols_status_t clock_get_lols0(void)$/;"	f
clock_get_lols1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_lols_status_t clock_get_lols1(void)$/;"	f
clock_get_lp	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_lp_select_t clock_get_lp(void)$/;"	f
clock_get_oscinit0	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_oscinit0(void)$/;"	f
clock_get_oscinit1	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_oscinit1(void)$/;"	f
clock_get_oscsel	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_oscsel_select_t clock_get_oscsel(void)$/;"	f
clock_get_pllclken0	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_pllclken0(void)$/;"	f
clock_get_pllclken1	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_pllclken1(void)$/;"	f
clock_get_pllcs	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pllcs_select_t clock_get_pllcs(void)$/;"	f
clock_get_pllcst	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pllcs_select_t clock_get_pllcst(void)$/;"	f
clock_get_pllrefsel0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pll_eref_clock_select_t clock_get_pllrefsel0(void)$/;"	f
clock_get_pllrefsel1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pll_eref_clock_select_t clock_get_pllrefsel1(void)$/;"	f
clock_get_plls	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pll_select_t clock_get_plls(void)$/;"	f
clock_get_pllst	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_pllst_status_t clock_get_pllst(void)$/;"	f
clock_get_pllsten0	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_pllsten0(void)$/;"	f
clock_get_pllsten1	hal\mcg\fsl_mcg_hal.h	/^static inline bool clock_get_pllsten1(void)$/;"	f
clock_get_prdiv0	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_prdiv0(void)$/;"	f
clock_get_prdiv1	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_prdiv1(void)$/;"	f
clock_get_range0	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_freq_range_select_t clock_get_range0(void)$/;"	f
clock_get_range1	hal\mcg\fsl_mcg_hal.h	/^static inline mcg_freq_range_select_t clock_get_range1(void)$/;"	f
clock_get_scftrim	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_scftrim(void)$/;"	f
clock_get_sctrim	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_sctrim(void)$/;"	f
clock_get_vdiv0	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_vdiv0(void)$/;"	f
clock_get_vdiv1	hal\mcg\fsl_mcg_hal.h	/^static inline uint8_t clock_get_vdiv1(void)$/;"	f
clock_set_atcvh	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_atcvh(uint8_t setting)$/;"	f
clock_set_atcvl	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_atcvl(uint8_t setting)$/;"	f
clock_set_atme	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_atme(bool enable)$/;"	f
clock_set_atmf	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_atmf(void)$/;"	f
clock_set_atms	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_atms(mcg_atms_select_t setting)$/;"	f
clock_set_clks	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_clks(mcg_clock_select_t select)$/;"	f
clock_set_clks_frdiv_irefs	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_clks_frdiv_irefs(mcg_clock_select_t clks,$/;"	f
clock_set_cme0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_cme0(bool enable)$/;"	f
clock_set_cme1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_cme1(bool enable)$/;"	f
clock_set_cme2	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_cme2(bool enable)$/;"	f
clock_set_dmx32	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_dmx32(mcg_dmx32_select_t setting)$/;"	f
clock_set_drst_drs	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_drst_drs(mcg_dco_range_select_t setting)$/;"	f
clock_set_erefs0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_erefs0(mcg_eref_clock_select_t select)$/;"	f
clock_set_erefs1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_erefs1(mcg_eref_clock_select_t setting)$/;"	f
clock_set_fcftrim	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_fcftrim(uint8_t setting)$/;"	f
clock_set_fcrdiv	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_fcrdiv(uint8_t setting)$/;"	f
clock_set_fctrim	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_fctrim(uint8_t setting)$/;"	f
clock_set_fltprsrv	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_fltprsrv(bool enable)$/;"	f
clock_set_frdiv	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_frdiv(uint8_t setting)$/;"	f
clock_set_hgo0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_hgo0(mcg_hgo_select_t select)$/;"	f
clock_set_hgo1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_hgo1(mcg_hgo_select_t setting)$/;"	f
clock_set_irclken	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_irclken(bool enable)$/;"	f
clock_set_ircs	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_ircs(mcg_iref_clock_select_t select)$/;"	f
clock_set_irefs	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_irefs(mcg_iref_clock_source_t select)$/;"	f
clock_set_irefsten	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_irefsten(bool enable)$/;"	f
clock_set_locre0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_locre0(bool enable)$/;"	f
clock_set_locre1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_locre1(bool enable)$/;"	f
clock_set_locre2	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_locre2(bool enable)$/;"	f
clock_set_lolie0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_lolie0(bool enable)$/;"	f
clock_set_lolie1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_lolie1(bool enable)$/;"	f
clock_set_lolre	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_lolre(bool enable)$/;"	f
clock_set_lp	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_lp(mcg_lp_select_t select)$/;"	f
clock_set_oscsel	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_oscsel(mcg_oscsel_select_t setting)$/;"	f
clock_set_pllclken0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllclken0(bool enable)$/;"	f
clock_set_pllclken1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllclken1(bool enable)$/;"	f
clock_set_pllcs	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllcs(mcg_pllcs_select_t setting)$/;"	f
clock_set_pllrefsel0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllrefsel0(mcg_pll_eref_clock_select_t setting)$/;"	f
clock_set_pllrefsel1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllrefsel1(mcg_pll_eref_clock_select_t setting)$/;"	f
clock_set_plls	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_plls(mcg_pll_select_t setting)$/;"	f
clock_set_pllsten0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllsten0(bool enable)$/;"	f
clock_set_pllsten1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_pllsten1(bool enable)$/;"	f
clock_set_prdiv0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_prdiv0(uint8_t setting)$/;"	f
clock_set_prdiv1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_prdiv1(uint8_t setting)$/;"	f
clock_set_range0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_range0(mcg_freq_range_select_t select)$/;"	f
clock_set_range1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_range1(mcg_freq_range_select_t setting)$/;"	f
clock_set_scftrim	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_scftrim(uint8_t setting)$/;"	f
clock_set_sctrim	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_sctrim(uint8_t setting)$/;"	f
clock_set_vdiv0	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_vdiv0(uint8_t setting)$/;"	f
clock_set_vdiv1	hal\mcg\fsl_mcg_hal.h	/^static inline void clock_set_vdiv1(uint8_t setting)$/;"	f
kMcgAtmfFail	hal\mcg\fsl_mcg_hal.h	/^    kMcgAtmfFail                    \/* Automatic Trim Machine failed *\/$/;"	e	enum:_mcg_atmf_status
kMcgAtmfNormal	hal\mcg\fsl_mcg_hal.h	/^    kMcgAtmfNormal,                 \/* Automatic Trim Machine completed normally *\/$/;"	e	enum:_mcg_atmf_status
kMcgAtmsSelect32k	hal\mcg\fsl_mcg_hal.h	/^    kMcgAtmsSelect32k,              \/* 32 kHz Internal Reference Clock selected *\/$/;"	e	enum:_mcg_atms_select
kMcgAtmsSelect4m	hal\mcg\fsl_mcg_hal.h	/^    kMcgAtmsSelect4m                \/* 4 MHz Internal Reference Clock selected *\/$/;"	e	enum:_mcg_atms_select
kMcgClkstEref	hal\mcg\fsl_mcg_hal.h	/^    kMcgClkstEref,                  \/* External reference clock is selected *\/$/;"	e	enum:_mcg_clkst_status
kMcgClkstFll	hal\mcg\fsl_mcg_hal.h	/^    kMcgClkstFll,                   \/* Output of the FLL is selected (reset default) *\/$/;"	e	enum:_mcg_clkst_status
kMcgClkstIref	hal\mcg\fsl_mcg_hal.h	/^    kMcgClkstIref,                  \/* Internal reference clock is selected *\/$/;"	e	enum:_mcg_clkst_status
kMcgClkstPll	hal\mcg\fsl_mcg_hal.h	/^    kMcgClkstPll                    \/* Output of the PLL is selected *\/$/;"	e	enum:_mcg_clkst_status
kMcgClockSelectExt	hal\mcg\fsl_mcg_hal.h	/^    kMcgClockSelectExt,             \/* External reference clock is selected *\/$/;"	e	enum:_mcg_clock_select
kMcgClockSelectIn	hal\mcg\fsl_mcg_hal.h	/^    kMcgClockSelectIn,              \/* Internal reference clock is selected *\/$/;"	e	enum:_mcg_clock_select
kMcgClockSelectOut	hal\mcg\fsl_mcg_hal.h	/^    kMcgClockSelectOut,             \/* Output of FLL or PLLCS is selected(depends on PLLS bit) *\/$/;"	e	enum:_mcg_clock_select
kMcgClockSelectReserved	hal\mcg\fsl_mcg_hal.h	/^    kMcgClockSelectReserved$/;"	e	enum:_mcg_clock_select
kMcgConstant1	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant1 =        (1u),$/;"	e	enum:_mcg_constant
kMcgConstant1280	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant1280 =    (1280u),$/;"	e	enum:_mcg_constant
kMcgConstant1464	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant1464 =    (1464u),$/;"	e	enum:_mcg_constant
kMcgConstant1920	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant1920 =    (1920u),$/;"	e	enum:_mcg_constant
kMcgConstant2197	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant2197 =    (2197u),$/;"	e	enum:_mcg_constant
kMcgConstant2560	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant2560 =    (2560u),$/;"	e	enum:_mcg_constant
kMcgConstant2929	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant2929 =    (2929u),$/;"	e	enum:_mcg_constant
kMcgConstant5	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant5 =        (5u),$/;"	e	enum:_mcg_constant
kMcgConstant640	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant640 =      (640u),$/;"	e	enum:_mcg_constant
kMcgConstant732	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstant732  =    (732u),$/;"	e	enum:_mcg_constant
kMcgConstantHex20	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHex20 =       (0x20u),$/;"	e	enum:_mcg_constant
kMcgConstantHex40	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHex40 =       (0x40u),$/;"	e	enum:_mcg_constant
kMcgConstantHex60	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHex60 =       (0x60u),$/;"	e	enum:_mcg_constant
kMcgConstantHex80	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHex80 =       (0x80u),$/;"	e	enum:_mcg_constant
kMcgConstantHexA0	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHexA0 =       (0xA0u),$/;"	e	enum:_mcg_constant
kMcgConstantHexC0	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHexC0 =       (0xC0u),$/;"	e	enum:_mcg_constant
kMcgConstantHexE0	hal\mcg\fsl_mcg_hal.h	/^   kMcgConstantHexE0 =       (0xE0u)$/;"	e	enum:_mcg_constant
kMcgDcoRangeSelectHigh	hal\mcg\fsl_mcg_hal.h	/^    kMcgDcoRangeSelectHigh          \/* High frequency range *\/$/;"	e	enum:_mcg_dco_range_select
kMcgDcoRangeSelectLow	hal\mcg\fsl_mcg_hal.h	/^    kMcgDcoRangeSelectLow,          \/* Low frequency range *\/$/;"	e	enum:_mcg_dco_range_select
kMcgDcoRangeSelectMid	hal\mcg\fsl_mcg_hal.h	/^    kMcgDcoRangeSelectMid,          \/* Mid frequency range*\/$/;"	e	enum:_mcg_dco_range_select
kMcgDcoRangeSelectMidHigh	hal\mcg\fsl_mcg_hal.h	/^    kMcgDcoRangeSelectMidHigh,      \/* Mid-High frequency range *\/$/;"	e	enum:_mcg_dco_range_select
kMcgDmx32Default	hal\mcg\fsl_mcg_hal.h	/^    kMcgDmx32Default,               \/* DCO has a default range of 25% *\/$/;"	e	enum:_mcg_dmx32_select
kMcgDmx32Fine	hal\mcg\fsl_mcg_hal.h	/^    kMcgDmx32Fine                   \/* DCO is fine-tuned for maximum frequency with 32.768 kHz reference *\/$/;"	e	enum:_mcg_dmx32_select
kMcgErefClockSelectExt	hal\mcg\fsl_mcg_hal.h	/^    kMcgErefClockSelectExt,         \/* External reference clock requested *\/$/;"	e	enum:_mcg_eref_clock_select
kMcgErefClockSelectOsc	hal\mcg\fsl_mcg_hal.h	/^    kMcgErefClockSelectOsc          \/* Oscillator requested *\/$/;"	e	enum:_mcg_eref_clock_select
kMcgFreqRangeSelectHigh	hal\mcg\fsl_mcg_hal.h	/^    kMcgFreqRangeSelectHigh,        \/* High frequency range selected for the crystal osc *\/$/;"	e	enum:_mcg_freq_range_select
kMcgFreqRangeSelectLow	hal\mcg\fsl_mcg_hal.h	/^    kMcgFreqRangeSelectLow,         \/* Low frequency range selected for the crystal osc *\/$/;"	e	enum:_mcg_freq_range_select
kMcgFreqRangeSelectVeryHigh	hal\mcg\fsl_mcg_hal.h	/^    kMcgFreqRangeSelectVeryHigh,    \/* Very High frequency range selected for the crystal osc *\/$/;"	e	enum:_mcg_freq_range_select
kMcgFreqRangeSelectVeryHigh1	hal\mcg\fsl_mcg_hal.h	/^    kMcgFreqRangeSelectVeryHigh1    \/* Very High frequency range selected for the crystal osc *\/$/;"	e	enum:_mcg_freq_range_select
kMcgHgoSelectHigh	hal\mcg\fsl_mcg_hal.h	/^    kMcgHgoSelectHigh               \/* Configure crystal oscillator for high-gain operation *\/$/;"	e	enum:_mcg_hgo_select
kMcgHgoSelectLow	hal\mcg\fsl_mcg_hal.h	/^    kMcgHgoSelectLow,               \/* Configure crystal oscillator for low-power operation *\/$/;"	e	enum:_mcg_hgo_select
kMcgIrcstFast	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrcstFast                   \/* internal reference clock is the fast clock (2 MHz IRC) *\/$/;"	e	enum:_mcg_ircst_status
kMcgIrcstSlow	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrcstSlow,                  \/* internal reference clock is the slow clock (32 kHz IRC) *\/$/;"	e	enum:_mcg_ircst_status
kMcgIrefClockSelectFast	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefClockSelectFast         \/* Fast internal reference clock selected *\/$/;"	e	enum:_mcg_iref_clock_select
kMcgIrefClockSelectSlow	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefClockSelectSlow,        \/* Slow internal reference clock selected *\/$/;"	e	enum:_mcg_iref_clock_select
kMcgIrefClockSourceExt	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefClockSourceExt,         \/* External reference clock is selected *\/$/;"	e	enum:_mcg_iref_clock_source
kMcgIrefClockSourceSlow	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefClockSourceSlow         \/* The slow internal reference clock is selected *\/$/;"	e	enum:_mcg_iref_clock_source
kMcgIrefstExt	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefstExt,                  \/* FLL reference clock is the external reference clock *\/$/;"	e	enum:_mcg_irefst_status
kMcgIrefstInt	hal\mcg\fsl_mcg_hal.h	/^    kMcgIrefstInt                   \/* FLL reference clock is the internal reference clock *\/$/;"	e	enum:_mcg_irefst_status
kMcgLockLocked	hal\mcg\fsl_mcg_hal.h	/^    kMcgLockLocked                 \/* PLL is currently locked *\/$/;"	e	enum:_mcg_lock_status
kMcgLockUnlocked	hal\mcg\fsl_mcg_hal.h	/^    kMcgLockUnlocked,              \/* PLL is currently unlocked *\/$/;"	e	enum:_mcg_lock_status
kMcgLocs0NotOccured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs0NotOccured,            \/* Loss of OSC0 has not occurred *\/$/;"	e	enum:_mcg_locs0_status
kMcgLocs0Occured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs0Occured                \/* Loss of OSC0 has occurred *\/$/;"	e	enum:_mcg_locs0_status
kMcgLocs1NotOccured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs1NotOccured,            \/* Loss of RTC has not occurred *\/$/;"	e	enum:_mcg_locs1_status
kMcgLocs1Occured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs1Occured                \/* Loss of RTC has occurred *\/$/;"	e	enum:_mcg_locs1_status
kMcgLocs2NotOccured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs2NotOccured,            \/* Loss of OSC1 has not occurred *\/$/;"	e	enum:_mcg_locs2_status
kMcgLocs2Occured	hal\mcg\fsl_mcg_hal.h	/^    kMcgLocs2Occured                \/* Loss of OSC1 has occurred *\/$/;"	e	enum:_mcg_locs2_status
kMcgLolsLostLock	hal\mcg\fsl_mcg_hal.h	/^    kMcgLolsLostLock               \/* PLL has lost lock since LOLS 0 was last cleared *\/$/;"	e	enum:_mcg_lols_status
kMcgLolsNotLostLock	hal\mcg\fsl_mcg_hal.h	/^    kMcgLolsNotLostLock,           \/* PLL has not lost lock since LOLS 0 was last cleared *\/$/;"	e	enum:_mcg_lols_status
kMcgLpSelectLowPower	hal\mcg\fsl_mcg_hal.h	/^    kMcgLpSelectLowPower            \/* FLL (or PLL) is disabled in bypass modes (lower power) *\/$/;"	e	enum:_mcg_lp_select
kMcgLpSelectNormal	hal\mcg\fsl_mcg_hal.h	/^    kMcgLpSelectNormal,             \/* FLL (or PLL) is not disabled in bypass modes *\/$/;"	e	enum:_mcg_lp_select
kMcgOscselOsc	hal\mcg\fsl_mcg_hal.h	/^    kMcgOscselOsc,                  \/* Selects System Oscillator (OSCCLK) *\/$/;"	e	enum:_mcg_oscsel_select
kMcgOscselRtc	hal\mcg\fsl_mcg_hal.h	/^    kMcgOscselRtc                   \/*Selects 32 kHz RTC Oscillator *\/$/;"	e	enum:_mcg_oscsel_select
kMcgPllErefClockSelectOsc0	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllErefClockSelectOsc0,    \/* Selects OSC0 clock source as its external reference clock *\/$/;"	e	enum:_mcg_pll_eref_clock_select
kMcgPllErefClockSelectOsc1	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllErefClockSelectOsc1     \/* Selects OSC1 clock source as its external reference clock *\/$/;"	e	enum:_mcg_pll_eref_clock_select
kMcgPllSelectFll	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllSelectFll,               \/* FLL is selected *\/$/;"	e	enum:_mcg_pll_select
kMcgPllSelectPllcs	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllSelectPllcs              \/* PLLCS output clock is selected *\/$/;"	e	enum:_mcg_pll_select
kMcgPllcsSelectPll0	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllcsSelectPll0,            \/* PLL0 output clock is selected *\/$/;"	e	enum:_mcg_pllcs_select
kMcgPllcsSelectPll1	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllcsSelectPll1,            \/* PLL1 output clock is selected *\/$/;"	e	enum:_mcg_pllcs_select
kMcgPllstFll	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllstFll,                   \/* Source of PLLS clock is FLL clock *\/$/;"	e	enum:_mcg_pllst_status
kMcgPllstPllcs	hal\mcg\fsl_mcg_hal.h	/^    kMcgPllstPllcs                  \/* Source of PLLS clock is PLLCS output clock *\/$/;"	e	enum:_mcg_pllst_status
mcg_atmf_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_atmf_status_t;$/;"	t	typeref:enum:_mcg_atmf_status
mcg_atms_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_atms_select_t;$/;"	t	typeref:enum:_mcg_atms_select
mcg_clkst_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_clkst_status_t;$/;"	t	typeref:enum:_mcg_clkst_status
mcg_clock_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_clock_select_t;$/;"	t	typeref:enum:_mcg_clock_select
mcg_dco_range_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_dco_range_select_t;$/;"	t	typeref:enum:_mcg_dco_range_select
mcg_dmx32_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_dmx32_select_t;$/;"	t	typeref:enum:_mcg_dmx32_select
mcg_eref_clock_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_eref_clock_select_t;$/;"	t	typeref:enum:_mcg_eref_clock_select
mcg_freq_range_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_freq_range_select_t;$/;"	t	typeref:enum:_mcg_freq_range_select
mcg_hgo_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_hgo_select_t;$/;"	t	typeref:enum:_mcg_hgo_select
mcg_ircst_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_ircst_status_t;$/;"	t	typeref:enum:_mcg_ircst_status
mcg_iref_clock_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_iref_clock_select_t;$/;"	t	typeref:enum:_mcg_iref_clock_select
mcg_iref_clock_source_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_iref_clock_source_t;$/;"	t	typeref:enum:_mcg_iref_clock_source
mcg_irefst_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_irefst_status_t;$/;"	t	typeref:enum:_mcg_irefst_status
mcg_lock_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_lock_status_t;$/;"	t	typeref:enum:_mcg_lock_status
mcg_locs0_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_locs0_status_t;$/;"	t	typeref:enum:_mcg_locs0_status
mcg_locs1_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_locs1_status_t;$/;"	t	typeref:enum:_mcg_locs1_status
mcg_locs2_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_locs2_status_t;$/;"	t	typeref:enum:_mcg_locs2_status
mcg_lols_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_lols_status_t;$/;"	t	typeref:enum:_mcg_lols_status
mcg_lp_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_lp_select_t;$/;"	t	typeref:enum:_mcg_lp_select
mcg_oscsel_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_oscsel_select_t;$/;"	t	typeref:enum:_mcg_oscsel_select
mcg_pll_eref_clock_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_pll_eref_clock_select_t;$/;"	t	typeref:enum:_mcg_pll_eref_clock_select
mcg_pll_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_pll_select_t;$/;"	t	typeref:enum:_mcg_pll_select
mcg_pllcs_select_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_pllcs_select_t;$/;"	t	typeref:enum:_mcg_pllcs_select
mcg_pllst_status_t	hal\mcg\fsl_mcg_hal.h	/^} mcg_pllst_status_t;$/;"	t	typeref:enum:_mcg_pllst_status
FSL_FEATURE_OSC_COUNT	hal\osc\fsl_osc_features.h	40;"	d
FSL_FEATURE_OSC_COUNT	hal\osc\fsl_osc_features.h	46;"	d
FSL_FEATURE_OSC_COUNT	hal\osc\fsl_osc_features.h	52;"	d
FSL_FEATURE_OSC_COUNT	hal\osc\fsl_osc_features.h	57;"	d
FSL_FEATURE_OSC_HAS_OSC	hal\osc\fsl_osc_features.h	39;"	d
FSL_FEATURE_OSC_HAS_OSC	hal\osc\fsl_osc_features.h	45;"	d
FSL_FEATURE_OSC_HAS_OSC	hal\osc\fsl_osc_features.h	51;"	d
FSL_FEATURE_OSC_HAS_OSC	hal\osc\fsl_osc_features.h	56;"	d
FSL_FEATURE_OSC_HAS_OSC0	hal\osc\fsl_osc_features.h	38;"	d
FSL_FEATURE_OSC_HAS_OSC0	hal\osc\fsl_osc_features.h	44;"	d
FSL_FEATURE_OSC_HAS_OSC0	hal\osc\fsl_osc_features.h	50;"	d
FSL_FEATURE_OSC_HAS_OSC0	hal\osc\fsl_osc_features.h	55;"	d
FSL_FEATURE_OSC_HAS_OSC1	hal\osc\fsl_osc_features.h	37;"	d
FSL_FEATURE_OSC_HAS_OSC1	hal\osc\fsl_osc_features.h	43;"	d
FSL_FEATURE_OSC_HAS_OSC1	hal\osc\fsl_osc_features.h	49;"	d
FSL_FEATURE_OSC_HAS_OSC1	hal\osc\fsl_osc_features.h	54;"	d
__FSL_OSC_FEATURES_H__	hal\osc\fsl_osc_features.h	31;"	d
osc_hal_disable_capacitor_config	hal\osc\fsl_osc_hal.c	/^void osc_hal_disable_capacitor_config(osc_instance_t instance, uint32_t capacitorConfigs)$/;"	f
osc_hal_disable_external_reference_clock	hal\osc\fsl_osc_hal.c	/^void osc_hal_disable_external_reference_clock(osc_instance_t instance)$/;"	f
osc_hal_disable_external_reference_clock_in_stop_mode	hal\osc\fsl_osc_hal.c	/^void osc_hal_disable_external_reference_clock_in_stop_mode(osc_instance_t instance)$/;"	f
osc_hal_enable_capacitor_config	hal\osc\fsl_osc_hal.c	/^void osc_hal_enable_capacitor_config(osc_instance_t instance, uint32_t capacitorConfigs)$/;"	f
osc_hal_enable_external_reference_clock	hal\osc\fsl_osc_hal.c	/^void osc_hal_enable_external_reference_clock(osc_instance_t instance)$/;"	f
osc_hal_enable_external_reference_clock_in_stop_mode	hal\osc\fsl_osc_hal.c	/^void osc_hal_enable_external_reference_clock_in_stop_mode(osc_instance_t instance)$/;"	f
__FSL_OSC_HAL_H__	hal\osc\fsl_osc_hal.h	31;"	d
_osc_capacitor_config	hal\osc\fsl_osc_hal.h	/^typedef enum _osc_capacitor_config {$/;"	g
_osc_instance	hal\osc\fsl_osc_hal.h	/^typedef enum _osc_instance {$/;"	g
kOsc0	hal\osc\fsl_osc_hal.h	/^    kOsc0 = 0,           \/*!< Oscillator 0*\/$/;"	e	enum:_osc_instance
kOsc1	hal\osc\fsl_osc_hal.h	/^    kOsc1 = 1            \/*!< Oscillator 1*\/$/;"	e	enum:_osc_instance
kOscCapacitor16p	hal\osc\fsl_osc_hal.h	/^    kOscCapacitor16p = OSC_CR_SC16P_MASK    \/*!< 16 pF capacitor load *\/$/;"	e	enum:_osc_capacitor_config
kOscCapacitor2p	hal\osc\fsl_osc_hal.h	/^    kOscCapacitor2p = OSC_CR_SC2P_MASK,     \/*!< 2 pF capacitor load *\/$/;"	e	enum:_osc_capacitor_config
kOscCapacitor4p	hal\osc\fsl_osc_hal.h	/^    kOscCapacitor4p = OSC_CR_SC4P_MASK,     \/*!< 4 pF capacitor load *\/$/;"	e	enum:_osc_capacitor_config
kOscCapacitor8p	hal\osc\fsl_osc_hal.h	/^    kOscCapacitor8p = OSC_CR_SC8P_MASK,     \/*!< 8 pF capacitor load *\/$/;"	e	enum:_osc_capacitor_config
kOscCapacitorMask	hal\osc\fsl_osc_hal.h	65;"	d
osc_capacitor_config_t	hal\osc\fsl_osc_hal.h	/^} osc_capacitor_config_t;$/;"	t	typeref:enum:_osc_capacitor_config
osc_instance_t	hal\osc\fsl_osc_hal.h	/^} osc_instance_t;$/;"	t	typeref:enum:_osc_instance
FSL_FEATURE_PIT_HAS_CHAIN_MODE	hal\pit\fsl_pit_features.h	148;"	d
FSL_FEATURE_PIT_HAS_CHAIN_MODE	hal\pit\fsl_pit_features.h	159;"	d
FSL_FEATURE_PIT_HAS_CHAIN_MODE	hal\pit\fsl_pit_features.h	191;"	d
FSL_FEATURE_PIT_HAS_CHAIN_MODE	hal\pit\fsl_pit_features.h	78;"	d
FSL_FEATURE_PIT_HAS_LIFETIME_TIMER	hal\pit\fsl_pit_features.h	146;"	d
FSL_FEATURE_PIT_HAS_LIFETIME_TIMER	hal\pit\fsl_pit_features.h	157;"	d
FSL_FEATURE_PIT_HAS_LIFETIME_TIMER	hal\pit\fsl_pit_features.h	189;"	d
FSL_FEATURE_PIT_HAS_LIFETIME_TIMER	hal\pit\fsl_pit_features.h	76;"	d
FSL_FEATURE_PIT_TIMER_COUNT	hal\pit\fsl_pit_features.h	144;"	d
FSL_FEATURE_PIT_TIMER_COUNT	hal\pit\fsl_pit_features.h	155;"	d
FSL_FEATURE_PIT_TIMER_COUNT	hal\pit\fsl_pit_features.h	187;"	d
FSL_FEATURE_PIT_TIMER_COUNT	hal\pit\fsl_pit_features.h	74;"	d
__FSL_PIT_FEATURES_H__	hal\pit\fsl_pit_features.h	31;"	d
pit_hal_configure_interrupt	hal\pit\fsl_pit_hal.c	/^void pit_hal_configure_interrupt(uint32_t timer, bool enable)$/;"	f
pit_hal_configure_timer_chain	hal\pit\fsl_pit_hal.c	/^void pit_hal_configure_timer_chain(uint32_t timer, bool enable)$/;"	f
pit_hal_configure_timer_run_in_debug	hal\pit\fsl_pit_hal.c	/^void pit_hal_configure_timer_run_in_debug(bool timerRun)$/;"	f
pit_hal_read_lifetime_timer_count	hal\pit\fsl_pit_hal.c	/^uint64_t pit_hal_read_lifetime_timer_count(void)$/;"	f
__FSL_PIT_HAL_H__	hal\pit\fsl_pit_hal.h	31;"	d
pit_hal_clear_interrupt_flag	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_clear_interrupt_flag(uint32_t timer)$/;"	f
pit_hal_disable	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_disable(void)$/;"	f
pit_hal_enable	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_enable(void)$/;"	f
pit_hal_is_timeout_occurred	hal\pit\fsl_pit_hal.h	/^static inline bool pit_hal_is_timeout_occurred(uint32_t timer)$/;"	f
pit_hal_read_timer_count	hal\pit\fsl_pit_hal.h	/^static inline uint32_t pit_hal_read_timer_count(uint32_t timer)$/;"	f
pit_hal_set_timer_period_count	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_set_timer_period_count(uint32_t timer, uint32_t count)$/;"	f
pit_hal_timer_start	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_timer_start(uint32_t timer)$/;"	f
pit_hal_timer_stop	hal\pit\fsl_pit_hal.h	/^static inline void pit_hal_timer_stop(uint32_t timer)$/;"	f
FSL_FEATURE_SMC_HAS_BGEN	hal\pmc\fsl_pmc_features.h	37;"	d
FSL_FEATURE_SMC_HAS_BGEN	hal\pmc\fsl_pmc_features.h	40;"	d
FSL_FEATURE_SMC_HAS_BGEN	hal\pmc\fsl_pmc_features.h	42;"	d
FSL_FEATURE_SMC_HAS_BGEN	hal\pmc\fsl_pmc_features.h	44;"	d
__FSL_PMC_FEATURES_H__	hal\pmc\fsl_pmc_features.h	31;"	d
__FSL_PMC_HAL_H__	hal\pmc\fsl_pmc_hal.h	31;"	d
_pmc_lvdv_select	hal\pmc\fsl_pmc_hal.h	/^typedef enum _pmc_lvdv_select {$/;"	g
_pmc_lvwv_select	hal\pmc\fsl_pmc_hal.h	/^typedef enum _pmc_lvwv_select {$/;"	g
kPmcLvdvHighTrip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvdvHighTrip,           \/*!< High trip point selected (V LVD = V LVDH )*\/$/;"	e	enum:_pmc_lvdv_select
kPmcLvdvLowTrip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvdvLowTrip,            \/*!< Low trip point selected (V LVD = V LVDL )*\/$/;"	e	enum:_pmc_lvdv_select
kPmcLvwvHighTrip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvwvHighTrip            \/*!< High trip point selected (VLVW = VLVW4)*\/$/;"	e	enum:_pmc_lvwv_select
kPmcLvwvLowTrip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvwvLowTrip,            \/*!< Low trip point selected (VLVW = VLVW1)*\/$/;"	e	enum:_pmc_lvwv_select
kPmcLvwvMid1Trip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvwvMid1Trip,           \/*!< Mid 1 trip point selected (VLVW = VLVW2)*\/$/;"	e	enum:_pmc_lvwv_select
kPmcLvwvMid2Trip	hal\pmc\fsl_pmc_hal.h	/^    kPmcLvwvMid2Trip,           \/*!< Mid 2 trip point selected (VLVW = VLVW3)*\/$/;"	e	enum:_pmc_lvwv_select
pmc_hal_clear_ack_isolation	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_clear_ack_isolation(void)$/;"	f
pmc_hal_disable_bandgap_buffer	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_disable_bandgap_buffer(void)$/;"	f
pmc_hal_disable_bandgap_in_low_power_mode	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_disable_bandgap_in_low_power_mode(void)$/;"	f
pmc_hal_disable_low_voltage_detect_interrupt	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_disable_low_voltage_detect_interrupt(void)$/;"	f
pmc_hal_disable_low_voltage_detect_reset	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_disable_low_voltage_detect_reset(void)$/;"	f
pmc_hal_disable_low_voltage_warning_interrupt	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_disable_low_voltage_warning_interrupt(void)$/;"	f
pmc_hal_enable_bandgap_buffer	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_enable_bandgap_buffer(void)$/;"	f
pmc_hal_enable_bandgap_in_low_power_mode	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_enable_bandgap_in_low_power_mode(void)$/;"	f
pmc_hal_enable_low_voltage_detect_interrupt	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_enable_low_voltage_detect_interrupt(void)$/;"	f
pmc_hal_enable_low_voltage_detect_reset	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_enable_low_voltage_detect_reset(void)$/;"	f
pmc_hal_enable_low_voltage_warning_interrupt	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_enable_low_voltage_warning_interrupt(void)$/;"	f
pmc_hal_get_ack_isolation	hal\pmc\fsl_pmc_hal.h	/^static inline uint8_t pmc_hal_get_ack_isolation(void)$/;"	f
pmc_hal_get_low_voltage_detect_flag	hal\pmc\fsl_pmc_hal.h	/^static inline bool pmc_hal_get_low_voltage_detect_flag(void)$/;"	f
pmc_hal_get_low_voltage_detect_voltage_select	hal\pmc\fsl_pmc_hal.h	/^static inline pmc_lvdv_select_t pmc_hal_get_low_voltage_detect_voltage_select(void)$/;"	f
pmc_hal_get_low_voltage_warning_flag	hal\pmc\fsl_pmc_hal.h	/^static inline bool pmc_hal_get_low_voltage_warning_flag(void)$/;"	f
pmc_hal_get_low_voltage_warning_voltage_select	hal\pmc\fsl_pmc_hal.h	/^static inline pmc_lvwv_select_t pmc_hal_get_low_voltage_warning_voltage_select(void)$/;"	f
pmc_hal_get_regulator_status	hal\pmc\fsl_pmc_hal.h	/^static inline uint8_t pmc_hal_get_regulator_status(void)$/;"	f
pmc_hal_low_voltage_detect_ack	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_low_voltage_detect_ack(void)$/;"	f
pmc_hal_low_voltage_warning_ack	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_low_voltage_warning_ack(void)$/;"	f
pmc_hal_set_low_voltage_detect_voltage_select	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_set_low_voltage_detect_voltage_select(pmc_lvdv_select_t select)$/;"	f
pmc_hal_set_low_voltage_warning_voltage_select	hal\pmc\fsl_pmc_hal.h	/^static inline void pmc_hal_set_low_voltage_warning_voltage_select(pmc_lvwv_select_t select)$/;"	f
pmc_lvdv_select_t	hal\pmc\fsl_pmc_hal.h	/^} pmc_lvdv_select_t;$/;"	t	typeref:enum:_pmc_lvdv_select
pmc_lvwv_select_t	hal\pmc\fsl_pmc_hal.h	/^} pmc_lvwv_select_t;$/;"	t	typeref:enum:_pmc_lvwv_select
FSL_FEATURE_PORT_HAS_DIGITAL_FILTER	hal\port\fsl_port_features.h	119;"	d
FSL_FEATURE_PORT_HAS_DIGITAL_FILTER	hal\port\fsl_port_features.h	194;"	d
FSL_FEATURE_PORT_HAS_DIGITAL_FILTER	hal\port\fsl_port_features.h	218;"	d
FSL_FEATURE_PORT_HAS_DIGITAL_FILTER	hal\port\fsl_port_features.h	256;"	d
FSL_FEATURE_PORT_HAS_DIGITAL_FILTER	hal\port\fsl_port_features.h	293;"	d
FSL_FEATURE_PORT_HAS_DIGITAL_FILTERn	hal\port\fsl_port_features.h	163;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	121;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	170;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	196;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	220;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	258;"	d
FSL_FEATURE_PORT_HAS_DMA_REQUEST	hal\port\fsl_port_features.h	295;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	131;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	180;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	206;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	230;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	273;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH	hal\port\fsl_port_features.h	310;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	133;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	182;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	208;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	232;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	275;"	d
FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH_REGISTER	hal\port\fsl_port_features.h	312;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	135;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	184;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	210;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	234;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	277;"	d
FSL_FEATURE_PORT_HAS_GLITCH_FILTER	hal\port\fsl_port_features.h	314;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	117;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	161;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	192;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	216;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	254;"	d
FSL_FEATURE_PORT_HAS_OPEN_DRAIN	hal\port\fsl_port_features.h	291;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTER	hal\port\fsl_port_features.h	129;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTER	hal\port\fsl_port_features.h	178;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTER	hal\port\fsl_port_features.h	204;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTER	hal\port\fsl_port_features.h	228;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTERn	hal\port\fsl_port_features.h	266;"	d
FSL_FEATURE_PORT_HAS_PASSIVE_FILTERn	hal\port\fsl_port_features.h	303;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	115;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	159;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	190;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	214;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	252;"	d
FSL_FEATURE_PORT_HAS_PIN_CONTROL_LOCK	hal\port\fsl_port_features.h	289;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	125;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	174;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	200;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	224;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	262;"	d
FSL_FEATURE_PORT_HAS_PULL_ENABLE_REGISTER	hal\port\fsl_port_features.h	299;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	123;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	172;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	198;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	222;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	260;"	d
FSL_FEATURE_PORT_HAS_PULL_SELECTION	hal\port\fsl_port_features.h	297;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	127;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	176;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	202;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	226;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	264;"	d
FSL_FEATURE_PORT_HAS_SLEW_RATE	hal\port\fsl_port_features.h	301;"	d
__FSL_PORT_FEATURES_H__	hal\port\fsl_port_features.h	31;"	d
port_hal_global_pin_control_high	hal\port\fsl_port_hal.c	/^void port_hal_global_pin_control_high(uint32_t instance, uint16_t highPinSelect, uint16_t config)$/;"	f
port_hal_global_pin_control_low	hal\port\fsl_port_hal.c	/^void port_hal_global_pin_control_low(uint32_t instance, uint16_t lowPinSelect, uint16_t config)$/;"	f
__FSL_PORT_HAL_H__	hal\port\fsl_port_hal.h	31;"	d
_port_digital_filter_clock_source	hal\port\fsl_port_hal.h	/^typedef enum _port_digital_filter_clock_source {$/;"	g
_port_drive_strength	hal\port\fsl_port_hal.h	/^typedef enum _port_drive_strength {$/;"	g
_port_interrupt_config	hal\port\fsl_port_hal.h	/^typedef enum _port_interrupt_config {$/;"	g
_port_mux	hal\port\fsl_port_hal.h	/^typedef enum _port_mux {$/;"	g
_port_pull	hal\port\fsl_port_hal.h	/^typedef enum _port_pull {$/;"	g
_port_slew_rate	hal\port\fsl_port_hal.h	/^typedef enum _port_slew_rate {$/;"	g
kPortBusClock	hal\port\fsl_port_hal.h	/^    kPortBusClock = 0,  \/*!< digital filters are clocked by the bus clock.*\/$/;"	e	enum:_port_digital_filter_clock_source
kPortDmaEitherEdge	hal\port\fsl_port_hal.h	/^    kPortDmaEitherEdge  = 0x3,  \/*!< DMA request on either edge.*\/$/;"	e	enum:_port_interrupt_config
kPortDmaFallingEdge	hal\port\fsl_port_hal.h	/^    kPortDmaFallingEdge = 0x2,  \/*!< DMA request on falling edge.*\/$/;"	e	enum:_port_interrupt_config
kPortDmaRisingEdge	hal\port\fsl_port_hal.h	/^    kPortDmaRisingEdge  = 0x1,  \/*!< DMA request on rising edge.*\/$/;"	e	enum:_port_interrupt_config
kPortFastSlewRate	hal\port\fsl_port_hal.h	/^    kPortFastSlewRate = 0,  \/*!< fast slew rate is configured.*\/$/;"	e	enum:_port_slew_rate
kPortHighDriveStrength	hal\port\fsl_port_hal.h	/^    kPortHighDriveStrength = 1  \/*!< high drive strength is configured.*\/$/;"	e	enum:_port_drive_strength
kPortIntDisabled	hal\port\fsl_port_hal.h	/^    kPortIntDisabled    = 0x0,  \/*!< interrupt\/DMA request is disabled.*\/$/;"	e	enum:_port_interrupt_config
kPortIntEitherEdge	hal\port\fsl_port_hal.h	/^    kPortIntEitherEdge  = 0xB,  \/*!< Interrupt on either edge. *\/$/;"	e	enum:_port_interrupt_config
kPortIntFallingEdge	hal\port\fsl_port_hal.h	/^    kPortIntFallingEdge = 0xA,  \/*!< Interrupt on falling edge. *\/$/;"	e	enum:_port_interrupt_config
kPortIntLogicOne	hal\port\fsl_port_hal.h	/^    kPortIntLogicOne    = 0xC   \/*!< Interrupt when logic one. *\/$/;"	e	enum:_port_interrupt_config
kPortIntLogicZero	hal\port\fsl_port_hal.h	/^    kPortIntLogicZero   = 0x8,  \/*!< Interrupt when logic zero. *\/$/;"	e	enum:_port_interrupt_config
kPortIntRisingEdge	hal\port\fsl_port_hal.h	/^    kPortIntRisingEdge  = 0x9,  \/*!< Interrupt on rising edge. *\/$/;"	e	enum:_port_interrupt_config
kPortLPOClock	hal\port\fsl_port_hal.h	/^    kPortLPOClock = 1   \/*!< digital filters are clocked by the 1 kHz LPO clock.*\/$/;"	e	enum:_port_digital_filter_clock_source
kPortLowDriveStrength	hal\port\fsl_port_hal.h	/^    kPortLowDriveStrength  = 0, \/*!< low drive strength is configured.*\/$/;"	e	enum:_port_drive_strength
kPortMuxAlt2	hal\port\fsl_port_hal.h	/^    kPortMuxAlt2     = 2,   \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAlt3	hal\port\fsl_port_hal.h	/^    kPortMuxAlt3     = 3,   \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAlt4	hal\port\fsl_port_hal.h	/^    kPortMuxAlt4     = 4,   \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAlt5	hal\port\fsl_port_hal.h	/^    kPortMuxAlt5     = 5,   \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAlt6	hal\port\fsl_port_hal.h	/^    kPortMuxAlt6     = 6,   \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAlt7	hal\port\fsl_port_hal.h	/^    kPortMuxAlt7     = 7    \/*!< chip-specific*\/$/;"	e	enum:_port_mux
kPortMuxAsGpio	hal\port\fsl_port_hal.h	/^    kPortMuxAsGpio   = 1,   \/*!< corresponding pin is configured as GPIO.*\/$/;"	e	enum:_port_mux
kPortPinDisabled	hal\port\fsl_port_hal.h	/^    kPortPinDisabled = 0,   \/*!< corresponding pin is disabled as analog.*\/$/;"	e	enum:_port_mux
kPortPullDown	hal\port\fsl_port_hal.h	/^    kPortPullDown = 0,  \/*!< internal pulldown resistor is enabled.*\/$/;"	e	enum:_port_pull
kPortPullUp	hal\port\fsl_port_hal.h	/^    kPortPullUp   = 1   \/*!< internal pullup resistor is enabled.*\/$/;"	e	enum:_port_pull
kPortSlowSlewRate	hal\port\fsl_port_hal.h	/^    kPortSlowSlewRate = 1   \/*!< slow slew rate is configured.*\/$/;"	e	enum:_port_slew_rate
port_digital_filter_clock_source_t	hal\port\fsl_port_hal.h	/^} port_digital_filter_clock_source_t;$/;"	t	typeref:enum:_port_digital_filter_clock_source
port_drive_strength_t	hal\port\fsl_port_hal.h	/^} port_drive_strength_t;$/;"	t	typeref:enum:_port_drive_strength
port_hal_clear_pin_interrupt_flag	hal\port\fsl_port_hal.h	/^static inline void port_hal_clear_pin_interrupt_flag(uint32_t instance, uint32_t pin)$/;"	f
port_hal_clear_port_interrupt_flag	hal\port\fsl_port_hal.h	/^static inline void port_hal_clear_port_interrupt_flag(uint32_t instance)$/;"	f
port_hal_configure_digital_filter	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_digital_filter(uint32_t instance, $/;"	f
port_hal_configure_digital_filter_clock	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_digital_filter_clock(uint32_t instance, $/;"	f
port_hal_configure_digital_filter_width	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_digital_filter_width(uint32_t instance, uint8_t width)$/;"	f
port_hal_configure_drive_strength	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_drive_strength(uint32_t instance, $/;"	f
port_hal_configure_open_drain	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_open_drain(uint32_t instance, $/;"	f
port_hal_configure_passive_filter	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_passive_filter(uint32_t instance, $/;"	f
port_hal_configure_pin_control_lock	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_pin_control_lock(uint32_t instance, $/;"	f
port_hal_configure_pin_interrupt	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_pin_interrupt(uint32_t instance, $/;"	f
port_hal_configure_pull	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_pull(uint32_t instance, uint32_t pin, bool isPullEnabled)$/;"	f
port_hal_configure_slew_rate	hal\port\fsl_port_hal.h	/^static inline void port_hal_configure_slew_rate(uint32_t instance, $/;"	f
port_hal_mux_control	hal\port\fsl_port_hal.h	/^static inline void port_hal_mux_control(uint32_t instance, uint32_t pin, port_mux_t mux)$/;"	f
port_hal_pull_select	hal\port\fsl_port_hal.h	/^static inline void port_hal_pull_select(uint32_t instance, $/;"	f
port_hal_read_pin_interrupt_flag	hal\port\fsl_port_hal.h	/^static inline bool port_hal_read_pin_interrupt_flag(uint32_t instance, uint32_t pin)$/;"	f
port_hal_read_port_interrupt_flag	hal\port\fsl_port_hal.h	/^static inline uint32_t port_hal_read_port_interrupt_flag(uint32_t instance)$/;"	f
port_interrupt_config_t	hal\port\fsl_port_hal.h	/^} port_interrupt_config_t;$/;"	t	typeref:enum:_port_interrupt_config
port_mux_t	hal\port\fsl_port_hal.h	/^} port_mux_t;$/;"	t	typeref:enum:_port_mux
port_pull_t	hal\port\fsl_port_hal.h	/^} port_pull_t;$/;"	t	typeref:enum:_port_pull
port_slew_rate_t	hal\port\fsl_port_hal.h	/^} port_slew_rate_t;$/;"	t	typeref:enum:_port_slew_rate
FSL_FEATURE_RTC_HAS_ACCESS_CONTROL	hal\rtc\fsl_rtc_features.h	40;"	d
FSL_FEATURE_RTC_HAS_ACCESS_CONTROL	hal\rtc\fsl_rtc_features.h	46;"	d
FSL_FEATURE_RTC_HAS_ACCESS_CONTROL	hal\rtc\fsl_rtc_features.h	53;"	d
FSL_FEATURE_RTC_HAS_ACCESS_CONTROL	hal\rtc\fsl_rtc_features.h	60;"	d
FSL_FEATURE_RTC_HAS_MONOTONIC	hal\rtc\fsl_rtc_features.h	39;"	d
FSL_FEATURE_RTC_HAS_MONOTONIC	hal\rtc\fsl_rtc_features.h	45;"	d
FSL_FEATURE_RTC_HAS_MONOTONIC	hal\rtc\fsl_rtc_features.h	52;"	d
FSL_FEATURE_RTC_HAS_MONOTONIC	hal\rtc\fsl_rtc_features.h	59;"	d
FSL_FEATURE_RTC_HAS_WAKEUP_PIN	hal\rtc\fsl_rtc_features.h	38;"	d
FSL_FEATURE_RTC_HAS_WAKEUP_PIN	hal\rtc\fsl_rtc_features.h	44;"	d
FSL_FEATURE_RTC_HAS_WAKEUP_PIN	hal\rtc\fsl_rtc_features.h	51;"	d
FSL_FEATURE_RTC_HAS_WAKEUP_PIN	hal\rtc\fsl_rtc_features.h	58;"	d
__FSL_RTC_FEATURES_H__	hal\rtc\fsl_rtc_features.h	31;"	d
rtc_hal_init	hal\rtc\fsl_rtc_hal.c	/^void rtc_hal_init(rtc_hal_init_config_t * configs)$/;"	f
__FSL_RTC_HAL_H__	hal\rtc\fsl_rtc_hal.h	31;"	d
alarmCounterAt	hal\rtc\fsl_rtc_hal.h	/^  uint32_t alarmCounterAt;$/;"	m	struct:rtc_hal_init_config
compensationInterval	hal\rtc\fsl_rtc_hal.h	/^  uint8_t compensationInterval;$/;"	m	struct:rtc_hal_init_config
disableClockOutToPeripheral	hal\rtc\fsl_rtc_hal.h	/^  bool disableClockOutToPeripheral; \/*!< at register field CR[CLKO]*\/$/;"	m	struct:rtc_hal_init_config
enable32kOscillator	hal\rtc\fsl_rtc_hal.h	/^  bool enable32kOscillator; \/*!< at register field CR[OSCE]*\/$/;"	m	struct:rtc_hal_init_config
enableInterrupts	hal\rtc\fsl_rtc_hal.h	/^  hw_rtc_ier_t enableInterrupts;$/;"	m	struct:rtc_hal_init_config
enableOscillatorLoadConfg	hal\rtc\fsl_rtc_hal.h	/^  uint8_t enableOscillatorLoadConfg;$/;"	m	struct:rtc_hal_init_config
enableWakeupPin	hal\rtc\fsl_rtc_hal.h	/^  bool enableWakeupPin;$/;"	m	struct:rtc_hal_init_config
monotonicCounterAt	hal\rtc\fsl_rtc_hal.h	/^  uint64_t * monotonicCounterAt;$/;"	m	struct:rtc_hal_init_config
prescalerAt	hal\rtc\fsl_rtc_hal.h	/^  uint16_t prescalerAt;$/;"	m	struct:rtc_hal_init_config
rtc_hal_config_alarm_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_alarm_int_enable(bool enable)$/;"	f
rtc_hal_config_clock_out	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_clock_out(bool enable)$/;"	f
rtc_hal_config_interrupts	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_interrupts(hw_rtc_ier_t * bitfields)$/;"	f
rtc_hal_config_lock_registers	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_lock_registers(hw_rtc_lr_t bitfields)$/;"	f
rtc_hal_config_osc_16pf_load	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_osc_16pf_load(bool enable)$/;"	f
rtc_hal_config_osc_2pf_load	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_osc_2pf_load(bool enable)$/;"	f
rtc_hal_config_osc_4pf_load	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_osc_4pf_load(bool enable)$/;"	f
rtc_hal_config_osc_8pf_load	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_osc_8pf_load(bool enable)$/;"	f
rtc_hal_config_oscillator	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_oscillator(bool enable)$/;"	f
rtc_hal_config_seconds_int	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_seconds_int(bool enable)$/;"	f
rtc_hal_config_time_interval_int	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_time_interval_int(bool enable)$/;"	f
rtc_hal_config_time_overflow_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_time_overflow_int_enable(bool enable)$/;"	f
rtc_hal_config_wakeup_pin	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_config_wakeup_pin(bool enable_wp)$/;"	f
rtc_hal_configure_supervisor_access	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_configure_supervisor_access(bool enable_reg_write)$/;"	f
rtc_hal_configure_update_mode	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_configure_update_mode(bool lock)$/;"	f
rtc_hal_counter_enable	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_counter_enable(bool enable)$/;"	f
rtc_hal_get_alarm	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_alarm(uint32_t * seconds)$/;"	f
rtc_hal_get_comp_intrvl_counter	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_comp_intrvl_counter(uint8_t * counter)$/;"	f
rtc_hal_get_compensation_interval	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_compensation_interval(uint8_t * value)$/;"	f
rtc_hal_get_control_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_get_control_reg_lock(void)$/;"	f
rtc_hal_get_current_time_compensation	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_current_time_compensation(uint8_t * tcValue)$/;"	f
rtc_hal_get_lock_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_get_lock_reg_lock(void)$/;"	f
rtc_hal_get_prescaler	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_prescaler(uint16_t * prescale)$/;"	f
rtc_hal_get_seconds	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_seconds(uint32_t * seconds)$/;"	f
rtc_hal_get_status_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_get_status_reg_lock(void)$/;"	f
rtc_hal_get_time_comp_lock	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_get_time_comp_lock(void)$/;"	f
rtc_hal_get_time_compensation	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_get_time_compensation(uint8_t * value)$/;"	f
rtc_hal_init_config	hal\rtc\fsl_rtc_hal.h	/^typedef struct rtc_hal_init_config$/;"	s
rtc_hal_init_config_t	hal\rtc\fsl_rtc_hal.h	/^} rtc_hal_init_config_t;$/;"	t	typeref:struct:rtc_hal_init_config
rtc_hal_is_alarm_occured	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_is_alarm_occured(void)$/;"	f
rtc_hal_is_counter_enabled	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_is_counter_enabled(void)$/;"	f
rtc_hal_is_counter_overflow	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_is_counter_overflow(void)$/;"	f
rtc_hal_is_time_invalid	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_is_time_invalid(void)$/;"	f
rtc_hal_read_alarm_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_read_alarm_int_enable(void)$/;"	f
rtc_hal_read_seconds_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_read_seconds_int_enable(void)$/;"	f
rtc_hal_read_time_interval_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_read_time_interval_int_enable(void)$/;"	f
rtc_hal_read_time_overflow_int_enable	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_read_time_overflow_int_enable(void)$/;"	f
rtc_hal_reset_reg_CR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_CR(void)$/;"	f
rtc_hal_reset_reg_IER	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_IER(void)$/;"	f
rtc_hal_reset_reg_LR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_LR(void)$/;"	f
rtc_hal_reset_reg_SR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_SR(void)$/;"	f
rtc_hal_reset_reg_TAR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_TAR(void)$/;"	f
rtc_hal_reset_reg_TCR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_TCR(void)$/;"	f
rtc_hal_reset_reg_TPR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_TPR(void)$/;"	f
rtc_hal_reset_reg_TSR	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_reset_reg_TSR(void)$/;"	f
rtc_hal_set_alarm	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_alarm(const uint32_t * seconds)$/;"	f
rtc_hal_set_compensation_interval	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_compensation_interval(const uint8_t * value)$/;"	f
rtc_hal_set_control_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_control_reg_lock(bool set_to)$/;"	f
rtc_hal_set_lock_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_lock_reg_lock(bool set_to)$/;"	f
rtc_hal_set_prescaler	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_set_prescaler(const uint16_t * prescale)$/;"	f
rtc_hal_set_seconds	hal\rtc\fsl_rtc_hal.h	/^static inline bool rtc_hal_set_seconds(const uint32_t * seconds)$/;"	f
rtc_hal_set_status_reg_lock	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_status_reg_lock(bool set_to)$/;"	f
rtc_hal_set_time_comp_lock	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_time_comp_lock(bool set_to)$/;"	f
rtc_hal_set_time_compensation	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_set_time_compensation(const uint8_t * enable)$/;"	f
rtc_hal_software_reset	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_software_reset(void)$/;"	f
rtc_hal_software_reset_flag_clear	hal\rtc\fsl_rtc_hal.h	/^static inline void rtc_hal_software_reset_flag_clear(void)$/;"	f
startSecondsCounterAt	hal\rtc\fsl_rtc_hal.h	/^  uint32_t startSecondsCounterAt;$/;"	m	struct:rtc_hal_init_config
timeCompensation	hal\rtc\fsl_rtc_hal.h	/^  uint8_t timeCompensation;$/;"	m	struct:rtc_hal_init_config
__FSL_RTC_HAL_ACCESS_CONTROL_H__	hal\rtc\fsl_rtc_hal_access_control.h	31;"	d
readFlags	hal\rtc\fsl_rtc_hal_access_control.h	/^  hw_rtc_rar_t readFlags;$/;"	m	struct:rtc_hal_access_control_config
rtc_hal_access_control_config	hal\rtc\fsl_rtc_hal_access_control.h	/^typedef struct rtc_hal_access_control_config$/;"	s
rtc_hal_access_control_config_t	hal\rtc\fsl_rtc_hal_access_control.h	/^} rtc_hal_access_control_config_t;$/;"	t	typeref:struct:rtc_hal_access_control_config
rtc_hal_access_control_configuration	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_access_control_configuration(const rtc_hal_access_control_config_t * flags)$/;"	f
rtc_hal_get_alarm_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_alarm_rreg(void)$/;"	f
rtc_hal_get_alarm_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_alarm_wreg(void)$/;"	f
rtc_hal_get_compensation_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_compensation_rreg(void)$/;"	f
rtc_hal_get_compensation_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_compensation_wreg(void)$/;"	f
rtc_hal_get_control_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_control_rreg(void)$/;"	f
rtc_hal_get_control_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_control_wreg(void)$/;"	f
rtc_hal_get_interrupt_enable_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_interrupt_enable_rreg(void)$/;"	f
rtc_hal_get_interrupt_enable_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_interrupt_enable_wreg(void)$/;"	f
rtc_hal_get_lock_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_lock_rreg(void)$/;"	f
rtc_hal_get_lock_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_lock_wreg(void)$/;"	f
rtc_hal_get_monotonic_enable_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_enable_rreg(void)$/;"	f
rtc_hal_get_monotonic_enable_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_enable_wreg(void)$/;"	f
rtc_hal_get_monotonic_hcount_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_hcount_rreg(void)$/;"	f
rtc_hal_get_monotonic_hcount_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_hcount_wreg(void)$/;"	f
rtc_hal_get_monotonic_lcount_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_lcount_rreg(void)$/;"	f
rtc_hal_get_monotonic_lcount_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_monotonic_lcount_wreg(void)$/;"	f
rtc_hal_get_prescaler_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_prescaler_rreg(void)$/;"	f
rtc_hal_get_prescaler_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_prescaler_wreg(void)$/;"	f
rtc_hal_get_seconds_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_seconds_rreg(void)$/;"	f
rtc_hal_get_seconds_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_seconds_wreg(void)$/;"	f
rtc_hal_get_status_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_status_rreg(void)$/;"	f
rtc_hal_get_status_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline bool rtc_hal_get_status_wreg(void)$/;"	f
rtc_hal_reset_reg_RAR	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_reset_reg_RAR(void)$/;"	f
rtc_hal_reset_reg_WAR	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_reset_reg_WAR(void)$/;"	f
rtc_hal_set_alarm_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_alarm_rreg(bool enable)$/;"	f
rtc_hal_set_alarm_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_alarm_wreg(bool enable)$/;"	f
rtc_hal_set_compensation_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_compensation_rreg(bool enable)$/;"	f
rtc_hal_set_compensation_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_compensation_wreg(bool enable)$/;"	f
rtc_hal_set_control_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_control_rreg(bool enable)$/;"	f
rtc_hal_set_control_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_control_wreg(bool enable)$/;"	f
rtc_hal_set_interrupt_enable_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_interrupt_enable_rreg(bool enable)$/;"	f
rtc_hal_set_interrupt_enable_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_interrupt_enable_wreg(bool enable)$/;"	f
rtc_hal_set_lock_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_lock_rreg(bool enable)$/;"	f
rtc_hal_set_lock_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_lock_wreg(bool enable)$/;"	f
rtc_hal_set_monotonic_enable_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_enable_rreg(bool enable)$/;"	f
rtc_hal_set_monotonic_enable_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_enable_wreg(bool enable)$/;"	f
rtc_hal_set_monotonic_hcount_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_hcount_rreg(bool enable)$/;"	f
rtc_hal_set_monotonic_hcount_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_hcount_wreg(bool enable)$/;"	f
rtc_hal_set_monotonic_lcount_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_lcount_rreg(bool enable)$/;"	f
rtc_hal_set_monotonic_lcount_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_monotonic_lcount_wreg(bool enable)$/;"	f
rtc_hal_set_prescaler_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_prescaler_rreg(bool enable)$/;"	f
rtc_hal_set_prescaler_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_prescaler_wreg(bool enable)$/;"	f
rtc_hal_set_seconds_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_seconds_rreg(bool enable)$/;"	f
rtc_hal_set_seconds_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_seconds_wreg(bool enable)$/;"	f
rtc_hal_set_status_rreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_status_rreg(bool enable)$/;"	f
rtc_hal_set_status_wreg	hal\rtc\fsl_rtc_hal_access_control.h	/^static inline void rtc_hal_set_status_wreg(bool enable)$/;"	f
writeFlags	hal\rtc\fsl_rtc_hal_access_control.h	/^  hw_rtc_war_t writeFlags;$/;"	m	struct:rtc_hal_access_control_config
__FSL_RTC_HAL_MONOTONIC_H__	hal\rtc\fsl_rtc_hal_monotonic.h	31;"	d
rtc_hal_clear_lcounter_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_clear_lcounter_lock(bool set_to)$/;"	f
rtc_hal_clear_monotonic_enable_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_clear_monotonic_enable_lock(void)$/;"	f
rtc_hal_clear_monotonic_hcounter_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_clear_monotonic_hcounter_lock(void)$/;"	f
rtc_hal_config_monot_overflow_int_enable	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_config_monot_overflow_int_enable(bool enable)$/;"	f
rtc_hal_config_monotonic_enable	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_config_monotonic_enable(bool enable)$/;"	f
rtc_hal_get_monotonic_counter	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_get_monotonic_counter(uint64_t * counter)$/;"	f
rtc_hal_is_monotonic_counter_overflow	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_is_monotonic_counter_overflow(void)$/;"	f
rtc_hal_monotonic_counter_increment	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_monotonic_counter_increment(void)$/;"	f
rtc_hal_read_lcounter_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_read_lcounter_lock(void)$/;"	f
rtc_hal_read_monot_overflow_int_enable	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_read_monot_overflow_int_enable(void)$/;"	f
rtc_hal_read_monotonic_enable	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_read_monotonic_enable(void)$/;"	f
rtc_hal_read_monotonic_enable_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_read_monotonic_enable_lock(void)$/;"	f
rtc_hal_read_monotonic_hcounter_lock	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline bool rtc_hal_read_monotonic_hcounter_lock(void)$/;"	f
rtc_hal_reset_reg_MCHR	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_reset_reg_MCHR(void)$/;"	f
rtc_hal_reset_reg_MCLR	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_reset_reg_MCLR(void)$/;"	f
rtc_hal_reset_reg_MER	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_reset_reg_MER(void)$/;"	f
rtc_hal_set_monotonic_counter	hal\rtc\fsl_rtc_hal_monotonic.h	/^static inline void rtc_hal_set_monotonic_counter(const uint64_t * counter)$/;"	f
FSL_FEATURE_I2S_CHANNEL_COUNT	hal\sai\fsl_sai_features.h	106;"	d
FSL_FEATURE_I2S_CHANNEL_COUNT	hal\sai\fsl_sai_features.h	124;"	d
FSL_FEATURE_I2S_CHANNEL_COUNT	hal\sai\fsl_sai_features.h	140;"	d
FSL_FEATURE_I2S_FIFO_COUNT	hal\sai\fsl_sai_features.h	104;"	d
FSL_FEATURE_I2S_FIFO_COUNT	hal\sai\fsl_sai_features.h	122;"	d
FSL_FEATURE_I2S_FIFO_COUNT	hal\sai\fsl_sai_features.h	138;"	d
FSL_FEATURE_I2S_MAX_WORDS_PER_FRAME	hal\sai\fsl_sai_features.h	108;"	d
FSL_FEATURE_I2S_MAX_WORDS_PER_FRAME	hal\sai\fsl_sai_features.h	126;"	d
FSL_FEATURE_I2S_MAX_WORDS_PER_FRAME	hal\sai\fsl_sai_features.h	142;"	d
__FSL_I2S_FEATURES_H__	hal\sai\fsl_sai_features.h	31;"	d
sai_hal_clear_rx_state_flag	hal\sai\fsl_sai_hal.c	/^void sai_hal_clear_rx_state_flag(uint8_t instance, sai_state_flag_t flag)$/;"	f
sai_hal_clear_tx_state_flag	hal\sai\fsl_sai_hal.c	/^void sai_hal_clear_tx_state_flag(uint8_t instance, sai_state_flag_t flag)$/;"	f
sai_hal_disable_rx_dma	hal\sai\fsl_sai_hal.c	/^void sai_hal_disable_rx_dma(uint8_t instance, sai_dma_request_t request)$/;"	f
sai_hal_disable_rx_interrupt	hal\sai\fsl_sai_hal.c	/^void sai_hal_disable_rx_interrupt(uint8_t instance, sai_interrupt_request_t source)$/;"	f
sai_hal_disable_tx_dma	hal\sai\fsl_sai_hal.c	/^void sai_hal_disable_tx_dma(uint8_t instance, sai_dma_request_t request)$/;"	f
sai_hal_disable_tx_interrupt	hal\sai\fsl_sai_hal.c	/^void sai_hal_disable_tx_interrupt(uint8_t instance, sai_interrupt_request_t source)$/;"	f
sai_hal_enable_rx_dma	hal\sai\fsl_sai_hal.c	/^void sai_hal_enable_rx_dma(uint8_t instance, sai_dma_request_t request)$/;"	f
sai_hal_enable_rx_interrupt	hal\sai\fsl_sai_hal.c	/^void sai_hal_enable_rx_interrupt(uint8_t instance, sai_interrupt_request_t source)$/;"	f
sai_hal_enable_tx_dma	hal\sai\fsl_sai_hal.c	/^void sai_hal_enable_tx_dma(uint8_t instance, sai_dma_request_t request)$/;"	f
sai_hal_enable_tx_interrupt	hal\sai\fsl_sai_hal.c	/^void sai_hal_enable_tx_interrupt(uint8_t instance, sai_interrupt_request_t source)$/;"	f
sai_hal_fifo_error_is_detected	hal\sai\fsl_sai_hal.c	/^bool sai_hal_fifo_error_is_detected(uint8_t instance, sai_io_mode_t io_mode)$/;"	f
sai_hal_fifo_request_is_detected	hal\sai\fsl_sai_hal.c	/^bool sai_hal_fifo_request_is_detected(uint8_t instance, sai_io_mode_t io_mode)$/;"	f
sai_hal_fifo_warning_is_detected	hal\sai\fsl_sai_hal.c	/^bool sai_hal_fifo_warning_is_detected(uint8_t instance, sai_io_mode_t io_mode)$/;"	f
sai_hal_get_fifo_address	hal\sai\fsl_sai_hal.c	/^uint32_t* sai_hal_get_fifo_address(uint8_t instance, sai_io_mode_t io_mode, uint8_t fifo_channel)$/;"	f
sai_hal_get_fifo_read_pointer	hal\sai\fsl_sai_hal.c	/^uint8_t sai_hal_get_fifo_read_pointer(uint8_t instance, sai_io_mode_t io_mode, uint8_t fifo_channel)$/;"	f
sai_hal_get_fifo_write_pointer	hal\sai\fsl_sai_hal.c	/^uint8_t sai_hal_get_fifo_write_pointer(uint8_t instance, sai_io_mode_t io_mode, uint8_t fifo_channel)$/;"	f
sai_hal_init	hal\sai\fsl_sai_hal.c	/^void sai_hal_init(uint8_t instance)$/;"	f
sai_hal_mclk_divider_is_update	hal\sai\fsl_sai_hal.c	/^bool sai_hal_mclk_divider_is_update(uint8_t instance)$/;"	f
sai_hal_reset_rx	hal\sai\fsl_sai_hal.c	/^void sai_hal_reset_rx(uint8_t instance, sai_reset_type_t mode)$/;"	f
sai_hal_reset_tx	hal\sai\fsl_sai_hal.c	/^void sai_hal_reset_tx(uint8_t instance, sai_reset_type_t mode)$/;"	f
sai_hal_set_mclk_divider	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_mclk_divider(uint8_t instance, uint32_t mclk, uint32_t src_clk)$/;"	f
sai_hal_set_rx_bclk_swap	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_rx_bclk_swap(uint8_t instance, bool ifswap)$/;"	f
sai_hal_set_rx_bus	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_rx_bus(uint8_t instance, sai_bus_t bus_mode)$/;"	f
sai_hal_set_rx_master_slave	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_rx_master_slave(uint8_t instance, sai_master_slave_t master_slave_mode)$/;"	f
sai_hal_set_rx_mode	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_rx_mode(uint8_t instance, sai_mode_t mode)$/;"	f
sai_hal_set_rx_sync_mode	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_rx_sync_mode(uint8_t instance, sai_sync_mode_t sync_mode)$/;"	f
sai_hal_set_tx_bclk_swap	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_tx_bclk_swap(uint8_t instance, bool ifswap)$/;"	f
sai_hal_set_tx_bus	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_tx_bus(uint8_t instance, sai_bus_t bus_mode)$/;"	f
sai_hal_set_tx_master_slave	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_tx_master_slave(uint8_t instance, sai_master_slave_t master_slave_mode)$/;"	f
sai_hal_set_tx_mode	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_tx_mode(uint8_t instance, sai_mode_t mode)$/;"	f
sai_hal_set_tx_sync_mode	hal\sai\fsl_sai_hal.c	/^void sai_hal_set_tx_sync_mode(uint8_t instance, sai_sync_mode_t sync_mode)$/;"	f
sai_hal_sync_error_is_detected	hal\sai\fsl_sai_hal.c	/^bool sai_hal_sync_error_is_detected(uint8_t instance, sai_io_mode_t io_mode)$/;"	f
sai_hal_word_start_is_detected	hal\sai\fsl_sai_hal.c	/^bool sai_hal_word_start_is_detected(uint8_t instance, sai_io_mode_t io_mode)$/;"	f
SAI_BIT_MAX	hal\sai\fsl_sai_hal.h	56;"	d
SAI_BIT_MIN	hal\sai\fsl_sai_hal.h	55;"	d
SAI_DIV_MAX	hal\sai\fsl_sai_hal.h	63;"	d
SAI_FIFO_LEN	hal\sai\fsl_sai_hal.h	67;"	d
SAI_FRACT_MAX	hal\sai\fsl_sai_hal.h	62;"	d
SAI_WATERMARK_MAX	hal\sai\fsl_sai_hal.h	66;"	d
SAI_WORD_MAX	hal\sai\fsl_sai_hal.h	59;"	d
__FSL_SAI_HAL_H__	hal\sai\fsl_sai_hal.h	32;"	d
kSaiBclkSourceBusclk	hal\sai\fsl_sai_hal.h	/^    kSaiBclkSourceBusclk = 0x0,\/*!< Bit clock using bus clock *\/$/;"	e	enum:sai_bclk_source
kSaiBclkSourceMclkDiv	hal\sai\fsl_sai_hal.h	/^    kSaiBclkSourceMclkDiv = 0x1,\/*!< Bit clock using master clock divider *\/$/;"	e	enum:sai_bclk_source
kSaiBclkSourceOtherSai0	hal\sai\fsl_sai_hal.h	/^    kSaiBclkSourceOtherSai0 = 0x2,\/*!< Bit clock from other sai device *\/$/;"	e	enum:sai_bclk_source
kSaiBclkSourceOtherSai1	hal\sai\fsl_sai_hal.h	/^    kSaiBclkSourceOtherSai1 = 0x3\/*!< Bit clock from other sai device *\/$/;"	e	enum:sai_bclk_source
kSaiBusAC97	hal\sai\fsl_sai_hal.h	/^    kSaiBusAC97 = 0x3\/*!< Use AC97 format *\/$/;"	e	enum:sai_bus
kSaiBusI2SLeft	hal\sai\fsl_sai_hal.h	/^    kSaiBusI2SLeft = 0x0,\/*!< Use I2S left aligned format *\/$/;"	e	enum:sai_bus
kSaiBusI2SRight	hal\sai\fsl_sai_hal.h	/^    kSaiBusI2SRight = 0x1,\/*!< Use I2S right aligned format *\/$/;"	e	enum:sai_bus
kSaiBusI2SType	hal\sai\fsl_sai_hal.h	/^    kSaiBusI2SType = 0x2,\/*!< Use I2S format *\/ $/;"	e	enum:sai_bus
kSaiDmaReqFIFORequest	hal\sai\fsl_sai_hal.h	/^    kSaiDmaReqFIFORequest = 0x1\/*!< FIFO request caused dma request *\/$/;"	e	enum:sai_dma_type
kSaiDmaReqFIFOWarning	hal\sai\fsl_sai_hal.h	/^    kSaiDmaReqFIFOWarning = 0x0,\/*!< FIFO warning caused dma request *\/$/;"	e	enum:sai_dma_type
kSaiIOModeDuplex	hal\sai\fsl_sai_hal.h	/^    kSaiIOModeDuplex = 0x2\/*!< Read data and write data at the same time *\/$/;"	e	enum:sai_io_mode
kSaiIOModeReceive	hal\sai\fsl_sai_hal.h	/^    kSaiIOModeReceive = 0x1,\/*!< Read data from FIFO *\/$/;"	e	enum:sai_io_mode
kSaiIOModeTransmit	hal\sai\fsl_sai_hal.h	/^    kSaiIOModeTransmit = 0x0,\/*!< Write data to FIFO *\/$/;"	e	enum:sai_io_mode
kSaiIntrequestFIFOError	hal\sai\fsl_sai_hal.h	/^    kSaiIntrequestFIFOError = 0x3,\/*!< FIFO error flag *\/$/;"	e	enum:sai_interrupt_request
kSaiIntrequestFIFORequest	hal\sai\fsl_sai_hal.h	/^    kSaiIntrequestFIFORequest = 0x4\/*!< FIFO request, means reached watermark *\/$/;"	e	enum:sai_interrupt_request
kSaiIntrequestFIFOWarning	hal\sai\fsl_sai_hal.h	/^    kSaiIntrequestFIFOWarning = 0x2,\/*!< FIFO warning flag, means the FIFO is empty *\/$/;"	e	enum:sai_interrupt_request
kSaiIntrequestSyncError	hal\sai\fsl_sai_hal.h	/^    kSaiIntrequestSyncError = 0x1,\/*!< Sync error flag, means the sync error is detected *\/$/;"	e	enum:sai_interrupt_request
kSaiIntrequestWordStart	hal\sai\fsl_sai_hal.h	/^    kSaiIntrequestWordStart = 0x0,\/*!< Word start flag, means the first word in a frame detected *\/$/;"	e	enum:sai_interrupt_request
kSaiMaster	hal\sai\fsl_sai_hal.h	/^    kSaiMaster = 0x0,\/*!< Master mode *\/$/;"	e	enum:sai_master_slave
kSaiMclkSourceAltclk	hal\sai\fsl_sai_hal.h	/^    kSaiMclkSourceAltclk = 0x2,\/*!< Master clock from alt *\/$/;"	e	enum:sai_mclk_source
kSaiMclkSourceExtal	hal\sai\fsl_sai_hal.h	/^    kSaiMclkSourceExtal = 0x1,\/*!< Master clock from extal *\/$/;"	e	enum:sai_mclk_source
kSaiMclkSourcePllout	hal\sai\fsl_sai_hal.h	/^    kSaiMclkSourcePllout = 0x3\/*!< Master clcok from pll *\/ $/;"	e	enum:sai_mclk_source
kSaiMclkSourceSysclk	hal\sai\fsl_sai_hal.h	/^    kSaiMclkSourceSysclk = 0x0,\/*!< Master clock from system clock *\/$/;"	e	enum:sai_mclk_source
kSaiModeAsync	hal\sai\fsl_sai_hal.h	/^    kSaiModeAsync = 0x0,\/*!< Asynchronous mode *\/$/;"	e	enum:sai_sync_mode
kSaiModeSync	hal\sai\fsl_sai_hal.h	/^    kSaiModeSync = 0x1,\/*!< Synchronous mode (with receiver or transmit) *\/$/;"	e	enum:sai_sync_mode
kSaiModeSyncWithOtherRx	hal\sai\fsl_sai_hal.h	/^    kSaiModeSyncWithOtherRx = 0x3\/*!< Synchronous with another sai receiver *\/$/;"	e	enum:sai_sync_mode
kSaiModeSyncWithOtherTx	hal\sai\fsl_sai_hal.h	/^    kSaiModeSyncWithOtherTx = 0x2,\/*!< Synchronous with another sai transmit *\/$/;"	e	enum:sai_sync_mode
kSaiResetTypeFIFO	hal\sai\fsl_sai_hal.h	/^    kSaiResetTypeFIFO = 0x1\/*!< FIFO reset, reset the FIFO read and write pointer *\/$/;"	e	enum:sai_reset
kSaiResetTypeSoftware	hal\sai\fsl_sai_hal.h	/^    kSaiResetTypeSoftware = 0x0,\/*!< Software reset, reset the logic state *\/$/;"	e	enum:sai_reset
kSaiRunModeDebug	hal\sai\fsl_sai_hal.h	/^    kSaiRunModeDebug = 0x0,\/*!< In debug mode *\/ $/;"	e	enum:sai_running_mode
kSaiRunModeStop	hal\sai\fsl_sai_hal.h	/^    kSaiRunModeStop = 0x1\/*!< In stop mode *\/$/;"	e	enum:sai_running_mode
kSaiSlave	hal\sai\fsl_sai_hal.h	/^    kSaiSlave = 0x1\/*!< Slave mode *\/$/;"	e	enum:sai_master_slave
kSaiStateFlagFIFOError	hal\sai\fsl_sai_hal.h	/^    kSaiStateFlagFIFOError = 0x2,\/*!< FIFO error flag *\/$/;"	e	enum:sai_state_flag
kSaiStateFlagSyncError	hal\sai\fsl_sai_hal.h	/^    kSaiStateFlagSyncError = 0x1,\/*!< Sync error flag, means the sync error is detected *\/$/;"	e	enum:sai_state_flag
kSaiStateFlagWordStart	hal\sai\fsl_sai_hal.h	/^    kSaiStateFlagWordStart = 0x0,\/*!< Word start flag, means the first word in a frame detected. *\/$/;"	e	enum:sai_state_flag
sai_bclk_source	hal\sai\fsl_sai_hal.h	/^typedef enum sai_bclk_source$/;"	g
sai_bclk_source_t	hal\sai\fsl_sai_hal.h	/^} sai_bclk_source_t;$/;"	t	typeref:enum:sai_bclk_source
sai_bus	hal\sai\fsl_sai_hal.h	/^typedef enum sai_bus$/;"	g
sai_bus_t	hal\sai\fsl_sai_hal.h	/^ } sai_bus_t;$/;"	t	typeref:enum:sai_bus
sai_dma_request_t	hal\sai\fsl_sai_hal.h	/^} sai_dma_request_t;$/;"	t	typeref:enum:sai_dma_type
sai_dma_type	hal\sai\fsl_sai_hal.h	/^typedef enum sai_dma_type$/;"	g
sai_hal_disable_rx	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_disable_rx(uint8_t instance)$/;"	f
sai_hal_disable_tx	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_disable_tx(uint8_t instance)$/;"	f
sai_hal_enable_rx	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_enable_rx(uint8_t instance)$/;"	f
sai_hal_enable_tx	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_enable_tx(uint8_t instance)$/;"	f
sai_hal_receive_data	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_receive_data(uint8_t instance, uint8_t rx_channel, uint32_t *data)$/;"	f
sai_hal_set_mclk_source	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_mclk_source(uint8_t instance, sai_mclk_source_t source)$/;"	f
sai_hal_set_rx_bclk_source	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_bclk_source(uint8_t instance, sai_bclk_source_t source)$/;"	f
sai_hal_set_rx_blck_divider	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_blck_divider(uint8_t instance, uint32_t divider)$/;"	f
sai_hal_set_rx_fbt	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_fbt(uint8_t instance, uint8_t index)$/;"	f
sai_hal_set_rx_fifo_channel	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_fifo_channel(uint8_t instance, uint8_t fifo_channel)$/;"	f
sai_hal_set_rx_frame_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_frame_size(uint8_t instance, uint8_t size)$/;"	f
sai_hal_set_rx_sync_width	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_sync_width(uint8_t instance, uint8_t width)$/;"	f
sai_hal_set_rx_watermark	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_watermark(uint8_t instance, uint8_t watermark)$/;"	f
sai_hal_set_rx_word_mask	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_word_mask(uint8_t instance, uint32_t mask)$/;"	f
sai_hal_set_rx_word_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_word_size(uint8_t instance, uint8_t bits)$/;"	f
sai_hal_set_rx_word_start_index	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_word_start_index(uint8_t instance, uint8_t index)$/;"	f
sai_hal_set_rx_word_zero_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_rx_word_zero_size(uint8_t instance, uint8_t size)$/;"	f
sai_hal_set_tx_bclk_source	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_bclk_source(uint8_t instance, sai_bclk_source_t source)$/;"	f
sai_hal_set_tx_blck_divider	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_blck_divider(uint8_t instance, uint32_t divider)$/;"	f
sai_hal_set_tx_fbt	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_fbt(uint8_t instance, uint8_t index)$/;"	f
sai_hal_set_tx_fifo_channel	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_fifo_channel(uint8_t instance, uint8_t fifo_channel)$/;"	f
sai_hal_set_tx_frame_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_frame_size(uint8_t instance, uint8_t size)$/;"	f
sai_hal_set_tx_sync_width	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_sync_width(uint8_t instance, uint8_t width)$/;"	f
sai_hal_set_tx_watermark	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_watermark(uint8_t instance, uint8_t watermark)$/;"	f
sai_hal_set_tx_word_mask	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_word_mask(uint8_t instance, uint32_t mask)$/;"	f
sai_hal_set_tx_word_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_word_size(uint8_t instance, uint8_t bits)$/;"	f
sai_hal_set_tx_word_start_index	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_word_start_index(uint8_t instance, uint8_t index)$/;"	f
sai_hal_set_tx_word_zero_size	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_set_tx_word_zero_size(uint8_t instance, uint8_t size)$/;"	f
sai_hal_transmit_data	hal\sai\fsl_sai_hal.h	/^static inline void sai_hal_transmit_data(uint8_t instance, uint8_t tx_channel, uint32_t data)$/;"	f
sai_interrupt_request	hal\sai\fsl_sai_hal.h	/^typedef enum sai_interrupt_request$/;"	g
sai_interrupt_request_t	hal\sai\fsl_sai_hal.h	/^} sai_interrupt_request_t;$/;"	t	typeref:enum:sai_interrupt_request
sai_io_mode	hal\sai\fsl_sai_hal.h	/^typedef enum sai_io_mode$/;"	g
sai_io_mode_t	hal\sai\fsl_sai_hal.h	/^} sai_io_mode_t;$/;"	t	typeref:enum:sai_io_mode
sai_master_slave	hal\sai\fsl_sai_hal.h	/^typedef enum sai_master_slave$/;"	g
sai_master_slave_t	hal\sai\fsl_sai_hal.h	/^} sai_master_slave_t;$/;"	t	typeref:enum:sai_master_slave
sai_mclk_source	hal\sai\fsl_sai_hal.h	/^typedef enum sai_mclk_source$/;"	g
sai_mclk_source_t	hal\sai\fsl_sai_hal.h	/^} sai_mclk_source_t;$/;"	t	typeref:enum:sai_mclk_source
sai_mode_t	hal\sai\fsl_sai_hal.h	/^} sai_mode_t;$/;"	t	typeref:enum:sai_running_mode
sai_reset	hal\sai\fsl_sai_hal.h	/^typedef enum sai_reset$/;"	g
sai_reset_type_t	hal\sai\fsl_sai_hal.h	/^} sai_reset_type_t;$/;"	t	typeref:enum:sai_reset
sai_running_mode	hal\sai\fsl_sai_hal.h	/^typedef enum sai_running_mode$/;"	g
sai_state_flag	hal\sai\fsl_sai_hal.h	/^typedef enum sai_state_flag$/;"	g
sai_state_flag_t	hal\sai\fsl_sai_hal.h	/^} sai_state_flag_t;$/;"	t	typeref:enum:sai_state_flag
sai_sync_mode	hal\sai\fsl_sai_hal.h	/^typedef enum sai_sync_mode$/;"	g
sai_sync_mode_t	hal\sai\fsl_sai_hal.h	/^} sai_sync_mode_t;$/;"	t	typeref:enum:sai_sync_mode
KINETIS_SDHC_MODULE_COUNT	hal\sdhc\fsl_sdhc_features.h	34;"	d
KINETIS_SDHC_MODULE_COUNT	hal\sdhc\fsl_sdhc_features.h	37;"	d
__FSL_SDHC_FEATURES_H__	hal\sdhc\fsl_sdhc_features.h	31;"	d
SDHC_HAL_1_BIT_MODE	hal\sdhc\fsl_sdhc_hal.h	147;"	d
SDHC_HAL_4_BIT_MODE	hal\sdhc\fsl_sdhc_hal.h	148;"	d
SDHC_HAL_8_BIT_MODE	hal\sdhc\fsl_sdhc_hal.h	149;"	d
SDHC_HAL_ACMD12_CRC_ERR	hal\sdhc\fsl_sdhc_hal.h	108;"	d
SDHC_HAL_ACMD12_CRC_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	124;"	d
SDHC_HAL_ACMD12_END_BIT_ERR	hal\sdhc\fsl_sdhc_hal.h	107;"	d
SDHC_HAL_ACMD12_END_BIT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	125;"	d
SDHC_HAL_ACMD12_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	135;"	d
SDHC_HAL_ACMD12_INDEX_ERR	hal\sdhc\fsl_sdhc_hal.h	109;"	d
SDHC_HAL_ACMD12_INDEX_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	126;"	d
SDHC_HAL_ACMD12_NOT_EXEC_ERR	hal\sdhc\fsl_sdhc_hal.h	105;"	d
SDHC_HAL_ACMD12_NOT_EXEC_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	122;"	d
SDHC_HAL_ACMD12_NOT_ISSUE_ERR	hal\sdhc\fsl_sdhc_hal.h	110;"	d
SDHC_HAL_ACMD12_NOT_ISSUE_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	127;"	d
SDHC_HAL_ACMD12_TIMEOUT_ERR	hal\sdhc\fsl_sdhc_hal.h	106;"	d
SDHC_HAL_ACMD12_TIMEOUT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	123;"	d
SDHC_HAL_ADMA1_MODE	hal\sdhc\fsl_sdhc_hal.h	156;"	d
SDHC_HAL_ADMA2_MODE	hal\sdhc\fsl_sdhc_hal.h	157;"	d
SDHC_HAL_AUTO_CMD12_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	101;"	d
SDHC_HAL_BIG_ENDIAN_MODE	hal\sdhc\fsl_sdhc_hal.h	151;"	d
SDHC_HAL_BLOCK_GAP_EVENT_INT	hal\sdhc\fsl_sdhc_hal.h	87;"	d
SDHC_HAL_BUF_READ_READY_INT	hal\sdhc\fsl_sdhc_hal.h	90;"	d
SDHC_HAL_BUF_WRITE_READY_INT	hal\sdhc\fsl_sdhc_hal.h	89;"	d
SDHC_HAL_CARD_INSERTION_INT	hal\sdhc\fsl_sdhc_hal.h	91;"	d
SDHC_HAL_CARD_INT	hal\sdhc\fsl_sdhc_hal.h	93;"	d
SDHC_HAL_CARD_INT_EVENT	hal\sdhc\fsl_sdhc_hal.h	136;"	d
SDHC_HAL_CARD_REMOVAL_INT	hal\sdhc\fsl_sdhc_hal.h	92;"	d
SDHC_HAL_CMD_COMPLETE_INT	hal\sdhc\fsl_sdhc_hal.h	85;"	d
SDHC_HAL_CMD_CRC_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	129;"	d
SDHC_HAL_CMD_CRC_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	95;"	d
SDHC_HAL_CMD_END_BIT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	130;"	d
SDHC_HAL_CMD_END_BIT_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	96;"	d
SDHC_HAL_CMD_INDEX_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	131;"	d
SDHC_HAL_CMD_INDEX_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	97;"	d
SDHC_HAL_CMD_TIMEOUT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	128;"	d
SDHC_HAL_CMD_TIMEOUT_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	94;"	d
SDHC_HAL_CMD_TYPE_ABORT	hal\sdhc\fsl_sdhc_hal.h	46;"	d
SDHC_HAL_CMD_TYPE_RESUME	hal\sdhc\fsl_sdhc_hal.h	45;"	d
SDHC_HAL_CMD_TYPE_SUSPEND	hal\sdhc\fsl_sdhc_hal.h	44;"	d
SDHC_HAL_DAT0_LEVEL	hal\sdhc\fsl_sdhc_hal.h	37;"	d
SDHC_HAL_DATA_CRC_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	133;"	d
SDHC_HAL_DATA_CRC_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	99;"	d
SDHC_HAL_DATA_END_BIT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	134;"	d
SDHC_HAL_DATA_END_BIT_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	100;"	d
SDHC_HAL_DATA_PRESENT	hal\sdhc\fsl_sdhc_hal.h	71;"	d
SDHC_HAL_DATA_TIMEOUT_ERR_EVENT	hal\sdhc\fsl_sdhc_hal.h	132;"	d
SDHC_HAL_DATA_TIMEOUT_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	98;"	d
SDHC_HAL_DISABLE_AUTO_CMD12	hal\sdhc\fsl_sdhc_hal.h	52;"	d
SDHC_HAL_DISABLE_AUTO_CMD12	hal\sdhc\fsl_sdhc_hal.h	55;"	d
SDHC_HAL_DISABLE_BLOCK_COUNT	hal\sdhc\fsl_sdhc_hal.h	49;"	d
SDHC_HAL_DISABLE_CRC_CHECK	hal\sdhc\fsl_sdhc_hal.h	66;"	d
SDHC_HAL_DISABLE_DMA	hal\sdhc\fsl_sdhc_hal.h	42;"	d
SDHC_HAL_DISABLE_INDEX_CHECK	hal\sdhc\fsl_sdhc_hal.h	69;"	d
SDHC_HAL_DMA_ERROR_EVENT	hal\sdhc\fsl_sdhc_hal.h	137;"	d
SDHC_HAL_DMA_ERR_INT	hal\sdhc\fsl_sdhc_hal.h	102;"	d
SDHC_HAL_DMA_INT	hal\sdhc\fsl_sdhc_hal.h	88;"	d
SDHC_HAL_ENABLE_AUTO_CMD12	hal\sdhc\fsl_sdhc_hal.h	51;"	d
SDHC_HAL_ENABLE_BLOCK_COUNT	hal\sdhc\fsl_sdhc_hal.h	48;"	d
SDHC_HAL_ENABLE_CRC_CHECK	hal\sdhc\fsl_sdhc_hal.h	65;"	d
SDHC_HAL_ENABLE_DATA_READ	hal\sdhc\fsl_sdhc_hal.h	54;"	d
SDHC_HAL_ENABLE_DMA	hal\sdhc\fsl_sdhc_hal.h	41;"	d
SDHC_HAL_ENABLE_INDEX_CHECK	hal\sdhc\fsl_sdhc_hal.h	68;"	d
SDHC_HAL_HALF_WORD_BIG_ENDIAN_MODE	hal\sdhc\fsl_sdhc_hal.h	152;"	d
SDHC_HAL_INITIAL_CLKFS	hal\sdhc\fsl_sdhc_hal.h	77;"	d
SDHC_HAL_INITIAL_DVS	hal\sdhc\fsl_sdhc_hal.h	76;"	d
SDHC_HAL_LED_OFF	hal\sdhc\fsl_sdhc_hal.h	144;"	d
SDHC_HAL_LED_ON	hal\sdhc\fsl_sdhc_hal.h	145;"	d
SDHC_HAL_LITTLE_ENDIAN_MODE	hal\sdhc\fsl_sdhc_hal.h	153;"	d
SDHC_HAL_MAX_BLKLEN_1024B	hal\sdhc\fsl_sdhc_hal.h	164;"	d
SDHC_HAL_MAX_BLKLEN_2048B	hal\sdhc\fsl_sdhc_hal.h	165;"	d
SDHC_HAL_MAX_BLKLEN_4096B	hal\sdhc\fsl_sdhc_hal.h	166;"	d
SDHC_HAL_MAX_BLKLEN_512B	hal\sdhc\fsl_sdhc_hal.h	163;"	d
SDHC_HAL_MAX_BLOCK_COUNT	hal\sdhc\fsl_sdhc_hal.h	40;"	d
SDHC_HAL_MAX_CLKFS	hal\sdhc\fsl_sdhc_hal.h	80;"	d
SDHC_HAL_MAX_DVS	hal\sdhc\fsl_sdhc_hal.h	75;"	d
SDHC_HAL_MMCBOOT_ALTER_BOOT	hal\sdhc\fsl_sdhc_hal.h	141;"	d
SDHC_HAL_MMCBOOT_NORMAL_BOOT	hal\sdhc\fsl_sdhc_hal.h	140;"	d
SDHC_HAL_MULTIPLE_BLOCK	hal\sdhc\fsl_sdhc_hal.h	57;"	d
SDHC_HAL_NEXT_CLKFS	hal\sdhc\fsl_sdhc_hal.h	81;"	d
SDHC_HAL_NEXT_DVS	hal\sdhc\fsl_sdhc_hal.h	78;"	d
SDHC_HAL_NO_DATA_PRESENT	hal\sdhc\fsl_sdhc_hal.h	72;"	d
SDHC_HAL_NO_DMA_OR_SDMA_MODE	hal\sdhc\fsl_sdhc_hal.h	155;"	d
SDHC_HAL_NO_RESPONE	hal\sdhc\fsl_sdhc_hal.h	60;"	d
SDHC_HAL_PREV_CLKFS	hal\sdhc\fsl_sdhc_hal.h	82;"	d
SDHC_HAL_PREV_DVS	hal\sdhc\fsl_sdhc_hal.h	79;"	d
SDHC_HAL_RESP_LEN_136	hal\sdhc\fsl_sdhc_hal.h	61;"	d
SDHC_HAL_RESP_LEN_48	hal\sdhc\fsl_sdhc_hal.h	62;"	d
SDHC_HAL_RESP_LEN_48_BC	hal\sdhc\fsl_sdhc_hal.h	63;"	d
SDHC_HAL_RST_TYPE_ALL	hal\sdhc\fsl_sdhc_hal.h	159;"	d
SDHC_HAL_RST_TYPE_CMD	hal\sdhc\fsl_sdhc_hal.h	160;"	d
SDHC_HAL_RST_TYPE_DATA	hal\sdhc\fsl_sdhc_hal.h	161;"	d
SDHC_HAL_SINGLE_BLOCK	hal\sdhc\fsl_sdhc_hal.h	58;"	d
SDHC_HAL_SUPPORT_1_8_V	hal\sdhc\fsl_sdhc_hal.h	119;"	d
SDHC_HAL_SUPPORT_3_0_V	hal\sdhc\fsl_sdhc_hal.h	118;"	d
SDHC_HAL_SUPPORT_3_3_V	hal\sdhc\fsl_sdhc_hal.h	117;"	d
SDHC_HAL_SUPPORT_ADMA	hal\sdhc\fsl_sdhc_hal.h	113;"	d
SDHC_HAL_SUPPORT_DMA	hal\sdhc\fsl_sdhc_hal.h	115;"	d
SDHC_HAL_SUPPORT_HIGHSPEED	hal\sdhc\fsl_sdhc_hal.h	114;"	d
SDHC_HAL_SUPPORT_SUSPEND_RESUME	hal\sdhc\fsl_sdhc_hal.h	116;"	d
SDHC_HAL_TRANS_COMPLETE_INT	hal\sdhc\fsl_sdhc_hal.h	86;"	d
__FSL_SDHC_HAL_H__	hal\sdhc\fsl_sdhc_hal.h	31;"	d
sdhc_hal_clear_intr_flags	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_clear_intr_flags(uint8_t instance, uint32_t mask)$/;"	f
sdhc_hal_continue_req	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_continue_req(uint8_t instance)$/;"	f
sdhc_hal_enable_auto_stop_at_blkgap	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_auto_stop_at_blkgap(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_boot_ack	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_boot_ack(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_cd_test	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_cd_test(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_d3cd	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_d3cd(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_exact_blk_num	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_exact_blk_num(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_ext_dma_req	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_ext_dma_req(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_fastboot	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_fastboot(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_intr_signal	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_intr_signal(uint8_t instance, bool isEnabled, uint32_t mask)$/;"	f
sdhc_hal_enable_intr_state	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_intr_state(uint8_t instance, bool isEnabled, uint32_t mask)$/;"	f
sdhc_hal_enable_intr_stop_at_blk_gap	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_intr_stop_at_blk_gap(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_ipg_clk	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_ipg_clk(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_per_clk	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_per_clk(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_read_wait_ctrl	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_read_wait_ctrl(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_sd_clk	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_sd_clk(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_stop_at_blkgap	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_stop_at_blkgap(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_sys_clk	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_sys_clk(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_wakeup_on_card_ins	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_wakeup_on_card_ins(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_wakeup_on_card_intr	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_wakeup_on_card_intr(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_enable_wakeup_on_card_rm	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_enable_wakeup_on_card_rm(uint8_t instance, bool isEnabled)$/;"	f
sdhc_hal_get_ac12_error	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_ac12_error(uint8_t instance)$/;"	f
sdhc_hal_get_adma_error_stat	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_adma_error_stat(uint8_t instance)$/;"	f
sdhc_hal_get_blkcnt	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_blkcnt(uint8_t instance)$/;"	f
sdhc_hal_get_blksz	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_blksz(uint8_t instance)$/;"	f
sdhc_hal_get_cd_test_level	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_cd_test_level(uint8_t instance)$/;"	f
sdhc_hal_get_data	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_data(uint8_t instance)$/;"	f
sdhc_hal_get_data_line_level	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_data_line_level(uint8_t instance)$/;"	f
sdhc_hal_get_dma_addr	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_dma_addr(uint8_t instance)$/;"	f
sdhc_hal_get_intr_flags	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_intr_flags(uint8_t instance)$/;"	f
sdhc_hal_get_intr_signal	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_intr_signal(uint8_t instance)$/;"	f
sdhc_hal_get_intr_state	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_intr_state(uint8_t instance)$/;"	f
sdhc_hal_get_max_blklen	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_max_blklen(uint8_t instance)$/;"	f
sdhc_hal_get_resp	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_get_resp(uint8_t instance, uint32_t * resp)$/;"	f
sdhc_hal_get_spec_ver	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_spec_ver(uint8_t instance)$/;"	f
sdhc_hal_get_vendor_ver	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_get_vendor_ver(uint8_t instance)$/;"	f
sdhc_hal_host_can_do_adma	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_can_do_adma(uint8_t instance)$/;"	f
sdhc_hal_host_can_do_dma	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_can_do_dma(uint8_t instance)$/;"	f
sdhc_hal_host_can_do_highspeed	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_can_do_highspeed(uint8_t instance)$/;"	f
sdhc_hal_host_can_do_suspend_resume	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_can_do_suspend_resume(uint8_t instance)$/;"	f
sdhc_hal_host_supports_v180	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_supports_v180(uint8_t instance)$/;"	f
sdhc_hal_host_supports_v300	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_supports_v300(uint8_t instance)$/;"	f
sdhc_hal_host_supports_v330	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_host_supports_v330(uint8_t instance)$/;"	f
sdhc_hal_init_card	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_init_card(uint8_t instance)$/;"	f
sdhc_hal_is_adma_desc_err	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_adma_desc_err(uint8_t instance)$/;"	f
sdhc_hal_is_adma_len_mismatch_err	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_adma_len_mismatch_err(uint8_t instance)$/;"	f
sdhc_hal_is_buf_read_enabled	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_buf_read_enabled(uint8_t instance)$/;"	f
sdhc_hal_is_buf_write_enabled	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_buf_write_enabled(uint8_t instance)$/;"	f
sdhc_hal_is_card_inserted	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_card_inserted(uint8_t instance)$/;"	f
sdhc_hal_is_cmd_inhibit	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_cmd_inhibit(uint8_t instance)$/;"	f
sdhc_hal_is_cmd_line_level_high	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_cmd_line_level_high(uint8_t instance)$/;"	f
sdhc_hal_is_d3cd_enabled	hal\sdhc\fsl_sdhc_hal.h	/^static inline bool sdhc_hal_is_d3cd_enabled(uint8_t instance)$/;"	f
sdhc_hal_is_data_inhibit	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_data_inhibit(uint8_t instance)$/;"	f
sdhc_hal_is_data_line_active	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_data_line_active(uint8_t instance)$/;"	f
sdhc_hal_is_init_card_done	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_init_card_done(uint8_t instance)$/;"	f
sdhc_hal_is_ipg_clk_off	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_ipg_clk_off(uint8_t instance)$/;"	f
sdhc_hal_is_per_clk_off	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_per_clk_off(uint8_t instance)$/;"	f
sdhc_hal_is_read_trans_active	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_read_trans_active(uint8_t instance)$/;"	f
sdhc_hal_is_reset_done	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_reset_done(uint8_t instance, uint32_t type)$/;"	f
sdhc_hal_is_sd_clk_off	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_sd_clk_off(uint8_t instance)$/;"	f
sdhc_hal_is_sd_clk_stable	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_sd_clk_stable(uint8_t instance)$/;"	f
sdhc_hal_is_sys_clk_off	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_sys_clk_off(uint8_t instance)$/;"	f
sdhc_hal_is_valid_instance	hal\sdhc\fsl_sdhc_hal.h	/^static inline bool sdhc_hal_is_valid_instance(uint8_t instance)$/;"	f
sdhc_hal_is_write_trans_active	hal\sdhc\fsl_sdhc_hal.h	/^static inline uint32_t sdhc_hal_is_write_trans_active(uint8_t instance)$/;"	f
sdhc_hal_reset	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_reset(uint8_t instance, uint32_t type)$/;"	f
sdhc_hal_send_cmd	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_send_cmd(uint8_t instance, uint32_t index, uint32_t flags)$/;"	f
sdhc_hal_set_adma_addr	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_adma_addr(uint8_t instance, uint32_t address)$/;"	f
sdhc_hal_set_blkcnt	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_blkcnt(uint8_t instance, uint32_t blockCount)$/;"	f
sdhc_hal_set_blksz	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_blksz(uint8_t instance, uint32_t blockSize)$/;"	f
sdhc_hal_set_boot_ack_timeout	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_boot_ack_timeout(uint8_t instance, uint32_t timeout)$/;"	f
sdhc_hal_set_boot_blkcnt	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_boot_blkcnt(uint8_t instance, uint32_t blockCount)$/;"	f
sdhc_hal_set_boot_mode	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_boot_mode(uint8_t instance, uint32_t mode)$/;"	f
sdhc_hal_set_clk_div	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_clk_div(uint8_t instance, uint32_t divisor)$/;"	f
sdhc_hal_set_clk_freq	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_clk_freq(uint8_t instance, uint32_t freq)$/;"	f
sdhc_hal_set_cmd_arg	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_cmd_arg(uint8_t instance, uint32_t arg)$/;"	f
sdhc_hal_set_data	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_data(uint8_t instance, uint32_t data)$/;"	f
sdhc_hal_set_data_timeout	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_data_timeout(uint8_t instance, uint32_t timeout)$/;"	f
sdhc_hal_set_data_trans_width	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_data_trans_width(uint8_t instance, uint32_t dtw)$/;"	f
sdhc_hal_set_dma_addr	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_dma_addr(uint8_t instance, uint32_t address)$/;"	f
sdhc_hal_set_dma_mode	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_dma_mode(uint8_t instance, uint32_t dmaMode)$/;"	f
sdhc_hal_set_endian	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_endian(uint8_t instance, uint32_t endianMode)$/;"	f
sdhc_hal_set_force_event_flags	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_force_event_flags(uint8_t instance, uint32_t mask)$/;"	f
sdhc_hal_set_led_state	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_led_state(uint8_t instance, uint32_t state)$/;"	f
sdhc_hal_set_read_watermark	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_read_watermark(uint8_t instance, uint32_t watermark)$/;"	f
sdhc_hal_set_write_watermark	hal\sdhc\fsl_sdhc_hal.h	/^static inline void sdhc_hal_set_write_watermark(uint8_t instance, uint32_t watermark)$/;"	f
kSimClockClkoutSelTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockClkoutSelTable [] = {$/;"	v
kSimClockGateModuleConfigTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_gate_module_config_t kSimClockGateModuleConfigTable [] =  {$/;"	v
kSimClockNameConfigTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_name_config_t kSimClockNameConfigTable [] =  {$/;"	v
kSimClockOsc32kSelTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockOsc32kSelTable [] = {$/;"	v
kSimClockPllfllSelTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockPllfllSelTable [] = {$/;"	v
kSimClockRmiiSrcTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockRmiiSrcTable [] = {$/;"	v
kSimClockRtcClkoutSelTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockRtcClkoutSelTable [] = {$/;"	v
kSimClockSdhcSrcTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockSdhcSrcTable [] = {$/;"	v
kSimClockSourceValueTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t *kSimClockSourceValueTable [] =  {$/;"	v
kSimClockTimeSrcTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockTimeSrcTable [] = {$/;"	v
kSimClockTraceSelTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockTraceSelTable [] = {$/;"	v
kSimClockUsbSrcTable	hal\sim\fsl_sim_clock_module_names_K64F12.c	/^const sim_clock_source_value_t kSimClockUsbSrcTable [] = {$/;"	v
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV2	hal\sim\fsl_sim_features.h	114;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV2	hal\sim\fsl_sim_features.h	155;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV2	hal\sim\fsl_sim_features.h	196;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV2	hal\sim\fsl_sim_features.h	72;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV3	hal\sim\fsl_sim_features.h	115;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV3	hal\sim\fsl_sim_features.h	156;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV3	hal\sim\fsl_sim_features.h	197;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_OUTDIV3	hal\sim\fsl_sim_features.h	73;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBDIV	hal\sim\fsl_sim_features.h	116;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBDIV	hal\sim\fsl_sim_features.h	157;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBDIV	hal\sim\fsl_sim_features.h	198;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBDIV	hal\sim\fsl_sim_features.h	74;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBFSDIV	hal\sim\fsl_sim_features.h	117;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBFSDIV	hal\sim\fsl_sim_features.h	158;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBFSDIV	hal\sim\fsl_sim_features.h	199;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBFSDIV	hal\sim\fsl_sim_features.h	75;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBHSDIV	hal\sim\fsl_sim_features.h	118;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBHSDIV	hal\sim\fsl_sim_features.h	159;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBHSDIV	hal\sim\fsl_sim_features.h	200;"	d
FSL_FEATURE_SIM_DIVIDER_HAS_USBHSDIV	hal\sim\fsl_sim_features.h	76;"	d
FSL_FEATURE_SIM_OPT_FTM0_FAULT_COUNT	hal\sim\fsl_sim_features.h	139;"	d
FSL_FEATURE_SIM_OPT_FTM0_FAULT_COUNT	hal\sim\fsl_sim_features.h	180;"	d
FSL_FEATURE_SIM_OPT_FTM0_FAULT_COUNT	hal\sim\fsl_sim_features.h	56;"	d
FSL_FEATURE_SIM_OPT_FTM0_FAULT_COUNT	hal\sim\fsl_sim_features.h	98;"	d
FSL_FEATURE_SIM_OPT_FTM_TRIGGER_COUNT	hal\sim\fsl_sim_features.h	132;"	d
FSL_FEATURE_SIM_OPT_FTM_TRIGGER_COUNT	hal\sim\fsl_sim_features.h	173;"	d
FSL_FEATURE_SIM_OPT_FTM_TRIGGER_COUNT	hal\sim\fsl_sim_features.h	49;"	d
FSL_FEATURE_SIM_OPT_FTM_TRIGGER_COUNT	hal\sim\fsl_sim_features.h	91;"	d
FSL_FEATURE_SIM_OPT_HAS_CMTUARTPAD	hal\sim\fsl_sim_features.h	124;"	d
FSL_FEATURE_SIM_OPT_HAS_CMTUARTPAD	hal\sim\fsl_sim_features.h	165;"	d
FSL_FEATURE_SIM_OPT_HAS_CMTUARTPAD	hal\sim\fsl_sim_features.h	41;"	d
FSL_FEATURE_SIM_OPT_HAS_CMTUARTPAD	hal\sim\fsl_sim_features.h	83;"	d
FSL_FEATURE_SIM_OPT_HAS_ESDHCSRC	hal\sim\fsl_sim_features.h	102;"	d
FSL_FEATURE_SIM_OPT_HAS_ESDHCSRC	hal\sim\fsl_sim_features.h	143;"	d
FSL_FEATURE_SIM_OPT_HAS_ESDHCSRC	hal\sim\fsl_sim_features.h	184;"	d
FSL_FEATURE_SIM_OPT_HAS_ESDHCSRC	hal\sim\fsl_sim_features.h	60;"	d
FSL_FEATURE_SIM_OPT_HAS_FBSL	hal\sim\fsl_sim_features.h	126;"	d
FSL_FEATURE_SIM_OPT_HAS_FBSL	hal\sim\fsl_sim_features.h	167;"	d
FSL_FEATURE_SIM_OPT_HAS_FBSL	hal\sim\fsl_sim_features.h	43;"	d
FSL_FEATURE_SIM_OPT_HAS_FBSL	hal\sim\fsl_sim_features.h	85;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM	hal\sim\fsl_sim_features.h	131;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM	hal\sim\fsl_sim_features.h	172;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM	hal\sim\fsl_sim_features.h	48;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM	hal\sim\fsl_sim_features.h	90;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM0_TRIGGER	hal\sim\fsl_sim_features.h	133;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM0_TRIGGER	hal\sim\fsl_sim_features.h	174;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM0_TRIGGER	hal\sim\fsl_sim_features.h	50;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM0_TRIGGER	hal\sim\fsl_sim_features.h	92;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM1_CHANNELS	hal\sim\fsl_sim_features.h	135;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM1_CHANNELS	hal\sim\fsl_sim_features.h	176;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM1_CHANNELS	hal\sim\fsl_sim_features.h	52;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM1_CHANNELS	hal\sim\fsl_sim_features.h	94;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNEL1	hal\sim\fsl_sim_features.h	138;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNEL1	hal\sim\fsl_sim_features.h	179;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNEL1	hal\sim\fsl_sim_features.h	55;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNEL1	hal\sim\fsl_sim_features.h	97;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNELS	hal\sim\fsl_sim_features.h	136;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNELS	hal\sim\fsl_sim_features.h	177;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNELS	hal\sim\fsl_sim_features.h	53;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM2_CHANNELS	hal\sim\fsl_sim_features.h	95;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_CHANNELS	hal\sim\fsl_sim_features.h	137;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_CHANNELS	hal\sim\fsl_sim_features.h	178;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_CHANNELS	hal\sim\fsl_sim_features.h	54;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_CHANNELS	hal\sim\fsl_sim_features.h	96;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_TRIGGER	hal\sim\fsl_sim_features.h	134;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_TRIGGER	hal\sim\fsl_sim_features.h	175;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_TRIGGER	hal\sim\fsl_sim_features.h	51;"	d
FSL_FEATURE_SIM_OPT_HAS_FTM3_TRIGGER	hal\sim\fsl_sim_features.h	93;"	d
FSL_FEATURE_SIM_OPT_HAS_LCDCSRC	hal\sim\fsl_sim_features.h	104;"	d
FSL_FEATURE_SIM_OPT_HAS_LCDCSRC	hal\sim\fsl_sim_features.h	145;"	d
FSL_FEATURE_SIM_OPT_HAS_LCDCSRC	hal\sim\fsl_sim_features.h	186;"	d
FSL_FEATURE_SIM_OPT_HAS_LCDCSRC	hal\sim\fsl_sim_features.h	62;"	d
FSL_FEATURE_SIM_OPT_HAS_MCC	hal\sim\fsl_sim_features.h	128;"	d
FSL_FEATURE_SIM_OPT_HAS_MCC	hal\sim\fsl_sim_features.h	169;"	d
FSL_FEATURE_SIM_OPT_HAS_MCC	hal\sim\fsl_sim_features.h	45;"	d
FSL_FEATURE_SIM_OPT_HAS_MCC	hal\sim\fsl_sim_features.h	87;"	d
FSL_FEATURE_SIM_OPT_HAS_NFCSRC	hal\sim\fsl_sim_features.h	101;"	d
FSL_FEATURE_SIM_OPT_HAS_NFCSRC	hal\sim\fsl_sim_features.h	142;"	d
FSL_FEATURE_SIM_OPT_HAS_NFCSRC	hal\sim\fsl_sim_features.h	183;"	d
FSL_FEATURE_SIM_OPT_HAS_NFCSRC	hal\sim\fsl_sim_features.h	59;"	d
FSL_FEATURE_SIM_OPT_HAS_ODE	hal\sim\fsl_sim_features.h	129;"	d
FSL_FEATURE_SIM_OPT_HAS_ODE	hal\sim\fsl_sim_features.h	170;"	d
FSL_FEATURE_SIM_OPT_HAS_ODE	hal\sim\fsl_sim_features.h	46;"	d
FSL_FEATURE_SIM_OPT_HAS_ODE	hal\sim\fsl_sim_features.h	88;"	d
FSL_FEATURE_SIM_OPT_HAS_PCR	hal\sim\fsl_sim_features.h	127;"	d
FSL_FEATURE_SIM_OPT_HAS_PCR	hal\sim\fsl_sim_features.h	168;"	d
FSL_FEATURE_SIM_OPT_HAS_PCR	hal\sim\fsl_sim_features.h	44;"	d
FSL_FEATURE_SIM_OPT_HAS_PCR	hal\sim\fsl_sim_features.h	86;"	d
FSL_FEATURE_SIM_OPT_HAS_PTD7PAD	hal\sim\fsl_sim_features.h	125;"	d
FSL_FEATURE_SIM_OPT_HAS_PTD7PAD	hal\sim\fsl_sim_features.h	166;"	d
FSL_FEATURE_SIM_OPT_HAS_PTD7PAD	hal\sim\fsl_sim_features.h	42;"	d
FSL_FEATURE_SIM_OPT_HAS_PTD7PAD	hal\sim\fsl_sim_features.h	84;"	d
FSL_FEATURE_SIM_OPT_HAS_RAMSIZE	hal\sim\fsl_sim_features.h	123;"	d
FSL_FEATURE_SIM_OPT_HAS_RAMSIZE	hal\sim\fsl_sim_features.h	164;"	d
FSL_FEATURE_SIM_OPT_HAS_RAMSIZE	hal\sim\fsl_sim_features.h	40;"	d
FSL_FEATURE_SIM_OPT_HAS_RAMSIZE	hal\sim\fsl_sim_features.h	82;"	d
FSL_FEATURE_SIM_OPT_HAS_RMIISRC	hal\sim\fsl_sim_features.h	106;"	d
FSL_FEATURE_SIM_OPT_HAS_RMIISRC	hal\sim\fsl_sim_features.h	147;"	d
FSL_FEATURE_SIM_OPT_HAS_RMIISRC	hal\sim\fsl_sim_features.h	188;"	d
FSL_FEATURE_SIM_OPT_HAS_RMIISRC	hal\sim\fsl_sim_features.h	64;"	d
FSL_FEATURE_SIM_OPT_HAS_SDHCSRC	hal\sim\fsl_sim_features.h	103;"	d
FSL_FEATURE_SIM_OPT_HAS_SDHCSRC	hal\sim\fsl_sim_features.h	144;"	d
FSL_FEATURE_SIM_OPT_HAS_SDHCSRC	hal\sim\fsl_sim_features.h	185;"	d
FSL_FEATURE_SIM_OPT_HAS_SDHCSRC	hal\sim\fsl_sim_features.h	61;"	d
FSL_FEATURE_SIM_OPT_HAS_TIMESRC	hal\sim\fsl_sim_features.h	105;"	d
FSL_FEATURE_SIM_OPT_HAS_TIMESRC	hal\sim\fsl_sim_features.h	146;"	d
FSL_FEATURE_SIM_OPT_HAS_TIMESRC	hal\sim\fsl_sim_features.h	187;"	d
FSL_FEATURE_SIM_OPT_HAS_TIMESRC	hal\sim\fsl_sim_features.h	63;"	d
FSL_FEATURE_SIM_OPT_HAS_TPM	hal\sim\fsl_sim_features.h	140;"	d
FSL_FEATURE_SIM_OPT_HAS_TPM	hal\sim\fsl_sim_features.h	181;"	d
FSL_FEATURE_SIM_OPT_HAS_TPM	hal\sim\fsl_sim_features.h	57;"	d
FSL_FEATURE_SIM_OPT_HAS_TPM	hal\sim\fsl_sim_features.h	99;"	d
FSL_FEATURE_SIM_OPT_HAS_TPMSRC	hal\sim\fsl_sim_features.h	111;"	d
FSL_FEATURE_SIM_OPT_HAS_TPMSRC	hal\sim\fsl_sim_features.h	152;"	d
FSL_FEATURE_SIM_OPT_HAS_TPMSRC	hal\sim\fsl_sim_features.h	193;"	d
FSL_FEATURE_SIM_OPT_HAS_TPMSRC	hal\sim\fsl_sim_features.h	69;"	d
FSL_FEATURE_SIM_OPT_HAS_TRACE_CLKSEL	hal\sim\fsl_sim_features.h	112;"	d
FSL_FEATURE_SIM_OPT_HAS_TRACE_CLKSEL	hal\sim\fsl_sim_features.h	153;"	d
FSL_FEATURE_SIM_OPT_HAS_TRACE_CLKSEL	hal\sim\fsl_sim_features.h	194;"	d
FSL_FEATURE_SIM_OPT_HAS_TRACE_CLKSEL	hal\sim\fsl_sim_features.h	70;"	d
FSL_FEATURE_SIM_OPT_HAS_UART0SRC	hal\sim\fsl_sim_features.h	110;"	d
FSL_FEATURE_SIM_OPT_HAS_UART0SRC	hal\sim\fsl_sim_features.h	151;"	d
FSL_FEATURE_SIM_OPT_HAS_UART0SRC	hal\sim\fsl_sim_features.h	192;"	d
FSL_FEATURE_SIM_OPT_HAS_UART0SRC	hal\sim\fsl_sim_features.h	68;"	d
FSL_FEATURE_SIM_OPT_HAS_USBFSRC	hal\sim\fsl_sim_features.h	108;"	d
FSL_FEATURE_SIM_OPT_HAS_USBFSRC	hal\sim\fsl_sim_features.h	149;"	d
FSL_FEATURE_SIM_OPT_HAS_USBFSRC	hal\sim\fsl_sim_features.h	190;"	d
FSL_FEATURE_SIM_OPT_HAS_USBFSRC	hal\sim\fsl_sim_features.h	66;"	d
FSL_FEATURE_SIM_OPT_HAS_USBHSRC	hal\sim\fsl_sim_features.h	109;"	d
FSL_FEATURE_SIM_OPT_HAS_USBHSRC	hal\sim\fsl_sim_features.h	150;"	d
FSL_FEATURE_SIM_OPT_HAS_USBHSRC	hal\sim\fsl_sim_features.h	191;"	d
FSL_FEATURE_SIM_OPT_HAS_USBHSRC	hal\sim\fsl_sim_features.h	67;"	d
FSL_FEATURE_SIM_OPT_HAS_USBSRC	hal\sim\fsl_sim_features.h	107;"	d
FSL_FEATURE_SIM_OPT_HAS_USBSRC	hal\sim\fsl_sim_features.h	148;"	d
FSL_FEATURE_SIM_OPT_HAS_USBSRC	hal\sim\fsl_sim_features.h	189;"	d
FSL_FEATURE_SIM_OPT_HAS_USBSRC	hal\sim\fsl_sim_features.h	65;"	d
FSL_FEATURE_SIM_OPT_UART_COUNT	hal\sim\fsl_sim_features.h	130;"	d
FSL_FEATURE_SIM_OPT_UART_COUNT	hal\sim\fsl_sim_features.h	171;"	d
FSL_FEATURE_SIM_OPT_UART_COUNT	hal\sim\fsl_sim_features.h	47;"	d
FSL_FEATURE_SIM_OPT_UART_COUNT	hal\sim\fsl_sim_features.h	89;"	d
FSL_FEATURE_SIM_PLLCLK_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	121;"	d
FSL_FEATURE_SIM_PLLCLK_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	162;"	d
FSL_FEATURE_SIM_PLLCLK_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	38;"	d
FSL_FEATURE_SIM_PLLCLK_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	80;"	d
FSL_FEATURE_SIM_USBFS_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	120;"	d
FSL_FEATURE_SIM_USBFS_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	161;"	d
FSL_FEATURE_SIM_USBFS_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	37;"	d
FSL_FEATURE_SIM_USBFS_USE_SPECIAL_DIVIDER	hal\sim\fsl_sim_features.h	79;"	d
__FSL_SIM_FEATURES_H__	hal\sim\fsl_sim_features.h	31;"	d
clock_hal_get_clock_divider	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_get_clock_divider(sim_clock_divider_names_t clockDivider, uint32_t *setting)$/;"	f
clock_hal_get_clock_source	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_get_clock_source(sim_clock_source_names_t clockSource, uint8_t *setting)$/;"	f
clock_hal_get_gate	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_get_gate(sim_clock_gate_module_names_t clockModule, $/;"	f
clock_hal_set_clock_divider	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_set_clock_divider(sim_clock_divider_names_t clockDivider, $/;"	f
clock_hal_set_clock_out_dividers	hal\sim\fsl_sim_hal.c	/^void clock_hal_set_clock_out_dividers(uint32_t outdiv1, uint32_t outdiv2, $/;"	f
clock_hal_set_clock_source	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_set_clock_source(sim_clock_source_names_t clockSource, uint8_t setting)$/;"	f
clock_hal_set_gate	hal\sim\fsl_sim_hal.c	/^sim_hal_status_t clock_hal_set_gate(sim_clock_gate_module_names_t clockModule, $/;"	f
clock_manager_find_module	hal\sim\fsl_sim_hal.c	/^const sim_clock_gate_module_config_t *clock_manager_find_module($/;"	f
sim_get_alttrgen	hal\sim\fsl_sim_hal.c	/^bool sim_get_alttrgen(uint8_t instance)$/;"	f
sim_get_ftm_ch_src	hal\sim\fsl_sim_hal.c	/^sim_ftm_ch_src_t sim_get_ftm_ch_src(uint8_t instance, uint8_t channel)$/;"	f
sim_get_ftm_clk_sel	hal\sim\fsl_sim_hal.c	/^sim_ftm_clk_sel_t sim_get_ftm_clk_sel(uint8_t instance)$/;"	f
sim_get_ftm_flt_sel	hal\sim\fsl_sim_hal.c	/^sim_ftm_flt_sel_t sim_get_ftm_flt_sel(uint8_t instance, uint8_t fault)$/;"	f
sim_get_ftm_trg_src	hal\sim\fsl_sim_hal.c	/^sim_ftm_trg_src_t sim_get_ftm_trg_src(uint8_t instance, uint8_t trigger)$/;"	f
sim_get_pretrgsel	hal\sim\fsl_sim_hal.c	/^sim_pretrgsel_t sim_get_pretrgsel(uint8_t instance)$/;"	f
sim_get_tpm_ch_src	hal\sim\fsl_sim_hal.c	/^sim_tpm_ch_src_t sim_get_tpm_ch_src(uint8_t instance, uint8_t channel)$/;"	f
sim_get_tpm_clk_sel	hal\sim\fsl_sim_hal.c	/^sim_tpm_clk_sel_t sim_get_tpm_clk_sel(uint8_t instance)$/;"	f
sim_get_trgsel	hal\sim\fsl_sim_hal.c	/^sim_pretrgsel_t sim_get_trgsel(uint8_t instance)$/;"	f
sim_get_uart_ode	hal\sim\fsl_sim_hal.c	/^bool sim_get_uart_ode(uint8_t instance)$/;"	f
sim_get_uart_rxsrc	hal\sim\fsl_sim_hal.c	/^sim_uart_rxsrc_t sim_get_uart_rxsrc(uint8_t instance)$/;"	f
sim_get_uart_txsrc	hal\sim\fsl_sim_hal.c	/^sim_uart_txsrc_t sim_get_uart_txsrc(uint8_t instance)$/;"	f
sim_set_alttrgen	hal\sim\fsl_sim_hal.c	/^void sim_set_alttrgen(uint8_t instance, bool enable)$/;"	f
sim_set_ftm_ch_src	hal\sim\fsl_sim_hal.c	/^void sim_set_ftm_ch_src(uint8_t instance, uint8_t channel, sim_ftm_ch_src_t select)$/;"	f
sim_set_ftm_clk_sel	hal\sim\fsl_sim_hal.c	/^void sim_set_ftm_clk_sel(uint8_t instance, sim_ftm_clk_sel_t select)$/;"	f
sim_set_ftm_flt_sel	hal\sim\fsl_sim_hal.c	/^void sim_set_ftm_flt_sel(uint8_t instance, uint8_t fault, sim_ftm_flt_sel_t select)$/;"	f
sim_set_ftm_trg_src	hal\sim\fsl_sim_hal.c	/^void sim_set_ftm_trg_src(uint8_t instance, uint8_t trigger, sim_ftm_trg_src_t select)$/;"	f
sim_set_pretrgsel	hal\sim\fsl_sim_hal.c	/^void sim_set_pretrgsel(uint8_t instance, sim_pretrgsel_t select)$/;"	f
sim_set_tpm_ch_src	hal\sim\fsl_sim_hal.c	/^void sim_set_tpm_ch_src(uint8_t instance, uint8_t channel, sim_tpm_ch_src_t select)$/;"	f
sim_set_tpm_clk_sel	hal\sim\fsl_sim_hal.c	/^void sim_set_tpm_clk_sel(uint8_t instance, sim_tpm_clk_sel_t select)$/;"	f
sim_set_trgsel	hal\sim\fsl_sim_hal.c	/^void sim_set_trgsel(uint8_t instance, sim_trgsel_t select)$/;"	f
sim_set_uart_ode	hal\sim\fsl_sim_hal.c	/^void sim_set_uart_ode(uint8_t instance, bool enable)$/;"	f
sim_set_uart_rxsrc	hal\sim\fsl_sim_hal.c	/^void sim_set_uart_rxsrc(uint8_t instance, sim_uart_rxsrc_t select)$/;"	f
sim_set_uart_txsrc	hal\sim\fsl_sim_hal.c	/^void sim_set_uart_txsrc(uint8_t instance, sim_uart_txsrc_t select)$/;"	f
SimClockGateModuleConfig	hal\sim\fsl_sim_hal.h	/^typedef struct SimClockGateModuleConfig {$/;"	s
SimClockNameConfig	hal\sim\fsl_sim_hal.h	/^typedef struct SimClockNameConfig {$/;"	s
SimClockSourceValue	hal\sim\fsl_sim_hal.h	/^typedef struct SimClockSourceValue {$/;"	s
__FSL_SIM_HAL_H__	hal\sim\fsl_sim_hal.h	32;"	d
_sim_clock_divider_names	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_clock_divider_names {$/;"	g
_sim_clock_gate_module_names	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_clock_gate_module_names {$/;"	g
_sim_clock_names	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_clock_names {$/;"	g
_sim_clock_source_names	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_clock_source_names {$/;"	g
_sim_cmtuartpad_strengh	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_cmtuartpad_strengh$/;"	g
_sim_flexbus_security_level	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_flexbus_security_level$/;"	g
_sim_ftm_ch_src	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_ftm_ch_src$/;"	g
_sim_ftm_clk_sel	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_ftm_clk_sel$/;"	g
_sim_ftm_flt_sel	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_ftm_flt_sel$/;"	g
_sim_ftm_trg_src	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_ftm_trg_src$/;"	g
_sim_hal_status	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_hal_status {$/;"	g
_sim_pretrgsel	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_pretrgsel$/;"	g
_sim_ptd7pad_strengh	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_ptd7pad_strengh$/;"	g
_sim_tpm_ch_src	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_tpm_ch_src$/;"	g
_sim_tpm_clk_sel	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_tpm_clk_sel$/;"	g
_sim_trgsel	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_trgsel$/;"	g
_sim_uart_rxsrc	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_uart_rxsrc$/;"	g
_sim_uart_txsrc	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_uart_txsrc$/;"	g
_sim_usbsstby_stop	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_usbsstby_stop$/;"	g
_sim_usbvstby_stop	hal\sim\fsl_sim_hal.h	/^typedef enum _sim_usbvstby_stop$/;"	g
clockGateModuleName	hal\sim\fsl_sim_hal.h	/^    sim_clock_gate_module_names_t   clockGateModuleName;  \/*!< clock module name*\/$/;"	m	struct:SimClockGateModuleConfig
clockName	hal\sim\fsl_sim_hal.h	/^    sim_clock_names_t                   clockName;            \/*!< clock name*\/$/;"	m	struct:SimClockNameConfig
clockName	hal\sim\fsl_sim_hal.h	/^    sim_clock_names_t               clockName;            \/*!< clock name*\/$/;"	m	union:SimClockSourceValue::__anon11
clockSelName	hal\sim\fsl_sim_hal.h	/^    sim_clock_source_names_t        clockSelName;$/;"	m	union:SimClockSourceValue::__anon11
deviceInstance	hal\sim\fsl_sim_hal.h	/^    uint8_t                         deviceInstance;       \/*!< device instance*\/$/;"	m	struct:SimClockGateModuleConfig
deviceMask	hal\sim\fsl_sim_hal.h	/^    uint32_t                        deviceMask;           \/*!< device mask in control register*\/$/;"	m	struct:SimClockGateModuleConfig
dividerName	hal\sim\fsl_sim_hal.h	/^    sim_clock_divider_names_t           dividerName;          \/*!< clock divider name*\/$/;"	m	struct:SimClockNameConfig
dividerName	hal\sim\fsl_sim_hal.h	/^    sim_clock_divider_names_t       dividerName;          \/*!< divider name*\/$/;"	m	struct:SimClockSourceValue
hasDivider	hal\sim\fsl_sim_hal.h	/^    bool                            hasDivider;           \/*!< has divider*\/$/;"	m	struct:SimClockSourceValue
isSel	hal\sim\fsl_sim_hal.h	/^    bool                            isSel;                \/*!< clock sel flag*\/$/;"	m	struct:SimClockSourceValue
kSimAdcPretrgselA	hal\sim\fsl_sim_hal.h	/^    kSimAdcPretrgselA,              \/* Pre-trigger A selected for ADCx *\/$/;"	e	enum:_sim_pretrgsel
kSimAdcPretrgselB	hal\sim\fsl_sim_hal.h	/^    kSimAdcPretrgselB               \/* Pre-trigger B selected for ADCx *\/$/;"	e	enum:_sim_pretrgsel
kSimAdcTrgSelFtm0	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelFtm0,              \/* FTM0 trigger *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelFtm1	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelFtm1,              \/* FTM1 trigger *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelFtm2	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelFtm2,              \/* FTM2 trigger *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelFtm3	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelFtm3,              \/* FTM3 trigger *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelHigSpeedComp3	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelHigSpeedComp3      \/* High speed comparator 3 asynchronous interrupt *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelHighSpeedComp0	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelHighSpeedComp0,    \/* High speed comparator 0 asynchronous interrupt *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelHighSpeedComp1	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelHighSpeedComp1,    \/* High speed comparator 1 asynchronous interrupt *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelHighSpeedComp2	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelHighSpeedComp2,    \/* High speed comparator 2 asynchronous interrupt *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelLptimer	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelLptimer,           \/* Low-power timer trigger *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelPit0	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelPit0,              \/* PIT trigger 0 *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelPit1	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelPit1,              \/* PIT trigger 1 *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelPit2	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelPit2,              \/* PIT trigger 2 *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelPit3	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelPit3,              \/* PIT trigger 3 *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelRtcAlarm	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelRtcAlarm,          \/* RTC alarm *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgSelRtcSec	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgSelRtcSec,            \/* RTC seconds *\/$/;"	e	enum:_sim_trgsel
kSimAdcTrgselExt	hal\sim\fsl_sim_hal.h	/^    kSimAdcTrgselExt,               \/* External trigger *\/$/;"	e	enum:_sim_trgsel
kSimBusClock	hal\sim\fsl_sim_hal.h	/^   kSimBusClock,                          \/**\/$/;"	e	enum:_sim_clock_names
kSimClockClkoutSel	hal\sim\fsl_sim_hal.h	/^    kSimClockClkoutSel,                \/* CLKOUTSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockDividerLcdcDiv	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerLcdcDiv,  $/;"	e	enum:_sim_clock_divider_names
kSimClockDividerLcdcFrac	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerLcdcFrac,          \/* (LCDCFRAC + 1) \/ (LCDCDIV + 1)*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerMax	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerMax$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerNfcDiv	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerNfcDiv,    $/;"	e	enum:_sim_clock_divider_names
kSimClockDividerNfcFrac	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerNfcFrac,           \/* (NFCFRAC + 1) \/ (NFCDIV + 1)*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerOutdiv1	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerOutdiv1,           \/* OUTDIV1*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerOutdiv2	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerOutdiv2,           \/* OUTDIV2*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerOutdiv3	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerOutdiv3,           \/* OUTDIV3*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerOutdiv4	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerOutdiv4,           \/* OUTDIV4*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerSpecial1	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerSpecial1,          \/* special divider 1*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbDiv	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbDiv,$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbFrac	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbFrac,           \/* (USBFRAC + 1) \/ (USBDIV + 1)*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbfsDiv	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbfsDiv,$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbfsFrac	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbfsFrac,         \/* (USBFSFRAC + 1) \/ (USBFSDIV) + 1)*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbhsDiv	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbhsDiv,$/;"	e	enum:_sim_clock_divider_names
kSimClockDividerUsbhsFrac	hal\sim\fsl_sim_hal.h	/^    kSimClockDividerUsbhsFrac,         \/* (USBHSFRAC + 1) \/ (USBHSDIV + 1)*\/$/;"	e	enum:_sim_clock_divider_names
kSimClockEsdhcSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockEsdhcSrc,                 \/* ESDHCSRC K70*\/$/;"	e	enum:_sim_clock_source_names
kSimClockLcdcSel	hal\sim\fsl_sim_hal.h	/^    kSimClockLcdcSel,                  \/* LCDC_CLKSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockLcdcSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockLcdcSrc,                  \/* LCDCSRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockModuleADC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleADC,                    \/*   instance 0 - 3*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleCMP	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleCMP,                    \/* *\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleCMT	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleCMT,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleCRC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleCRC,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDAC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDAC,                    \/*   instance 0, 1*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDDR	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDDR,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDMA	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDMA,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDMAMUX	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDMAMUX,                 \/*   instance 0, 1*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDRYICE	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDRYICE,                 \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleDRYICESECREG	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleDRYICESECREG,           \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleENET	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleENET,                   \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleESDHC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleESDHC,                  \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleEWM	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleEWM,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleFLEXBUS	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleFLEXBUS,                \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleFLEXCAN	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleFLEXCAN,                \/*   instance 0, 1*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleFTF	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleFTF,                    \/*  Flash memory control clock*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleFTM	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleFTM,                    \/*   instance 0 - 3*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleI2C	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleI2C,                    \/*   instance 0, 1*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleLCDC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleLCDC,                   \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleLLWU	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleLLWU,                   \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleLPTIMER	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleLPTIMER,                \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleMPU	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleMPU,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleMax	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleMax$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleNFC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleNFC,                    \/*  NAND flash control clock*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleOSC1	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleOSC1,                   \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModulePDB	hal\sim\fsl_sim_hal.h	/^    kSimClockModulePDB,                    \/* *\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModulePIT	hal\sim\fsl_sim_hal.h	/^    kSimClockModulePIT,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModulePORT	hal\sim\fsl_sim_hal.h	/^    kSimClockModulePORT,                   \/*   instance 0 - 5 (A - F)*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleREGFILE	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleREGFILE,                \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleRNGA	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleRNGA,                   \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleRTC	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleRTC,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleSAI	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleSAI,                    \/*   instance 0, 1*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleSPI	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleSPI,                    \/*   instance 0 - 2*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleTPM	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleTPM,                    \/*   TPM timers 0 - 2*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleTSI	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleTSI,                    \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleUART	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleUART,                   \/*   instance 0 - 5*\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleUSBDCD	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleUSBDCD,                 \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleUSBFS	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleUSBFS,                  \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleUSBHS	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleUSBHS,                  \/**\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockModuleVREF	hal\sim\fsl_sim_hal.h	/^    kSimClockModuleVREF,                   \/* *\/$/;"	e	enum:_sim_clock_gate_module_names
kSimClockNameCount	hal\sim\fsl_sim_hal.h	/^   kSimClockNameCount$/;"	e	enum:_sim_clock_names
kSimClockNfcSel	hal\sim\fsl_sim_hal.h	/^    kSimClockNfcSel,                   \/* NFC_CLKSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockNfcSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockNfcSrc,                   \/* NFCSRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockOsc32kSel	hal\sim\fsl_sim_hal.h	/^    kSimClockOsc32kSel,                \/* OSC32KSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockPllfllSel	hal\sim\fsl_sim_hal.h	/^    kSimClockPllfllSel,                \/* PLLFLLSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockRmiiSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockRmiiSrc,                  \/* RMIISRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockRtcClkoutSel	hal\sim\fsl_sim_hal.h	/^    kSimClockRtcClkoutSel,             \/* RTCCLKOUTSEL *\/$/;"	e	enum:_sim_clock_source_names
kSimClockSdhcSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockSdhcSrc,                  \/* SDHCSRC  K64*\/$/;"	e	enum:_sim_clock_source_names
kSimClockSourceMax	hal\sim\fsl_sim_hal.h	/^    kSimClockSourceMax$/;"	e	enum:_sim_clock_source_names
kSimClockTimeSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockTimeSrc,                  \/* TIMESRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockTpmSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockTpmSrc,                   \/* TPMSRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockTraceSel	hal\sim\fsl_sim_hal.h	/^    kSimClockTraceSel,                 \/* TRACE_CLKSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockUart0Src	hal\sim\fsl_sim_hal.h	/^    kSimClockUart0Src,                 \/* UART0SRC*\/$/;"	e	enum:_sim_clock_source_names
kSimClockUsbSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockUsbSrc,                   \/* USBSRC   K64, KL25 and K22*\/$/;"	e	enum:_sim_clock_source_names
kSimClockUsbfSel	hal\sim\fsl_sim_hal.h	/^    kSimClockUsbfSel,                  \/* USBF_CLKSEL*\/$/;"	e	enum:_sim_clock_source_names
kSimClockUsbfSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockUsbfSrc,                  \/* USBFSRC  K70*\/$/;"	e	enum:_sim_clock_source_names
kSimClockUsbhSrc	hal\sim\fsl_sim_hal.h	/^    kSimClockUsbhSrc,                  \/* USBHSRC*\/$/;"	e	enum:_sim_clock_source_names
kSimCmtuartDualPad	hal\sim\fsl_sim_hal.h	/^    kSimCmtuartDualPad              \/* Dual-pad drive strength for CMT IRO or UART0_TXD *\/$/;"	e	enum:_sim_cmtuartpad_strengh
kSimCmtuartSinglePad	hal\sim\fsl_sim_hal.h	/^    kSimCmtuartSinglePad,           \/* Single-pad drive strength for CMT IRO or UART0_TXD *\/$/;"	e	enum:_sim_cmtuartpad_strengh
kSimCoreClock	hal\sim\fsl_sim_hal.h	/^   kSimCoreClock,                         \/**\/$/;"	e	enum:_sim_clock_names
kSimENET_1588_CLKIN	hal\sim\fsl_sim_hal.h	/^   kSimENET_1588_CLKIN,$/;"	e	enum:_sim_clock_names
kSimEXTAL1_Clock	hal\sim\fsl_sim_hal.h	/^   kSimEXTAL1_Clock,$/;"	e	enum:_sim_clock_names
kSimEXTAL_Clock	hal\sim\fsl_sim_hal.h	/^   kSimEXTAL_Clock,$/;"	e	enum:_sim_clock_names
kSimFbslLevel0	hal\sim\fsl_sim_hal.h	/^    kSimFbslLevel0,                 \/* All off-chip accesses (op code and data) via the FlexBus *\/$/;"	e	enum:_sim_flexbus_security_level
kSimFbslLevel1	hal\sim\fsl_sim_hal.h	/^    kSimFbslLevel1,                 \/* Undefined *\/$/;"	e	enum:_sim_flexbus_security_level
kSimFbslLevel2	hal\sim\fsl_sim_hal.h	/^    kSimFbslLevel2,                 \/* Off-chip op code accesses are disallowed. Data accesses *\/$/;"	e	enum:_sim_flexbus_security_level
kSimFbslLevel3	hal\sim\fsl_sim_hal.h	/^    kSimFbslLevel3                  \/* Off-chip op code accesses and data accesses are allowed *\/$/;"	e	enum:_sim_flexbus_security_level
kSimFlashClock	hal\sim\fsl_sim_hal.h	/^   kSimFlashClock,                        \/**\/$/;"	e	enum:_sim_clock_names
kSimFlexBusClock	hal\sim\fsl_sim_hal.h	/^   kSimFlexBusClock,                      \/**\/$/;"	e	enum:_sim_clock_names
kSimFtmChSrc0	hal\sim\fsl_sim_hal.h	/^    kSimFtmChSrc0,                 \/* See RM for details of each selection for each channel *\/$/;"	e	enum:_sim_ftm_ch_src
kSimFtmChSrc1	hal\sim\fsl_sim_hal.h	/^    kSimFtmChSrc1,                 \/* See RM for details of each selection for each channel *\/$/;"	e	enum:_sim_ftm_ch_src
kSimFtmChSrc2	hal\sim\fsl_sim_hal.h	/^    kSimFtmChSrc2,                 \/* See RM for details of each selection for each channel *\/$/;"	e	enum:_sim_ftm_ch_src
kSimFtmChSrc3	hal\sim\fsl_sim_hal.h	/^    kSimFtmChSrc3                  \/* See RM for details of each selection for each channel *\/$/;"	e	enum:_sim_ftm_ch_src
kSimFtmClkSel0	hal\sim\fsl_sim_hal.h	/^    kSimFtmClkSel0,                 \/* FTM CLKIN0 pin. *\/$/;"	e	enum:_sim_ftm_clk_sel
kSimFtmClkSel1	hal\sim\fsl_sim_hal.h	/^    kSimFtmClkSel1                  \/* FTM CLKIN1 pin. *\/$/;"	e	enum:_sim_ftm_clk_sel
kSimFtmFltSel0	hal\sim\fsl_sim_hal.h	/^    kSimFtmFltSel0,                 \/* FlexTimer x fault y select 0 *\/$/;"	e	enum:_sim_ftm_flt_sel
kSimFtmFltSel1	hal\sim\fsl_sim_hal.h	/^    kSimFtmFltSel1                  \/* FlexTimer x fault y select 1 *\/$/;"	e	enum:_sim_ftm_flt_sel
kSimFtmTrgSrc0	hal\sim\fsl_sim_hal.h	/^    kSimFtmTrgSrc0,                 \/* FlexTimer x trigger y select 0 *\/$/;"	e	enum:_sim_ftm_trg_src
kSimFtmTrgSrc1	hal\sim\fsl_sim_hal.h	/^    kSimFtmTrgSrc1                  \/* FlexTimer x trigger y select 1 *\/$/;"	e	enum:_sim_ftm_trg_src
kSimHalFail	hal\sim\fsl_sim_hal.h	/^    kSimHalFail,$/;"	e	enum:_sim_hal_status
kSimHalNoSuchClockSrc	hal\sim\fsl_sim_hal.h	/^    kSimHalNoSuchClockSrc,$/;"	e	enum:_sim_hal_status
kSimHalNoSuchDivider	hal\sim\fsl_sim_hal.h	/^    kSimHalNoSuchDivider$/;"	e	enum:_sim_hal_status
kSimHalNoSuchModule	hal\sim\fsl_sim_hal.h	/^    kSimHalNoSuchModule,$/;"	e	enum:_sim_hal_status
kSimHalSuccess	hal\sim\fsl_sim_hal.h	/^    kSimHalSuccess,$/;"	e	enum:_sim_hal_status
kSimIrc48mClock	hal\sim\fsl_sim_hal.h	/^   kSimIrc48mClock,$/;"	e	enum:_sim_clock_names
kSimLpoClock	hal\sim\fsl_sim_hal.h	/^   kSimLpoClock,$/;"	e	enum:_sim_clock_names
kSimMcgFllClock	hal\sim\fsl_sim_hal.h	/^   kSimMcgFllClock,$/;"	e	enum:_sim_clock_names
kSimMcgIrClock	hal\sim\fsl_sim_hal.h	/^   kSimMcgIrClock,$/;"	e	enum:_sim_clock_names
kSimMcgOutClock	hal\sim\fsl_sim_hal.h	/^   kSimMcgOutClock,$/;"	e	enum:_sim_clock_names
kSimMcgPll0Clock	hal\sim\fsl_sim_hal.h	/^   kSimMcgPll0Clock,$/;"	e	enum:_sim_clock_names
kSimMcgPll1Clock	hal\sim\fsl_sim_hal.h	/^   kSimMcgPll1Clock,$/;"	e	enum:_sim_clock_names
kSimOsc0ErClock	hal\sim\fsl_sim_hal.h	/^   kSimOsc0ErClock,$/;"	e	enum:_sim_clock_names
kSimOsc1ErClock	hal\sim\fsl_sim_hal.h	/^   kSimOsc1ErClock,$/;"	e	enum:_sim_clock_names
kSimOsc32kClock	hal\sim\fsl_sim_hal.h	/^   kSimOsc32kClock,$/;"	e	enum:_sim_clock_names
kSimPlatformClock	hal\sim\fsl_sim_hal.h	/^   kSimPlatformClock,                     \/**\/$/;"	e	enum:_sim_clock_names
kSimPtd7padDualPad	hal\sim\fsl_sim_hal.h	/^    kSimPtd7padDualPad              \/* Dual-pad drive strength for PTD7 *\/$/;"	e	enum:_sim_ptd7pad_strengh
kSimPtd7padSinglePad	hal\sim\fsl_sim_hal.h	/^    kSimPtd7padSinglePad,           \/* Single-pad drive strength for PTD7 *\/$/;"	e	enum:_sim_ptd7pad_strengh
kSimReserved	hal\sim\fsl_sim_hal.h	/^   kSimReserved,$/;"	e	enum:_sim_clock_names
kSimRtc1hzClock	hal\sim\fsl_sim_hal.h	/^   kSimRtc1hzClock,$/;"	e	enum:_sim_clock_names
kSimRtc32kClock	hal\sim\fsl_sim_hal.h	/^   kSimRtc32kClock,$/;"	e	enum:_sim_clock_names
kSimSDHC0_CLKIN	hal\sim\fsl_sim_hal.h	/^   kSimSDHC0_CLKIN,$/;"	e	enum:_sim_clock_names
kSimSystemClock	hal\sim\fsl_sim_hal.h	/^   kSimSystemClock,                       \/**\/$/;"	e	enum:_sim_clock_names
kSimTpmChSrc0	hal\sim\fsl_sim_hal.h	/^    kSimTpmChSrc0,                 \/* TPMx_CH0 signal *\/$/;"	e	enum:_sim_tpm_ch_src
kSimTpmChSrc1	hal\sim\fsl_sim_hal.h	/^    kSimTpmChSrc1                  \/* CMP0 output *\/$/;"	e	enum:_sim_tpm_ch_src
kSimTpmClkSel0	hal\sim\fsl_sim_hal.h	/^    kSimTpmClkSel0,                 \/* Timer\/PWM TPM_CLKIN0 pin. *\/$/;"	e	enum:_sim_tpm_clk_sel
kSimTpmClkSel1	hal\sim\fsl_sim_hal.h	/^    kSimTpmClkSel1                  \/* Timer\/PWM TPM_CLKIN1 pin. *\/$/;"	e	enum:_sim_tpm_clk_sel
kSimUSB_CLKIN	hal\sim\fsl_sim_hal.h	/^   kSimUSB_CLKIN,$/;"	e	enum:_sim_clock_names
kSimUartRxsrcCmp0	hal\sim\fsl_sim_hal.h	/^    kSimUartRxsrcCmp0,              \/* CMP0 *\/$/;"	e	enum:_sim_uart_rxsrc
kSimUartRxsrcCmp1	hal\sim\fsl_sim_hal.h	/^    kSimUartRxsrcCmp1,              \/* CMP1 *\/$/;"	e	enum:_sim_uart_rxsrc
kSimUartRxsrcPin	hal\sim\fsl_sim_hal.h	/^    kSimUartRxsrcPin,               \/* UARTx_RX Pin *\/$/;"	e	enum:_sim_uart_rxsrc
kSimUartRxsrcReserved	hal\sim\fsl_sim_hal.h	/^    kSimUartRxsrcReserved           \/* Reserved *\/$/;"	e	enum:_sim_uart_rxsrc
kSimUartTxsrcCmp0	hal\sim\fsl_sim_hal.h	/^    kSimUartTxsrcCmp0,              \/* UARTx_TX pin modulated with FTM1 channel 0 output *\/$/;"	e	enum:_sim_uart_txsrc
kSimUartTxsrcCmp1	hal\sim\fsl_sim_hal.h	/^    kSimUartTxsrcCmp1,              \/* UARTx_TX pin modulated with FTM2 channel 0 output *\/$/;"	e	enum:_sim_uart_txsrc
kSimUartTxsrcPin	hal\sim\fsl_sim_hal.h	/^    kSimUartTxsrcPin,               \/* UARTx_TX Pin *\/$/;"	e	enum:_sim_uart_txsrc
kSimUartTxsrcReserved	hal\sim\fsl_sim_hal.h	/^    kSimUartTxsrcReserved           \/* Reserved *\/$/;"	e	enum:_sim_uart_txsrc
kSimUsbsstbyNoRegulator	hal\sim\fsl_sim_hal.h	/^    kSimUsbsstbyNoRegulator,        \/* regulator not in standby during Stop modes *\/$/;"	e	enum:_sim_usbsstby_stop
kSimUsbsstbyWithRegulator	hal\sim\fsl_sim_hal.h	/^    kSimUsbsstbyWithRegulator       \/* regulator in standby during Stop modes *\/$/;"	e	enum:_sim_usbsstby_stop
kSimUsbvstbyNoRegulator	hal\sim\fsl_sim_hal.h	/^    kSimUsbvstbyNoRegulator,        \/* regulator not in standby during VLPR and VLPW modes *\/$/;"	e	enum:_sim_usbvstby_stop
kSimUsbvstbyWithRegulator	hal\sim\fsl_sim_hal.h	/^    kSimUsbvstbyWithRegulator       \/* regulator in standby during VLPR and VLPW modes *\/$/;"	e	enum:_sim_usbvstby_stop
name	hal\sim\fsl_sim_hal.h	/^    uint8_t                         name;$/;"	m	union:SimClockSourceValue::__anon11
otherRefClockName	hal\sim\fsl_sim_hal.h	/^    sim_clock_names_t                   otherRefClockName;    \/*!< other ref clock name*\/$/;"	m	struct:SimClockNameConfig
scgcRegAddress	hal\sim\fsl_sim_hal.h	/^    uint32_t                        scgcRegAddress;       \/*!< clock gate control register address*\/$/;"	m	struct:SimClockGateModuleConfig
sim_clock_divider_names_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_divider_names_t;$/;"	t	typeref:enum:_sim_clock_divider_names
sim_clock_gate_module_config_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_gate_module_config_t;$/;"	t	typeref:struct:SimClockGateModuleConfig
sim_clock_gate_module_names_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_gate_module_names_t;$/;"	t	typeref:enum:_sim_clock_gate_module_names
sim_clock_name_config_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_name_config_t;$/;"	t	typeref:struct:SimClockNameConfig
sim_clock_names_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_names_t;$/;"	t	typeref:enum:_sim_clock_names
sim_clock_source_names_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_source_names_t;$/;"	t	typeref:enum:_sim_clock_source_names
sim_clock_source_value_t	hal\sim\fsl_sim_hal.h	/^} sim_clock_source_value_t;$/;"	t	typeref:struct:SimClockSourceValue
sim_cmtuartpad_strengh_t	hal\sim\fsl_sim_hal.h	/^} sim_cmtuartpad_strengh_t;$/;"	t	typeref:enum:_sim_cmtuartpad_strengh
sim_flexbus_security_level_t	hal\sim\fsl_sim_hal.h	/^} sim_flexbus_security_level_t;$/;"	t	typeref:enum:_sim_flexbus_security_level
sim_ftm_ch_src_t	hal\sim\fsl_sim_hal.h	/^} sim_ftm_ch_src_t;$/;"	t	typeref:enum:_sim_ftm_ch_src
sim_ftm_clk_sel_t	hal\sim\fsl_sim_hal.h	/^} sim_ftm_clk_sel_t;$/;"	t	typeref:enum:_sim_ftm_clk_sel
sim_ftm_flt_sel_t	hal\sim\fsl_sim_hal.h	/^} sim_ftm_flt_sel_t;$/;"	t	typeref:enum:_sim_ftm_flt_sel
sim_ftm_trg_src_t	hal\sim\fsl_sim_hal.h	/^} sim_ftm_trg_src_t;$/;"	t	typeref:enum:_sim_ftm_trg_src
sim_get_cmtuartpad	hal\sim\fsl_sim_hal.h	/^static inline sim_cmtuartpad_strengh_t sim_get_cmtuartpad(void)$/;"	f
sim_get_fbsl	hal\sim\fsl_sim_hal.h	/^static inline sim_flexbus_security_level_t sim_get_fbsl(void)$/;"	f
sim_get_mcc	hal\sim\fsl_sim_hal.h	/^static inline uint32_t sim_get_mcc(void)$/;"	f
sim_get_pcr	hal\sim\fsl_sim_hal.h	/^static inline uint32_t sim_get_pcr(void)$/;"	f
sim_get_ptd7pad	hal\sim\fsl_sim_hal.h	/^static inline sim_ptd7pad_strengh_t sim_get_ptd7pad(void)$/;"	f
sim_get_ramsize	hal\sim\fsl_sim_hal.h	/^static inline uint32_t sim_get_ramsize(void)$/;"	f
sim_get_urwe	hal\sim\fsl_sim_hal.h	/^static inline bool sim_get_urwe(void)$/;"	f
sim_get_usbregen	hal\sim\fsl_sim_hal.h	/^static inline bool sim_get_usbregen(void)$/;"	f
sim_get_usbsstby	hal\sim\fsl_sim_hal.h	/^static inline sim_usbsstby_stop_t sim_get_usbsstby(void)$/;"	f
sim_get_usbvstby	hal\sim\fsl_sim_hal.h	/^static inline sim_usbvstby_stop_t sim_get_usbvstby(void)$/;"	f
sim_get_usswe	hal\sim\fsl_sim_hal.h	/^static inline bool sim_get_usswe(void)$/;"	f
sim_get_uvswe	hal\sim\fsl_sim_hal.h	/^static inline bool sim_get_uvswe(void)$/;"	f
sim_hal_status_t	hal\sim\fsl_sim_hal.h	/^} sim_hal_status_t;$/;"	t	typeref:enum:_sim_hal_status
sim_pretrgsel_t	hal\sim\fsl_sim_hal.h	/^} sim_pretrgsel_t;$/;"	t	typeref:enum:_sim_pretrgsel
sim_ptd7pad_strengh_t	hal\sim\fsl_sim_hal.h	/^} sim_ptd7pad_strengh_t;$/;"	t	typeref:enum:_sim_ptd7pad_strengh
sim_set_cmtuartpad	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_cmtuartpad(sim_cmtuartpad_strengh_t setting)$/;"	f
sim_set_fbsl	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_fbsl(sim_flexbus_security_level_t setting)$/;"	f
sim_set_mcc	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_mcc(uint32_t setting)$/;"	f
sim_set_pcr	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_pcr(uint32_t setting)$/;"	f
sim_set_ptd7pad	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_ptd7pad(sim_ptd7pad_strengh_t setting)$/;"	f
sim_set_urwe	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_urwe(bool enable)$/;"	f
sim_set_usbregen	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_usbregen(bool enable)$/;"	f
sim_set_usbsstby	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_usbsstby(sim_usbsstby_stop_t setting)$/;"	f
sim_set_usbvstby	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_usbvstby(sim_usbvstby_stop_t setting)$/;"	f
sim_set_usswe	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_usswe(bool enable)$/;"	f
sim_set_uvswe	hal\sim\fsl_sim_hal.h	/^static inline void sim_set_uvswe(bool enable)$/;"	f
sim_tpm_ch_src_t	hal\sim\fsl_sim_hal.h	/^} sim_tpm_ch_src_t;$/;"	t	typeref:enum:_sim_tpm_ch_src
sim_tpm_clk_sel_t	hal\sim\fsl_sim_hal.h	/^} sim_tpm_clk_sel_t;$/;"	t	typeref:enum:_sim_tpm_clk_sel
sim_trgsel_t	hal\sim\fsl_sim_hal.h	/^} sim_trgsel_t;$/;"	t	typeref:enum:_sim_trgsel
sim_uart_rxsrc_t	hal\sim\fsl_sim_hal.h	/^} sim_uart_rxsrc_t;$/;"	t	typeref:enum:_sim_uart_rxsrc
sim_uart_txsrc_t	hal\sim\fsl_sim_hal.h	/^} sim_uart_txsrc_t;$/;"	t	typeref:enum:_sim_uart_txsrc
sim_usbsstby_stop_t	hal\sim\fsl_sim_hal.h	/^} sim_usbsstby_stop_t;$/;"	t	typeref:enum:_sim_usbsstby_stop
sim_usbvstby_stop_t	hal\sim\fsl_sim_hal.h	/^} sim_usbvstby_stop_t;$/;"	t	typeref:enum:_sim_usbvstby_stop
useOtherRefClock	hal\sim\fsl_sim_hal.h	/^    bool                                useOtherRefClock;     \/*!< if it will use other ref clock*\/$/;"	m	struct:SimClockNameConfig
FSL_FEATURE_SMC_HAS_LLS_SUBMODE	hal\smc\fsl_smc_features.h	41;"	d
FSL_FEATURE_SMC_HAS_LLS_SUBMODE	hal\smc\fsl_smc_features.h	50;"	d
FSL_FEATURE_SMC_HAS_LLS_SUBMODE	hal\smc\fsl_smc_features.h	58;"	d
FSL_FEATURE_SMC_HAS_LLS_SUBMODE	hal\smc\fsl_smc_features.h	66;"	d
FSL_FEATURE_SMC_HAS_LPOPO	hal\smc\fsl_smc_features.h	38;"	d
FSL_FEATURE_SMC_HAS_LPOPO	hal\smc\fsl_smc_features.h	47;"	d
FSL_FEATURE_SMC_HAS_LPOPO	hal\smc\fsl_smc_features.h	55;"	d
FSL_FEATURE_SMC_HAS_LPOPO	hal\smc\fsl_smc_features.h	63;"	d
FSL_FEATURE_SMC_HAS_LPWUI	hal\smc\fsl_smc_features.h	40;"	d
FSL_FEATURE_SMC_HAS_LPWUI	hal\smc\fsl_smc_features.h	49;"	d
FSL_FEATURE_SMC_HAS_LPWUI	hal\smc\fsl_smc_features.h	57;"	d
FSL_FEATURE_SMC_HAS_LPWUI	hal\smc\fsl_smc_features.h	65;"	d
FSL_FEATURE_SMC_HAS_PORPO	hal\smc\fsl_smc_features.h	39;"	d
FSL_FEATURE_SMC_HAS_PORPO	hal\smc\fsl_smc_features.h	48;"	d
FSL_FEATURE_SMC_HAS_PORPO	hal\smc\fsl_smc_features.h	56;"	d
FSL_FEATURE_SMC_HAS_PORPO	hal\smc\fsl_smc_features.h	64;"	d
FSL_FEATURE_SMC_HAS_PSTOPO	hal\smc\fsl_smc_features.h	37;"	d
FSL_FEATURE_SMC_HAS_PSTOPO	hal\smc\fsl_smc_features.h	46;"	d
FSL_FEATURE_SMC_HAS_PSTOPO	hal\smc\fsl_smc_features.h	54;"	d
FSL_FEATURE_SMC_HAS_PSTOPO	hal\smc\fsl_smc_features.h	62;"	d
FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM	hal\smc\fsl_smc_features.h	43;"	d
FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM	hal\smc\fsl_smc_features.h	52;"	d
FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM	hal\smc\fsl_smc_features.h	60;"	d
FSL_FEATURE_SMC_USE_STOPCTRL_VLLSM	hal\smc\fsl_smc_features.h	68;"	d
FSL_FEATURE_SMC_USE_VLLSCTRL_REG	hal\smc\fsl_smc_features.h	42;"	d
FSL_FEATURE_SMC_USE_VLLSCTRL_REG	hal\smc\fsl_smc_features.h	51;"	d
FSL_FEATURE_SMC_USE_VLLSCTRL_REG	hal\smc\fsl_smc_features.h	59;"	d
FSL_FEATURE_SMC_USE_VLLSCTRL_REG	hal\smc\fsl_smc_features.h	67;"	d
__FSL_SMC_FEATURES_H__	hal\smc\fsl_smc_features.h	31;"	d
smc_hal_config_lpo_power_option	hal\smc\fsl_smc_hal.c	/^void smc_hal_config_lpo_power_option(smc_lpo_option_t option)$/;"	f
smc_hal_config_lpwui_option	hal\smc\fsl_smc_hal.c	/^void smc_hal_config_lpwui_option(smc_lpwui_option_t option)$/;"	f
smc_hal_config_por_power_option	hal\smc\fsl_smc_hal.c	/^void smc_hal_config_por_power_option(smc_por_option_t option)$/;"	f
smc_hal_config_power_mode_protection	hal\smc\fsl_smc_hal.c	/^void smc_hal_config_power_mode_protection(smc_power_mode_protection_config_t *protectConfig)$/;"	f
smc_hal_config_pstop_power_option	hal\smc\fsl_smc_hal.c	/^void smc_hal_config_pstop_power_option(smc_pstop_option_t option)$/;"	f
smc_hal_get_lpo_power_config	hal\smc\fsl_smc_hal.c	/^smc_por_option_t smc_hal_get_lpo_power_config(void)$/;"	f
smc_hal_get_lpwui_config	hal\smc\fsl_smc_hal.c	/^smc_lpwui_option_t smc_hal_get_lpwui_config(void)$/;"	f
smc_hal_get_por_power_config	hal\smc\fsl_smc_hal.c	/^smc_por_option_t smc_hal_get_por_power_config(void)$/;"	f
smc_hal_get_power_mode_protection	hal\smc\fsl_smc_hal.c	/^bool smc_hal_get_power_mode_protection(power_modes_protect_t protect)$/;"	f
smc_hal_get_power_mode_stat	hal\smc\fsl_smc_hal.c	/^uint8_t smc_hal_get_power_mode_stat(void)$/;"	f
smc_hal_get_pstop_power_config	hal\smc\fsl_smc_hal.c	/^smc_por_option_t smc_hal_get_pstop_power_config(void)$/;"	f
smc_hal_power_mode_config_run	hal\smc\fsl_smc_hal.c	/^void smc_hal_power_mode_config_run(smc_run_mode_t runMode)$/;"	f
smc_hal_power_mode_config_stop	hal\smc\fsl_smc_hal.c	/^void smc_hal_power_mode_config_stop(smc_stop_mode_t stopMode)$/;"	f
smc_hal_power_mode_config_stop_submode	hal\smc\fsl_smc_hal.c	/^void smc_hal_power_mode_config_stop_submode(smc_stop_submode_t stopSubMode)$/;"	f
smc_hal_power_mode_get_run_config	hal\smc\fsl_smc_hal.c	/^smc_run_mode_t smc_hal_power_mode_get_run_config(void)$/;"	f
smc_hal_power_mode_get_stop_config	hal\smc\fsl_smc_hal.c	/^smc_stop_mode_t smc_hal_power_mode_get_stop_config(void)$/;"	f
smc_hal_power_mode_get_stop_submode_config	hal\smc\fsl_smc_hal.c	/^smc_stop_submode_t smc_hal_power_mode_get_stop_submode_config(void)$/;"	f
smc_hal_set_power_mode_protection	hal\smc\fsl_smc_hal.c	/^void smc_hal_set_power_mode_protection(power_modes_protect_t protect, bool allow)$/;"	f
__FSL_SMC_HAL_H__	hal\smc\fsl_smc_hal.h	32;"	d
_power_mode_stat	hal\smc\fsl_smc_hal.h	/^typedef enum _power_mode_stat {$/;"	g
_power_modes_protect	hal\smc\fsl_smc_hal.h	/^typedef enum _power_modes_protect {$/;"	g
_smc_lpo_option	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_lpo_option {$/;"	g
_smc_lpwui_option	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_lpwui_option {$/;"	g
_smc_por_option	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_por_option {$/;"	g
_smc_power_mode_protection_config	hal\smc\fsl_smc_hal.h	/^typedef struct _smc_power_mode_protection_config {$/;"	s
_smc_power_options	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_power_options {$/;"	g
_smc_pstop_option	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_pstop_option {$/;"	g
_smc_run_mode	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_run_mode {$/;"	g
_smc_stop_mode	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_stop_mode {$/;"	g
_smc_stop_submode	hal\smc\fsl_smc_hal.h	/^typedef enum _smc_stop_submode {$/;"	g
kAllowHsrun	hal\smc\fsl_smc_hal.h	/^    kAllowHsrun,                    \/*!< Allow High Speed Run mode*\/$/;"	e	enum:_power_modes_protect
kAllowLls	hal\smc\fsl_smc_hal.h	/^    kAllowLls,                      \/*!< Allow Low-Leakage Stop Mode*\/$/;"	e	enum:_power_modes_protect
kAllowMax	hal\smc\fsl_smc_hal.h	/^    kAllowMax$/;"	e	enum:_power_modes_protect
kAllowVlls	hal\smc\fsl_smc_hal.h	/^    kAllowVlls,                     \/*!< Allow Very-Low-Leakage Stop Mode*\/$/;"	e	enum:_power_modes_protect
kAllowVlp	hal\smc\fsl_smc_hal.h	/^    kAllowVlp,                      \/*!< Allow Very-Low-Power Modes*\/$/;"	e	enum:_power_modes_protect
kSmcHsrun	hal\smc\fsl_smc_hal.h	/^    kSmcHsrun                               \/*!< High Speed Run mode (HSRUN)*\/$/;"	e	enum:_smc_run_mode
kSmcLls	hal\smc\fsl_smc_hal.h	/^    kSmcLls,                                \/*!< Low-Leakage Stop mode*\/$/;"	e	enum:_smc_stop_mode
kSmcLpoDisabled	hal\smc\fsl_smc_hal.h	/^    kSmcLpoDisabled                        \/*!< LPO clock is disabled in LLS\/VLLSx*\/$/;"	e	enum:_smc_lpo_option
kSmcLpoEnabled	hal\smc\fsl_smc_hal.h	/^    kSmcLpoEnabled,                        \/*!< LPO clock is enabled in LLS\/VLLSx*\/$/;"	e	enum:_smc_lpo_option
kSmcLpwuiDisabled	hal\smc\fsl_smc_hal.h	/^    kSmcLpwuiDisabled                        \/*!< Low Power Wake Up on Interrupt disabled*\/$/;"	e	enum:_smc_lpwui_option
kSmcLpwuiEnabled	hal\smc\fsl_smc_hal.h	/^    kSmcLpwuiEnabled,                        \/*!< Low Power Wake Up on Interrupt enabled*\/$/;"	e	enum:_smc_lpwui_option
kSmcOptionLpwui	hal\smc\fsl_smc_hal.h	/^    kSmcOptionLpwui,                        \/*!< Low Power Wake Up on Interrupt*\/$/;"	e	enum:_smc_power_options
kSmcOptionPropo	hal\smc\fsl_smc_hal.h	/^    kSmcOptionPropo                         \/*!< POR option*\/$/;"	e	enum:_smc_power_options
kSmcPorDisabled	hal\smc\fsl_smc_hal.h	/^    kSmcPorDisabled                        \/*!< POR detect circuit is disabled in VLLS0*\/$/;"	e	enum:_smc_por_option
kSmcPorEnabled	hal\smc\fsl_smc_hal.h	/^    kSmcPorEnabled,                        \/*!< POR detect circuit is enabled in VLLS0*\/$/;"	e	enum:_smc_por_option
kSmcPstopReserved	hal\smc\fsl_smc_hal.h	/^    kSmcPstopReserved,$/;"	e	enum:_smc_pstop_option
kSmcPstopStop	hal\smc\fsl_smc_hal.h	/^    kSmcPstopStop,                          \/*!< STOP - Normal Stop mode*\/$/;"	e	enum:_smc_pstop_option
kSmcPstopStop1	hal\smc\fsl_smc_hal.h	/^    kSmcPstopStop1,                         \/*!< Partial Stop with both system and bus clocks disabled*\/$/;"	e	enum:_smc_pstop_option
kSmcPstopStop2	hal\smc\fsl_smc_hal.h	/^    kSmcPstopStop2,                         \/*!< Partial Stop with system clock disabled and bus clock enabled*\/$/;"	e	enum:_smc_pstop_option
kSmcReservedRun	hal\smc\fsl_smc_hal.h	/^    kSmcReservedRun,$/;"	e	enum:_smc_run_mode
kSmcReservedStop1	hal\smc\fsl_smc_hal.h	/^    kSmcReservedStop1,                      \/*!< Reserved*\/$/;"	e	enum:_smc_stop_mode
kSmcRun	hal\smc\fsl_smc_hal.h	/^    kSmcRun,                                \/*!< normal RUN mode*\/$/;"	e	enum:_smc_run_mode
kSmcStop	hal\smc\fsl_smc_hal.h	/^    kSmcStop,                               \/*!< Normal STOP mode*\/$/;"	e	enum:_smc_stop_mode
kSmcStopSub0	hal\smc\fsl_smc_hal.h	/^    kSmcStopSub0,                               $/;"	e	enum:_smc_stop_submode
kSmcStopSub1	hal\smc\fsl_smc_hal.h	/^    kSmcStopSub1,                               $/;"	e	enum:_smc_stop_submode
kSmcStopSub2	hal\smc\fsl_smc_hal.h	/^    kSmcStopSub2,                               $/;"	e	enum:_smc_stop_submode
kSmcStopSub3	hal\smc\fsl_smc_hal.h	/^    kSmcStopSub3                                $/;"	e	enum:_smc_stop_submode
kSmcVlls	hal\smc\fsl_smc_hal.h	/^    kSmcVlls                                \/*!< Very-Low-Leakage Stop mode*\/$/;"	e	enum:_smc_stop_mode
kSmcVlpr	hal\smc\fsl_smc_hal.h	/^    kSmcVlpr,                               \/*!< Very-Low-Power RUN mode*\/$/;"	e	enum:_smc_run_mode
kSmcVlps	hal\smc\fsl_smc_hal.h	/^    kSmcVlps,                               \/*!< Very-Low-Power STOP mode*\/$/;"	e	enum:_smc_stop_mode
kStatHsrun	hal\smc\fsl_smc_hal.h	/^    kStatHsrun  = 0x80              \/*!< 1000_0000 - Current power mode is HSRUN*\/$/;"	e	enum:_power_mode_stat
kStatLls	hal\smc\fsl_smc_hal.h	/^    kStatLls    = 0x20,             \/*!< 0010_0000 - Current power mode is LLS*\/$/;"	e	enum:_power_mode_stat
kStatRun	hal\smc\fsl_smc_hal.h	/^    kStatRun    = 0x01,             \/*!< 0000_0001 - Current power mode is RUN*\/$/;"	e	enum:_power_mode_stat
kStatStop	hal\smc\fsl_smc_hal.h	/^    kStatStop   = 0x02,             \/*!< 0000_0010 - Current power mode is STOP*\/$/;"	e	enum:_power_mode_stat
kStatVlls	hal\smc\fsl_smc_hal.h	/^    kStatVlls   = 0x40,             \/*!< 0100_0000 - Current power mode is VLLS*\/$/;"	e	enum:_power_mode_stat
kStatVlpr	hal\smc\fsl_smc_hal.h	/^    kStatVlpr   = 0x04,             \/*!< 0000_0100 - Current power mode is VLPR*\/$/;"	e	enum:_power_mode_stat
kStatVlps	hal\smc\fsl_smc_hal.h	/^    kStatVlps   = 0x10,             \/*!< 0001_0000 - Current power mode is VLPS*\/$/;"	e	enum:_power_mode_stat
kStatVlpw	hal\smc\fsl_smc_hal.h	/^    kStatVlpw   = 0x08,             \/*!< 0000_1000 - Current power mode is VLPW*\/$/;"	e	enum:_power_mode_stat
llsProt	hal\smc\fsl_smc_hal.h	/^    bool                llsProt;            \/*!< lls protect *\/$/;"	m	struct:_smc_power_mode_protection_config
power_mode_stat_t	hal\smc\fsl_smc_hal.h	/^} power_mode_stat_t;$/;"	t	typeref:enum:_power_mode_stat
power_modes_protect_t	hal\smc\fsl_smc_hal.h	/^} power_modes_protect_t;$/;"	t	typeref:enum:_power_modes_protect
smc_lpo_option_t	hal\smc\fsl_smc_hal.h	/^} smc_lpo_option_t;$/;"	t	typeref:enum:_smc_lpo_option
smc_lpwui_option_t	hal\smc\fsl_smc_hal.h	/^} smc_lpwui_option_t;$/;"	t	typeref:enum:_smc_lpwui_option
smc_por_option_t	hal\smc\fsl_smc_hal.h	/^} smc_por_option_t;$/;"	t	typeref:enum:_smc_por_option
smc_power_mode_protection_config_t	hal\smc\fsl_smc_hal.h	/^} smc_power_mode_protection_config_t;$/;"	t	typeref:struct:_smc_power_mode_protection_config
smc_power_options_t	hal\smc\fsl_smc_hal.h	/^} smc_power_options_t;$/;"	t	typeref:enum:_smc_power_options
smc_pstop_option_t	hal\smc\fsl_smc_hal.h	/^} smc_pstop_option_t;$/;"	t	typeref:enum:_smc_pstop_option
smc_run_mode_t	hal\smc\fsl_smc_hal.h	/^} smc_run_mode_t;$/;"	t	typeref:enum:_smc_run_mode
smc_stop_mode_t	hal\smc\fsl_smc_hal.h	/^} smc_stop_mode_t;$/;"	t	typeref:enum:_smc_stop_mode
smc_stop_submode_t	hal\smc\fsl_smc_hal.h	/^} smc_stop_submode_t;$/;"	t	typeref:enum:_smc_stop_submode
vllsProt	hal\smc\fsl_smc_hal.h	/^    bool                vllsProt;           \/*!< vlls protect*\/$/;"	m	struct:_smc_power_mode_protection_config
vlpProt	hal\smc\fsl_smc_hal.h	/^    bool                vlpProt;            \/*!< vlp protect*\/$/;"	m	struct:_smc_power_mode_protection_config
FSL_FEATURE_UART_FIFO_SIZE	hal\uart\fsl_uart_features.h	485;"	d
FSL_FEATURE_UART_FIFO_SIZEn	hal\uart\fsl_uart_features.h	173;"	d
FSL_FEATURE_UART_FIFO_SIZEn	hal\uart\fsl_uart_features.h	263;"	d
FSL_FEATURE_UART_FIFO_SIZEn	hal\uart\fsl_uart_features.h	333;"	d
FSL_FEATURE_UART_FIFO_SIZEn	hal\uart\fsl_uart_features.h	391;"	d
FSL_FEATURE_UART_FIFO_SIZEn	hal\uart\fsl_uart_features.h	96;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	163;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	253;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	323;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	381;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	475;"	d
FSL_FEATURE_UART_HAS_10BIT_DATA_SUPPORT	hal\uart\fsl_uart_features.h	86;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	108;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	182;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	275;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	343;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	403;"	d
FSL_FEATURE_UART_HAS_ADDRESS_MATCHING	hal\uart\fsl_uart_features.h	491;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	165;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	255;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	325;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	383;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	477;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT	hal\uart\fsl_uart_features.h	88;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	167;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	257;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	327;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	385;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	479;"	d
FSL_FEATURE_UART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	90;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	114;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	188;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	281;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	349;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	409;"	d
FSL_FEATURE_UART_HAS_BIT_ORDER_SELECT	hal\uart\fsl_uart_features.h	497;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	171;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	261;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	331;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	389;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	483;"	d
FSL_FEATURE_UART_HAS_BOTH_EDGE_SAMPLING_SUPPORT	hal\uart\fsl_uart_features.h	94;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	110;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	184;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	277;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	345;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	405;"	d
FSL_FEATURE_UART_HAS_DMA_ENABLE	hal\uart\fsl_uart_features.h	493;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	112;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	186;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	279;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	347;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	407;"	d
FSL_FEATURE_UART_HAS_DMA_SELECT	hal\uart\fsl_uart_features.h	495;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	153;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	243;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	313;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	371;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	465;"	d
FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS	hal\uart\fsl_uart_features.h	76;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	155;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	245;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	315;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	373;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	467;"	d
FSL_FEATURE_UART_HAS_FIFO	hal\uart\fsl_uart_features.h	78;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	124;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	195;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	291;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	357;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	501;"	d
FSL_FEATURE_UART_HAS_IMPROVED_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	419;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	149;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	239;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	309;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	367;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	461;"	d
FSL_FEATURE_UART_HAS_IRQ_EXTENDED_FUNCTIONS	hal\uart\fsl_uart_features.h	72;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	159;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	249;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	319;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	377;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	471;"	d
FSL_FEATURE_UART_HAS_IR_SUPPORT	hal\uart\fsl_uart_features.h	82;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORT	hal\uart\fsl_uart_features.h	293;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORT	hal\uart\fsl_uart_features.h	359;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORT	hal\uart\fsl_uart_features.h	503;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORTn	hal\uart\fsl_uart_features.h	126;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORTn	hal\uart\fsl_uart_features.h	197;"	d
FSL_FEATURE_UART_HAS_LOCAL_OPERATION_NETWORK_SUPPORTn	hal\uart\fsl_uart_features.h	427;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	151;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	241;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	311;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	369;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	463;"	d
FSL_FEATURE_UART_HAS_LOW_POWER_UART_SUPPORT	hal\uart\fsl_uart_features.h	74;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	157;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	247;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	317;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	375;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	469;"	d
FSL_FEATURE_UART_HAS_MODEM_SUPPORT	hal\uart\fsl_uart_features.h	80;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	169;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	259;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	329;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	387;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	481;"	d
FSL_FEATURE_UART_HAS_RX_RESYNC_SUPPORT	hal\uart\fsl_uart_features.h	92;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORT	hal\uart\fsl_uart_features.h	499;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	116;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	190;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	283;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	351;"	d
FSL_FEATURE_UART_HAS_SMART_CARD_SUPPORTn	hal\uart\fsl_uart_features.h	411;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	161;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	251;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	321;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	379;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	473;"	d
FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT	hal\uart\fsl_uart_features.h	84;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	104;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	178;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	271;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	339;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	399;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_NO_PARITY	hal\uart\fsl_uart_features.h	487;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	106;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	180;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	273;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	341;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	401;"	d
FSL_FEATURE_UART_MAX_DATA_WIDTH_WITH_PARITY	hal\uart\fsl_uart_features.h	489;"	d
UART_INSTANCE_COUNT	hal\uart\fsl_uart_features.h	307;"	d
UART_INSTANCE_COUNT	hal\uart\fsl_uart_features.h	459;"	d
UART_INSTANCE_COUNT	hal\uart\fsl_uart_features.h	70;"	d
__FSL_UART_FEATURES_H__	hal\uart\fsl_uart_features.h	31;"	d
UartConfig	hal\uart\fsl_uart_hal.h	/^typedef struct UartConfig {$/;"	s
UartIdleLineConfig	hal\uart\fsl_uart_hal.h	/^typedef struct UartIdleLineConfig {$/;"	s
UartInterruptConfig	hal\uart\fsl_uart_hal.h	/^typedef struct UartInterruptConfig {$/;"	s
UartStatusAll	hal\uart\fsl_uart_hal.h	/^typedef struct UartStatusAll {$/;"	s
__FSL_UART_HAL_H__	hal\uart\fsl_uart_hal.h	31;"	d
_uart_bit_count_per_char	hal\uart\fsl_uart_hal.h	/^typedef enum  _uart_bit_count_per_char {$/;"	g
_uart_break_char_length	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_break_char_length {$/;"	g
_uart_idle_line_select	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_idle_line_select {$/;"	g
_uart_ir_tx_pulsewidth	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_ir_tx_pulsewidth {$/;"	g
_uart_operation_config	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_operation_config {$/;"	g
_uart_parity_mode	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_parity_mode {$/;"	g
_uart_singlewire_txdir	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_singlewire_txdir {$/;"	g
_uart_status	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_status$/;"	g
_uart_status_flag	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_status_flag {$/;"	g
_uart_stop_bit_count	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_stop_bit_count {$/;"	g
_uart_wakeup_method	hal\uart\fsl_uart_hal.h	/^typedef enum _uart_wakeup_method {$/;"	g
baudRate	hal\uart\fsl_uart_hal.h	/^    uint32_t baudRate;            \/*!< UART baud rate *\/$/;"	m	struct:UartConfig
bitCountPerChar	hal\uart\fsl_uart_hal.h	/^    uart_bit_count_per_char_t bitCountPerChar; \/*!< Number of bits, 8-bit (default) or 9-bit$/;"	m	struct:UartConfig
frameError	hal\uart\fsl_uart_hal.h	/^    unsigned frameError : 1;              \/*!< Frame error flag, sets if  logic 0 was detected$/;"	m	struct:UartStatusAll
frameErrorFlag	hal\uart\fsl_uart_hal.h	/^    unsigned frameErrorFlag : 1;    \/*!< Framing error flag: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
idleLine	hal\uart\fsl_uart_hal.h	/^    unsigned idleLine : 1;          \/*!< Idle line: 0 - disable interrupt, 1 - enable interrupt*\/$/;"	m	struct:UartInterruptConfig
idleLineDetect	hal\uart\fsl_uart_hal.h	/^    unsigned idleLineDetect : 1;         \/*!< Idle line detect flag, sets when idle line detected *\/$/;"	m	struct:UartStatusAll
idleLineType	hal\uart\fsl_uart_hal.h	/^    unsigned idleLineType : 1; \/*!< ILT, Idle bit count start: 0 - after start bit (default),$/;"	m	struct:UartIdleLineConfig
kStatus_UART_BaudRateCalculationError	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_BaudRateCalculationError,\/*!< UART Baud Rate calculation error out of range. *\/$/;"	e	enum:_uart_status
kStatus_UART_BaudRatePercentDiffExceeded	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_BaudRatePercentDiffExceeded,   \/*!< UART Baud Rate exceeds percentage difference *\/$/;"	e	enum:_uart_status
kStatus_UART_BitCountNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_BitCountNotSupported,  \/*!< UART bit count config not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_BothEdgeNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_BothEdgeNotSupported,  \/*!< UART both edge sampling not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_ClearStatusFlagError	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_ClearStatusFlagError,  \/*!< UART clear status flag error. *\/$/;"	e	enum:_uart_status
kStatus_UART_InvalidBitSetting	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_InvalidBitSetting,  \/*!< Invalid setting for desired UART register bit field. *\/$/;"	e	enum:_uart_status
kStatus_UART_InvalidInstanceNumber	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_InvalidInstanceNumber, \/*!< Invalid UART instance number. *\/$/;"	e	enum:_uart_status
kStatus_UART_MSBFirstNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_MSBFirstNotSupported,  \/*!< UART MSB first feature not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_NoReceiveInProgress	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_NoReceiveInProgress, \/*!< UART no receive in progress. *\/$/;"	e	enum:_uart_status
kStatus_UART_NoTransmitInProgress	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_NoTransmitInProgress, \/*!< UART no transmit in progress. *\/$/;"	e	enum:_uart_status
kStatus_UART_OverSamplingNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_OverSamplingNotSupported,  \/*!< UART oversampling not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_ResyncNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_ResyncNotSupported,  \/*!< UART resync disable operation not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_RxBusy	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_RxBusy,  \/*!< UART receive still in progress. *\/$/;"	e	enum:_uart_status
kStatus_UART_RxNotDisabled	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_RxNotDisabled,  \/*!< UART Receiver not disabled before enabling feature *\/$/;"	e	enum:_uart_status
kStatus_UART_RxStandbyModeError	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_RxStandbyModeError,  \/*!< UART unable to place receiver in standby mode. *\/$/;"	e	enum:_uart_status
kStatus_UART_StopBitCountNotSupported	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_StopBitCountNotSupported,  \/*!< UART stop bit count config not supported. *\/$/;"	e	enum:_uart_status
kStatus_UART_Success	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_Success = 0,$/;"	e	enum:_uart_status
kStatus_UART_Timeout	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_Timeout,  \/*!< UART transfer timed out.*\/$/;"	e	enum:_uart_status
kStatus_UART_TxBusy	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_TxBusy,  \/*!< UART transmit still in progress. *\/$/;"	e	enum:_uart_status
kStatus_UART_TxNotDisabled	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_TxNotDisabled,  \/*!< UART Transmitter not disabled before enabling feature *\/$/;"	e	enum:_uart_status
kStatus_UART_TxOrRxNotDisabled	hal\uart\fsl_uart_hal.h	/^    kStatus_UART_TxOrRxNotDisabled,   \/*!< UART Transmitter or Receiver not disabled *\/$/;"	e	enum:_uart_status
kUart10BitsPerChar	hal\uart\fsl_uart_hal.h	/^    kUart10BitsPerChar = 2,  \/*!< 10-bit data characters *\/$/;"	e	enum:_uart_bit_count_per_char
kUart8BitsPerChar	hal\uart\fsl_uart_hal.h	/^    kUart8BitsPerChar = 0,   \/*!< 8-bit data characters *\/$/;"	e	enum:_uart_bit_count_per_char
kUart9BitsPerChar	hal\uart\fsl_uart_hal.h	/^    kUart9BitsPerChar = 1,   \/*!< 9-bit data characters *\/$/;"	e	enum:_uart_bit_count_per_char
kUartAddrMarkWake	hal\uart\fsl_uart_hal.h	/^    kUartAddrMarkWake = 1,   \/*!< The addr-mark wakes UART receiver from standby *\/$/;"	e	enum:_uart_wakeup_method
kUartBreakChar10BitMinimum	hal\uart\fsl_uart_hal.h	/^    kUartBreakChar10BitMinimum = 0, \/*!< UART break char length 10 bit times (if M = 0, SBNS = 0) or$/;"	e	enum:_uart_break_char_length
kUartBreakChar13BitMinimum	hal\uart\fsl_uart_hal.h	/^    kUartBreakChar13BitMinimum = 1, \/*!< UART break char length 13 bit times (if M = 0, SBNS = 0) or$/;"	e	enum:_uart_break_char_length
kUartFrameError	hal\uart\fsl_uart_hal.h	/^    kUartFrameError,              \/*!< Frame error flag, sets if  logic 0 was detected where stop$/;"	e	enum:_uart_status_flag
kUartIdleLineAfterStartBit	hal\uart\fsl_uart_hal.h	/^    kUartIdleLineAfterStartBit = 0,  \/*!< UART idle character bit count start after start bit *\/$/;"	e	enum:_uart_idle_line_select
kUartIdleLineAfterStopBit	hal\uart\fsl_uart_hal.h	/^    kUartIdleLineAfterStopBit = 1,   \/*!< UART idle character bit count start after stop bit *\/$/;"	e	enum:_uart_idle_line_select
kUartIdleLineDetect	hal\uart\fsl_uart_hal.h	/^    kUartIdleLineDetect,          \/*!< Idle line detect flag, sets when idle line detected *\/$/;"	e	enum:_uart_status_flag
kUartIdleLineWake	hal\uart\fsl_uart_hal.h	/^    kUartIdleLineWake = 0,  \/*!< The idle-line wakes UART receiver from standby *\/$/;"	e	enum:_uart_wakeup_method
kUartIrOneFourthWidth	hal\uart\fsl_uart_hal.h	/^    kUartIrOneFourthWidth = 3,         \/*!< 1\/4 pulse *\/$/;"	e	enum:_uart_ir_tx_pulsewidth
kUartIrOneSixteenthWidth	hal\uart\fsl_uart_hal.h	/^    kUartIrOneSixteenthWidth = 1,      \/*!< 1\/16 pulse *\/$/;"	e	enum:_uart_ir_tx_pulsewidth
kUartIrOneThirtysecondsWidth	hal\uart\fsl_uart_hal.h	/^    kUartIrOneThirtysecondsWidth = 2,  \/*!< 1\/32 pulse *\/$/;"	e	enum:_uart_ir_tx_pulsewidth
kUartIrThreeSixteenthsWidth	hal\uart\fsl_uart_hal.h	/^    kUartIrThreeSixteenthsWidth = 0,   \/*!< 3\/16 pulse *\/$/;"	e	enum:_uart_ir_tx_pulsewidth
kUartLineBreakDetect	hal\uart\fsl_uart_hal.h	/^    kUartLineBreakDetect,         \/*!< LIN break detect interrupt flag, sets when$/;"	e	enum:_uart_status_flag
kUartNoiseDetect	hal\uart\fsl_uart_hal.h	/^    kUartNoiseDetect,             \/*!< Receiver takes 3 samples of each received bit. If any of$/;"	e	enum:_uart_status_flag
kUartNoiseInCurrentWord	hal\uart\fsl_uart_hal.h	/^    kUartNoiseInCurrentWord,     \/*!< NOISY bit sets if noise detected in current data word *\/$/;"	e	enum:_uart_status_flag
kUartOneStopBit	hal\uart\fsl_uart_hal.h	/^    kUartOneStopBit = 0,  \/*!< one stop bit *\/$/;"	e	enum:_uart_stop_bit_count
kUartOperates	hal\uart\fsl_uart_hal.h	/^    kUartOperates = 0,  \/*!< UART continues to operate normally *\/$/;"	e	enum:_uart_operation_config
kUartParityDisabled	hal\uart\fsl_uart_hal.h	/^    kUartParityDisabled = 0x0,  \/*!< parity disabled *\/$/;"	e	enum:_uart_parity_mode
kUartParityError	hal\uart\fsl_uart_hal.h	/^    kUartParityError,             \/*!< If parity enabled, will set upon parity error detection *\/$/;"	e	enum:_uart_status_flag
kUartParityErrorInCurrentWord	hal\uart\fsl_uart_hal.h	/^    kUartParityErrorInCurrentWord, \/*!< PARITYE bit sets if noise detected in current data word *\/$/;"	e	enum:_uart_status_flag
kUartParityEven	hal\uart\fsl_uart_hal.h	/^    kUartParityEven     = 0x2,  \/*!< parity enabled, type even, bit setting: PE|PT = 10 *\/$/;"	e	enum:_uart_parity_mode
kUartParityOdd	hal\uart\fsl_uart_hal.h	/^    kUartParityOdd      = 0x3,  \/*!< parity enabled, type odd,  bit setting: PE|PT = 11 *\/$/;"	e	enum:_uart_parity_mode
kUartReceiveActiveEdgeDetect	hal\uart\fsl_uart_hal.h	/^    kUartReceiveActiveEdgeDetect, \/*!< Receive pin active edge interrupt flag, sets when active$/;"	e	enum:_uart_status_flag
kUartReceiveDataRegisterFull	hal\uart\fsl_uart_hal.h	/^    kUartReceiveDataRegisterFull, \/*!< Receive data register full flag, sets when the receive data$/;"	e	enum:_uart_status_flag
kUartReceiveOverrun	hal\uart\fsl_uart_hal.h	/^    kUartReceiveOverrun,          \/*!< Receiver Overrun sets when new data is received before data$/;"	e	enum:_uart_status_flag
kUartReceiverActive	hal\uart\fsl_uart_hal.h	/^    kUartReceiverActive,        \/*!< Receiver Active Flag (RAF), sets a beginning of valid start$/;"	e	enum:_uart_status_flag
kUartRxBufferEmpty	hal\uart\fsl_uart_hal.h	/^    kUartRxBufferEmpty,          \/*!< RXEMPT bit sets if transmit buffer is empty *\/$/;"	e	enum:_uart_status_flag
kUartRxBufferUnderflow	hal\uart\fsl_uart_hal.h	/^    kUartRxBufferUnderflow,       \/*!< RXUF bit sets if receive buffer underflowed occurred *\/$/;"	e	enum:_uart_status_flag
kUartSinglewireTxdirIn	hal\uart\fsl_uart_hal.h	/^    kUartSinglewireTxdirIn = 0,  \/*!< UART Single Wire mode TXDIR input *\/$/;"	e	enum:_uart_singlewire_txdir
kUartSinglewireTxdirOut	hal\uart\fsl_uart_hal.h	/^    kUartSinglewireTxdirOut = 1, \/*!< UART Single Wire mode TXDIR output *\/$/;"	e	enum:_uart_singlewire_txdir
kUartStops	hal\uart\fsl_uart_hal.h	/^    kUartStops = 1,   \/*!< UART siezes operation *\/$/;"	e	enum:_uart_operation_config
kUartTransmissionComplete	hal\uart\fsl_uart_hal.h	/^    kUartTransmissionComplete,    \/*!< Transmission complete flag, sets when transmitter is idle$/;"	e	enum:_uart_status_flag
kUartTransmitDataRegisterEmpty	hal\uart\fsl_uart_hal.h	/^    kUartTransmitDataRegisterEmpty, \/*!< Transmit data register empty flag, sets when transmit$/;"	e	enum:_uart_status_flag
kUartTwoStopBit	hal\uart\fsl_uart_hal.h	/^    kUartTwoStopBit = 1,  \/*!< two stop bits *\/$/;"	e	enum:_uart_stop_bit_count
kUartTxBufferEmpty	hal\uart\fsl_uart_hal.h	/^    kUartTxBufferEmpty,          \/*!< TXEMPT bit sets if transmit buffer is empty *\/$/;"	e	enum:_uart_status_flag
kUartTxBufferOverflow	hal\uart\fsl_uart_hal.h	/^    kUartTxBufferOverflow,       \/*!< TXOF bit sets if transmit buffer overflowed occurred *\/$/;"	e	enum:_uart_status_flag
linBreakDetect	hal\uart\fsl_uart_hal.h	/^    unsigned linBreakDetect : 1;    \/*!< LIN break detect: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
lineBreakDetect	hal\uart\fsl_uart_hal.h	/^    unsigned lineBreakDetect : 1;         \/*!< LIN break detect interrupt flag, sets when$/;"	m	struct:UartStatusAll
noiseDetect	hal\uart\fsl_uart_hal.h	/^    unsigned noiseDetect : 1;             \/*!< Receiver takes 3 samples of each received bit.$/;"	m	struct:UartStatusAll
noiseErrorFlag	hal\uart\fsl_uart_hal.h	/^    unsigned noiseErrorFlag : 1;    \/*!< Noise error flag: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
noiseInCurrentWord	hal\uart\fsl_uart_hal.h	/^    unsigned noiseInCurrentWord  : 1;  \/*!< NOISY bit sets if noise detected in current data word *\/$/;"	m	struct:UartStatusAll
parityError	hal\uart\fsl_uart_hal.h	/^    unsigned parityError : 1;             \/*!< If parity enabled, will set upon parity$/;"	m	struct:UartStatusAll
parityErrorFlag	hal\uart\fsl_uart_hal.h	/^    unsigned parityErrorFlag : 1;   \/*!< Parity error flag: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
parityErrorInCurrentWord	hal\uart\fsl_uart_hal.h	/^    unsigned parityErrorInCurrentWord  : 1; \/*!< PARITYE bit sets if noise detected in$/;"	m	struct:UartStatusAll
parityMode	hal\uart\fsl_uart_hal.h	/^    uart_parity_mode_t parityMode; \/*!< Parity mode, disabled (default), even, or odd *\/$/;"	m	struct:UartConfig
receiveActiveEdgeDetect	hal\uart\fsl_uart_hal.h	/^    unsigned receiveActiveEdgeDetect : 1; \/*!< Receive pin active edge interrupt flag, sets$/;"	m	struct:UartStatusAll
receiveDataRegisterFull	hal\uart\fsl_uart_hal.h	/^    unsigned receiveDataRegisterFull : 1; \/*!< Receive data register full flag, sets when the$/;"	m	struct:UartStatusAll
receiveOverrun	hal\uart\fsl_uart_hal.h	/^    unsigned receiveOverrun : 1;          \/*!< Receiver Overrun sets when new data is received$/;"	m	struct:UartStatusAll
receiverActive	hal\uart\fsl_uart_hal.h	/^    unsigned receiverActive : 1;          \/*!< Receiver Active Flag (RAF), sets a beginning of$/;"	m	struct:UartStatusAll
receiverDataRegisterFull	hal\uart\fsl_uart_hal.h	/^    unsigned receiverDataRegisterFull : 1; \/*!< Receiver data register full:$/;"	m	struct:UartInterruptConfig
receiverOverrun	hal\uart\fsl_uart_hal.h	/^    unsigned receiverOverrun : 1;   \/*!< Receiver Overrun: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
rxActiveEdge	hal\uart\fsl_uart_hal.h	/^    unsigned rxActiveEdge : 1;      \/*!< RX Active Edge: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
rxBufferEmpty	hal\uart\fsl_uart_hal.h	/^    unsigned rxBufferEmpty  : 1;         \/*!< RXEMPT bit sets if transmit buffer is empty *\/$/;"	m	struct:UartStatusAll
rxBufferUnderflow	hal\uart\fsl_uart_hal.h	/^    unsigned rxBufferUnderflow  : 1;    \/*!< RXUF bit sets if receive buffer underflowed occurred *\/$/;"	m	struct:UartStatusAll
rxDataInvert	hal\uart\fsl_uart_hal.h	/^    unsigned rxDataInvert : 1; \/*!< Receive Data Inversion: 0 - not inverted (default),$/;"	m	struct:UartConfig
rxFifoUnderflow	hal\uart\fsl_uart_hal.h	/^    unsigned rxFifoUnderflow : 1;   \/*!< RX FIFO Underflow: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
rxWakeIdleDetect	hal\uart\fsl_uart_hal.h	/^    unsigned rxWakeIdleDetect : 1; \/*!< RWUID, Receiver Wake Up Idle Detect. IDLE status bit$/;"	m	struct:UartIdleLineConfig
stopBitCount	hal\uart\fsl_uart_hal.h	/^    uart_stop_bit_count_t stopBitCount; \/*!< Number of stop bits, 1 stop bit (default)$/;"	m	struct:UartConfig
transmissionComplete	hal\uart\fsl_uart_hal.h	/^    unsigned transmissionComplete : 1;    \/*!< Transmission complete flag, sets when transmitter$/;"	m	struct:UartStatusAll
transmitComplete	hal\uart\fsl_uart_hal.h	/^    unsigned transmitComplete : 1;  \/*!< Transmission complete: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
transmitDataRegisterEmpty	hal\uart\fsl_uart_hal.h	/^    unsigned transmitDataRegisterEmpty : 1; \/*!< Transmit data register empty flag, sets when$/;"	m	struct:UartStatusAll
transmitDataRegisterEmpty	hal\uart\fsl_uart_hal.h	/^    unsigned transmitDataRegisterEmpty : 1; \/*!< Transmit data register empty:$/;"	m	struct:UartInterruptConfig
txBufferEmpty	hal\uart\fsl_uart_hal.h	/^    unsigned txBufferEmpty  : 1;         \/*!< TXEMPT bit sets if transmit buffer is empty *\/$/;"	m	struct:UartStatusAll
txBufferOverflow	hal\uart\fsl_uart_hal.h	/^    unsigned txBufferOverflow  : 1;     \/*!< TXOF bit sets if transmit buffer overflowed occurred *\/$/;"	m	struct:UartStatusAll
txDataInvert	hal\uart\fsl_uart_hal.h	/^    unsigned txDataInvert : 1; \/*!< Transmit Data Inversion: 0 - not inverted (default),$/;"	m	struct:UartConfig
txFifoOverflow	hal\uart\fsl_uart_hal.h	/^    unsigned txFifoOverflow : 1;    \/*!< TX FIFO Overflow: 0 - disable interrupt,$/;"	m	struct:UartInterruptConfig
uartSourceClockInHz	hal\uart\fsl_uart_hal.h	/^    uint32_t uartSourceClockInHz; \/*!< UART module source clock in Hz *\/$/;"	m	struct:UartConfig
uart_bit_count_per_char_t	hal\uart\fsl_uart_hal.h	/^} uart_bit_count_per_char_t;$/;"	t	typeref:enum:_uart_bit_count_per_char
uart_break_char_length_t	hal\uart\fsl_uart_hal.h	/^} uart_break_char_length_t;$/;"	t	typeref:enum:_uart_break_char_length
uart_config_t	hal\uart\fsl_uart_hal.h	/^} uart_config_t;$/;"	t	typeref:struct:UartConfig
uart_idle_line_config_t	hal\uart\fsl_uart_hal.h	/^} uart_idle_line_config_t;$/;"	t	typeref:struct:UartIdleLineConfig
uart_idle_line_select_t	hal\uart\fsl_uart_hal.h	/^} uart_idle_line_select_t;$/;"	t	typeref:enum:_uart_idle_line_select
uart_interrupt_config_t	hal\uart\fsl_uart_hal.h	/^} uart_interrupt_config_t;$/;"	t	typeref:struct:UartInterruptConfig
uart_ir_tx_pulsewidth_t	hal\uart\fsl_uart_hal.h	/^} uart_ir_tx_pulsewidth_t;$/;"	t	typeref:enum:_uart_ir_tx_pulsewidth
uart_operation_config_t	hal\uart\fsl_uart_hal.h	/^} uart_operation_config_t;$/;"	t	typeref:enum:_uart_operation_config
uart_parity_mode_t	hal\uart\fsl_uart_hal.h	/^} uart_parity_mode_t;$/;"	t	typeref:enum:_uart_parity_mode
uart_singlewire_txdir_t	hal\uart\fsl_uart_hal.h	/^} uart_singlewire_txdir_t;$/;"	t	typeref:enum:_uart_singlewire_txdir
uart_status_flag_all_t	hal\uart\fsl_uart_hal.h	/^} uart_status_flag_all_t;$/;"	t	typeref:struct:UartStatusAll
uart_status_flag_t	hal\uart\fsl_uart_hal.h	/^} uart_status_flag_t;$/;"	t	typeref:enum:_uart_status_flag
uart_status_t	hal\uart\fsl_uart_hal.h	/^} uart_status_t;$/;"	t	typeref:enum:_uart_status
uart_stop_bit_count_t	hal\uart\fsl_uart_hal.h	/^} uart_stop_bit_count_t;$/;"	t	typeref:enum:_uart_stop_bit_count
uart_wakeup_method_t	hal\uart\fsl_uart_hal.h	/^} uart_wakeup_method_t;$/;"	t	typeref:enum:_uart_wakeup_method
uart_hal_configure_bit_count_per_char	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_configure_bit_count_per_char(uint32_t uartInstance,$/;"	f
uart_hal_configure_both_edge_sampling	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_configure_both_edge_sampling(uint32_t uartInstance,$/;"	f
uart_hal_configure_parity_mode	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_configure_parity_mode(uint32_t uartInstance, uart_parity_mode_t parityModeType)$/;"	f
uart_hal_configure_stop_bit_count	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_configure_stop_bit_count(uint32_t uartInstance,$/;"	f
uart_hal_configure_tx_rx_inversion	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_configure_tx_rx_inversion(uint32_t uartInstance, uint32_t rxInvert, uint32_t txInvert)$/;"	f
uart_hal_disable_receiver	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_disable_receiver(uint32_t uartInstance)$/;"	f
uart_hal_disable_transmitter	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_disable_transmitter(uint32_t uartInstance)$/;"	f
uart_hal_enable_receiver	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_enable_receiver(uint32_t uartInstance)$/;"	f
uart_hal_enable_transmitter	hal\uart\fsl_uart_hal_common_configurations.c	/^void uart_hal_enable_transmitter(uint32_t uartInstance)$/;"	f
uart_hal_init	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_init(uint32_t uartInstance, const uart_config_t *config)$/;"	f
uart_hal_is_receiver_enabled	hal\uart\fsl_uart_hal_common_configurations.c	/^bool uart_hal_is_receiver_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_transmitter_enabled	hal\uart\fsl_uart_hal_common_configurations.c	/^bool uart_hal_is_transmitter_enabled(uint32_t uartInstance)$/;"	f
uart_hal_set_baud_rate	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_set_baud_rate(uint32_t uartInstance, uint32_t sourceClockInHz,$/;"	f
uart_hal_set_baud_rate_divisor	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_set_baud_rate_divisor(uint32_t uartInstance, uint32_t baudRateDivisor)$/;"	f
uart_hal_set_baud_rate_fine_adjust	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_set_baud_rate_fine_adjust(uint32_t uartInstance, uint8_t baudFineAdjust)$/;"	f
uart_hal_set_oversampling_ratio	hal\uart\fsl_uart_hal_common_configurations.c	/^uart_status_t uart_hal_set_oversampling_ratio(uint32_t uartInstance, uint32_t overSamplingRatio)$/;"	f
uart_hal_clear_rx_fifo_underflow	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void  uart_hal_clear_rx_fifo_underflow(uint32_t uartInstance)$/;"	f
uart_hal_clear_tx_fifo_overflow	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void  uart_hal_clear_tx_fifo_overflow(uint32_t uartInstance)$/;"	f
uart_hal_disable_rx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_disable_rx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_disable_rx_fifo_underflow_interrupt	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void uart_hal_disable_rx_fifo_underflow_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_tx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_disable_tx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_disable_tx_fifo_overflow_interrupt	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void uart_hal_disable_tx_fifo_overflow_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_rx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_enable_rx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_enable_rx_fifo_underflow_interrupt	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void uart_hal_enable_rx_fifo_underflow_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_tx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_enable_tx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_enable_tx_fifo_overflow_interrupt	hal\uart\fsl_uart_hal_fifo_configurations.c	/^void uart_hal_enable_tx_fifo_overflow_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_flush_rx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_flush_rx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_flush_tx_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_flush_tx_fifo(uint32_t uartInstance)$/;"	f
uart_hal_get_rx_dataword_count_in_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_rx_dataword_count_in_fifo(uint32_t uartInstance)$/;"	f
uart_hal_get_rx_fifo_size	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_rx_fifo_size(uint32_t uartInstance)$/;"	f
uart_hal_get_rx_fifo_watermark	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_rx_fifo_watermark(uint32_t uartInstance)$/;"	f
uart_hal_get_tx_dataword_count_in_fifo	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_tx_dataword_count_in_fifo(uint32_t uartInstance)$/;"	f
uart_hal_get_tx_fifo_size	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_tx_fifo_size(uint32_t uartInstance)$/;"	f
uart_hal_get_tx_fifo_watermark	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uint8_t uart_hal_get_tx_fifo_watermark(uint32_t uartInstance)$/;"	f
uart_hal_is_rx_fifo_empty	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_rx_fifo_empty(uint32_t uartInstance)$/;"	f
uart_hal_is_rx_fifo_underflow	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_rx_fifo_underflow(uint32_t uartInstance)$/;"	f
uart_hal_is_rx_fifo_underflow_interrupt_enabled	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_rx_fifo_underflow_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_tx_fifo_empty	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_tx_fifo_empty(uint32_t uartInstance)$/;"	f
uart_hal_is_tx_fifo_overflow	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_tx_fifo_overflow(uint32_t uartInstance)$/;"	f
uart_hal_is_tx_fifo_overflow_interrupt_enabled	hal\uart\fsl_uart_hal_fifo_configurations.c	/^bool uart_hal_is_tx_fifo_overflow_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_set_rx_fifo_watermark	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_set_rx_fifo_watermark(uint32_t uartInstance, uint8_t watermark)$/;"	f
uart_hal_set_tx_fifo_watermark	hal\uart\fsl_uart_hal_fifo_configurations.c	/^uart_status_t uart_hal_set_tx_fifo_watermark(uint32_t uartInstance, uint8_t watermark)$/;"	f
uart_hal_configure_dma	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_configure_dma(uint32_t uartInstance, bool txDmaConfig, bool  rxDmaConfig)$/;"	f
uart_hal_configure_interrupts	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_configure_interrupts(uint32_t uartInstance,$/;"	f
uart_hal_disable_break_detect_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_break_detect_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_framing_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_framing_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_idle_line_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_idle_line_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_noise_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_noise_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_parity_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_parity_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_rx_active_edge_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_rx_active_edge_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_rx_data_register_full_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_rx_data_register_full_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_rx_overrun_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_rx_overrun_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_transmission_complete_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_transmission_complete_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_disable_tx_data_register_empty_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_disable_tx_data_register_empty_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_break_detect_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_break_detect_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_framing_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_framing_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_idle_line_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_idle_line_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_noise_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_noise_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_parity_error_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_parity_error_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_rx_active_edge_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_rx_active_edge_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_rx_data_register_full_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_rx_data_register_full_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_rx_overrun_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_rx_overrun_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_transmission_complete_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_transmission_complete_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_enable_tx_data_register_empty_interrupt	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^void uart_hal_enable_tx_data_register_empty_interrupt(uint32_t uartInstance)$/;"	f
uart_hal_is_break_detect_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_break_detect_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_framing_error_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_framing_error_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_idle_line_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_idle_line_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_noise_error_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_noise_error_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_parity_error_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_parity_error_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_receive_data_full_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_receive_data_full_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_rx_active_edge_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_rx_active_edge_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_rx_overrun_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_rx_overrun_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_rxdma_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_rxdma_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_transmission_complete_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_transmission_complete_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_tx_data_register_empty_interrupt_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_tx_data_register_empty_interrupt_enabled(uint32_t uartInstance)$/;"	f
uart_hal_is_txdma_enabled	hal\uart\fsl_uart_hal_interrupts_and_dma.c	/^bool uart_hal_is_txdma_enabled(uint32_t uartInstance)$/;"	f
uart_hal_configure_idle_line_detect	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_idle_line_detect(uint32_t uartInstance,$/;"	f
uart_hal_configure_infrared_operation	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_infrared_operation(uint32_t uartInstance, bool enable,$/;"	f
uart_hal_configure_loopback_mode	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_loopback_mode(uint32_t uartInstance, bool enable)$/;"	f
uart_hal_configure_match_address_operation	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_status_t uart_hal_configure_match_address_operation$/;"	f
uart_hal_configure_receive_resync_disable_operation	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_status_t uart_hal_configure_receive_resync_disable_operation(uint32_t uartInstance,$/;"	f
uart_hal_configure_send_msb_first_operation	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_status_t uart_hal_configure_send_msb_first_operation(uint32_t uartInstance, bool enable)$/;"	f
uart_hal_configure_singlewire_mode	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_singlewire_mode(uint32_t uartInstance, bool enable)$/;"	f
uart_hal_configure_transmitter_rts_polarity	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_transmitter_rts_polarity(uint32_t uartInstance, bool polarity)$/;"	f
uart_hal_configure_txdir_in_singlewire_mode	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_configure_txdir_in_singlewire_mode(uint32_t uartInstance,$/;"	f
uart_hal_configure_wait_mode_operation	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void  uart_hal_configure_wait_mode_operation(uint32_t uartInstance, uart_operation_config_t mode)$/;"	f
uart_hal_disable_receiver_rts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_disable_receiver_rts(uint32_t uartInstance)$/;"	f
uart_hal_disable_transmitter_cts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_disable_transmitter_cts(uint32_t uartInstance)$/;"	f
uart_hal_disable_transmitter_rts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_disable_transmitter_rts(uint32_t uartInstance)$/;"	f
uart_hal_enable_receiver_rts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_enable_receiver_rts(uint32_t uartInstance)$/;"	f
uart_hal_enable_transmitter_cts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_enable_transmitter_cts(uint32_t uartInstance)$/;"	f
uart_hal_enable_transmitter_rts	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_enable_transmitter_rts(uint32_t uartInstance)$/;"	f
uart_hal_get_receiver_wakeup_method	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_wakeup_method_t uart_hal_get_receiver_wakeup_method(uint32_t uartInstance)$/;"	f
uart_hal_get_wait_mode_operation_config	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_operation_config_t uart_hal_get_wait_mode_operation_config(uint32_t uartInstance)$/;"	f
uart_hal_is_receiver_in_standby	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^bool uart_hal_is_receiver_in_standby(uint32_t uartInstance)$/;"	f
uart_hal_put_receiver_in_normal_mode	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_put_receiver_in_normal_mode(uint32_t uartInstance)$/;"	f
uart_hal_put_receiver_in_standby_mode	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^uart_status_t uart_hal_put_receiver_in_standby_mode(uint32_t uartInstance)$/;"	f
uart_hal_queue_break_char_to_send	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_queue_break_char_to_send(uint32_t uartInstance, bool enable)$/;"	f
uart_hal_select_receiver_wakeup_method	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_select_receiver_wakeup_method(uint32_t uartInstance, uart_wakeup_method_t method)$/;"	f
uart_hal_set_break_char_detect_length	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_set_break_char_detect_length(uint32_t uartInstance, uart_break_char_length_t length)$/;"	f
uart_hal_set_break_char_transmit_length	hal\uart\fsl_uart_hal_special_feature_configurations.c	/^void uart_hal_set_break_char_transmit_length(uint32_t uartInstance,$/;"	f
uart_hal_clear_all_non_autoclear_status_flags	hal\uart\fsl_uart_hal_status_flags.c	/^void uart_hal_clear_all_non_autoclear_status_flags(uint32_t uartInstance)$/;"	f
uart_hal_clear_status_flag	hal\uart\fsl_uart_hal_status_flags.c	/^uart_status_t uart_hal_clear_status_flag(uint32_t uartInstance, uart_status_flag_t statusFlag)$/;"	f
uart_hal_get_all_status_flag	hal\uart\fsl_uart_hal_status_flags.c	/^void uart_hal_get_all_status_flag(uint32_t uartInstance, uart_status_flag_all_t *allStatusFlag)$/;"	f
uart_hal_is_frame_error_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_frame_error_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_idle_line_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_idle_line_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_line_break_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_line_break_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_noise_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_noise_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_parity_error_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_parity_error_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_receive_active_edge_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_receive_active_edge_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_receive_data_register_full	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_receive_data_register_full(uint32_t uartInstance)$/;"	f
uart_hal_is_receive_overrun_detected	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_receive_overrun_detected(uint32_t uartInstance)$/;"	f
uart_hal_is_receiver_active	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_receiver_active(uint32_t uartInstance)$/;"	f
uart_hal_is_transmission_complete	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_transmission_complete(uint32_t uartInstance)$/;"	f
uart_hal_is_transmit_data_register_empty	hal\uart\fsl_uart_hal_status_flags.c	/^bool uart_hal_is_transmit_data_register_empty(uint32_t uartInstance)$/;"	f
uart_hal_configure_bit10_as_paritybit_operation	hal\uart\fsl_uart_hal_transfer_functions.c	/^void uart_hal_configure_bit10_as_paritybit_operation(uint32_t uartInstance, bool enable)$/;"	f
uart_hal_getchar	hal\uart\fsl_uart_hal_transfer_functions.c	/^void uart_hal_getchar(uint32_t uartInstance, uint8_t *readData)$/;"	f
uart_hal_getchar10	hal\uart\fsl_uart_hal_transfer_functions.c	/^uart_status_t uart_hal_getchar10(uint32_t uartInstance, uint16_t *readData)$/;"	f
uart_hal_getchar9	hal\uart\fsl_uart_hal_transfer_functions.c	/^void  uart_hal_getchar9(uint32_t uartInstance, uint16_t *readData)$/;"	f
uart_hal_is_bit10_set_as_paritybit	hal\uart\fsl_uart_hal_transfer_functions.c	/^bool uart_hal_is_bit10_set_as_paritybit(uint32_t uartInstance)$/;"	f
uart_hal_is_current_dataword_received_with_noise	hal\uart\fsl_uart_hal_transfer_functions.c	/^bool uart_hal_is_current_dataword_received_with_noise(uint32_t uartInstance)$/;"	f
uart_hal_is_current_dataword_received_with_parityerror	hal\uart\fsl_uart_hal_transfer_functions.c	/^bool uart_hal_is_current_dataword_received_with_parityerror(uint32_t uartInstance)$/;"	f
uart_hal_putchar	hal\uart\fsl_uart_hal_transfer_functions.c	/^void uart_hal_putchar(uint32_t uartInstance, uint8_t data)$/;"	f
uart_hal_putchar10	hal\uart\fsl_uart_hal_transfer_functions.c	/^uart_status_t uart_hal_putchar10(uint32_t uartInstance, uint16_t data)$/;"	f
uart_hal_putchar9	hal\uart\fsl_uart_hal_transfer_functions.c	/^void uart_hal_putchar9(uint32_t uartInstance, uint16_t data)$/;"	f
__FSL_WDOG_FEATURES_H__	hal\wdog\fsl_wdog_features.h	31;"	d
s_wdogSTCTRLH	hal\wdog\fsl_wdog_hal.c	/^static volatile uint32_t s_wdogSTCTRLH = 0x1D3;$/;"	v	file:
wdog_hal_configure_enabled_in_cpu_debug_mode	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_enabled_in_cpu_debug_mode(bool isEnabled)$/;"	f
wdog_hal_configure_enabled_in_cpu_stop_mode	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_enabled_in_cpu_stop_mode(bool isEnabled)$/;"	f
wdog_hal_configure_enabled_in_cpu_wait_mode	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_enabled_in_cpu_wait_mode(bool isEnabled)$/;"	f
wdog_hal_configure_interrupt	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_interrupt(bool isEnabled)$/;"	f
wdog_hal_configure_register_update	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_register_update(bool isEnabled)$/;"	f
wdog_hal_configure_window_mode	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_configure_window_mode(bool isEnabled)$/;"	f
wdog_hal_disable	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_disable(void)$/;"	f
wdog_hal_enable	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_enable(void)$/;"	f
wdog_hal_set_clock_source	hal\wdog\fsl_wdog_hal.c	/^void wdog_hal_set_clock_source(wdog_clock_source_t clockSource)$/;"	f
__FSL_WDOG_HAL_H__	hal\wdog\fsl_wdog_hal.h	31;"	d
_wdog_clock_prescaler	hal\wdog\fsl_wdog_hal.h	/^typedef enum _wdog_clock_prescaler {$/;"	g
_wdog_clock_source	hal\wdog\fsl_wdog_hal.h	/^typedef enum _wdog_clock_source {$/;"	g
kWdogAlternateClock	hal\wdog\fsl_wdog_hal.h	/^    kWdogAlternateClock = 1 \/*!< Alternate clock source, Bus clock.*\/$/;"	e	enum:_wdog_clock_source
kWdogClockPrescaler1	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler1 = 0, \/*!< Divide 1, default*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler2	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler2 = 1, \/*!< Divide 2*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler3	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler3 = 2, \/*!< Divide 3*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler4	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler4 = 3, \/*!< Divide 4*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler5	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler5 = 4, \/*!< Divide 5*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler6	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler6 = 5, \/*!< Divide 6*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler7	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler7 = 6, \/*!< Divide 7*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogClockPrescaler8	hal\wdog\fsl_wdog_hal.h	/^    kWdogClockPrescaler8 = 7, \/*!< Divide 8*\/$/;"	e	enum:_wdog_clock_prescaler
kWdogDedicatedClock	hal\wdog\fsl_wdog_hal.h	/^    kWdogDedicatedClock = 0, \/*!< Dedicated clock source (LPO Oscillator),1K HZ.*\/$/;"	e	enum:_wdog_clock_source
wdog_clock_prescaler_t	hal\wdog\fsl_wdog_hal.h	/^} wdog_clock_prescaler_t;$/;"	t	typeref:enum:_wdog_clock_prescaler
wdog_clock_source_t	hal\wdog\fsl_wdog_hal.h	/^} wdog_clock_source_t;$/;"	t	typeref:enum:_wdog_clock_source
wdog_hal_clear_interrupt_flag	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_clear_interrupt_flag(void)$/;"	f
wdog_hal_clear_reset_count	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_clear_reset_count(void)$/;"	f
wdog_hal_get_clock_prescaler	hal\wdog\fsl_wdog_hal.h	/^static inline wdog_clock_prescaler_t wdog_hal_get_clock_prescaler(void)$/;"	f
wdog_hal_get_clock_source	hal\wdog\fsl_wdog_hal.h	/^static inline wdog_clock_source_t wdog_hal_get_clock_source(void)$/;"	f
wdog_hal_get_reset_count	hal\wdog\fsl_wdog_hal.h	/^static inline uint32_t wdog_hal_get_reset_count(void)$/;"	f
wdog_hal_get_timeout_value	hal\wdog\fsl_wdog_hal.h	/^static inline uint32_t wdog_hal_get_timeout_value(void)$/;"	f
wdog_hal_get_timer_output	hal\wdog\fsl_wdog_hal.h	/^static inline uint32_t wdog_hal_get_timer_output(void)$/;"	f
wdog_hal_get_window_value	hal\wdog\fsl_wdog_hal.h	/^static inline uint32_t wdog_hal_get_window_value(void)$/;"	f
wdog_hal_is_cpu_debug_mode_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_cpu_debug_mode_enabled(void)$/;"	f
wdog_hal_is_cpu_stop_mode_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_cpu_stop_mode_enabled(void)$/;"	f
wdog_hal_is_cpu_wait_mode_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_cpu_wait_mode_enabled(void)$/;"	f
wdog_hal_is_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_enabled(void)$/;"	f
wdog_hal_is_interrupt_asserted	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_interrupt_asserted(void)$/;"	f
wdog_hal_is_interrupt_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_interrupt_enabled(void)$/;"	f
wdog_hal_is_register_update_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_register_update_enabled(void)$/;"	f
wdog_hal_is_window_mode_enabled	hal\wdog\fsl_wdog_hal.h	/^static inline bool wdog_hal_is_window_mode_enabled(void)$/;"	f
wdog_hal_refresh	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_refresh(void)$/;"	f
wdog_hal_reset_chip	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_reset_chip(void)$/;"	f
wdog_hal_set_clock_prescaler	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_set_clock_prescaler(wdog_clock_prescaler_t clockPrescaler)$/;"	f
wdog_hal_set_timeout_value	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_set_timeout_value(uint32_t timeoutCount)$/;"	f
wdog_hal_set_window_value	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_set_window_value(uint32_t windowValue)$/;"	f
wdog_hal_unlock	hal\wdog\fsl_wdog_hal.h	/^static inline void wdog_hal_unlock(void)$/;"	f
wdog_isr_callback_t	hal\wdog\fsl_wdog_hal.h	/^typedef void (*wdog_isr_callback_t)(void);$/;"	t
_USB_OSADAPTER_H	usb\adapter\sources\adapter.h	34;"	d
OSA_INT_ISR_FPTR	usb\adapter\sources\adapter_types.h	/^typedef void (* OSA_INT_ISR_FPTR)(void *);$/;"	t
OS_EVENT_ERROR	usb\adapter\sources\adapter_types.h	49;"	d
OS_EVENT_OK	usb\adapter\sources\adapter_types.h	48;"	d
OS_EVENT_TIMEOUT	usb\adapter\sources\adapter_types.h	50;"	d
OS_Event_handle	usb\adapter\sources\adapter_types.h	/^typedef void* OS_Event_handle;$/;"	t
OS_GPIO_ERROR	usb\adapter\sources\adapter_types.h	54;"	d
OS_GPIO_OK	usb\adapter\sources\adapter_types.h	53;"	d
OS_GPIO_handle	usb\adapter\sources\adapter_types.h	/^typedef void* OS_GPIO_handle;$/;"	t
OS_MSGQ_ERROR	usb\adapter\sources\adapter_types.h	52;"	d
OS_MSGQ_OK	usb\adapter\sources\adapter_types.h	51;"	d
OS_MSGQ_RECEIVE_BLOCK_ON_EMPTY	usb\adapter\sources\adapter_types.h	62;"	d
OS_MUTEX_ERROR	usb\adapter\sources\adapter_types.h	56;"	d
OS_MUTEX_OK	usb\adapter\sources\adapter_types.h	55;"	d
OS_MsgQ_handle	usb\adapter\sources\adapter_types.h	/^typedef void* OS_MsgQ_handle;$/;"	t
OS_Mutex_handle	usb\adapter\sources\adapter_types.h	/^typedef void* OS_Mutex_handle;$/;"	t
OS_SEM_ERROR	usb\adapter\sources\adapter_types.h	58;"	d
OS_SEM_OK	usb\adapter\sources\adapter_types.h	57;"	d
OS_SEM_TIMEOUT	usb\adapter\sources\adapter_types.h	59;"	d
OS_Sem_handle	usb\adapter\sources\adapter_types.h	/^typedef void* OS_Sem_handle;$/;"	t
OS_TASK_ERROR	usb\adapter\sources\adapter_types.h	47;"	d
OS_TASK_OK	usb\adapter\sources\adapter_types.h	46;"	d
TASK_START	usb\adapter\sources\adapter_types.h	/^typedef void (* TASK_START)( void *);$/;"	t
_OSADAPTER_TYPES_H	usb\adapter\sources\adapter_types.h	34;"	d
OS_ADAPTER_ACTIVE_OS	usb\adapter\sources\sdk\adapter_cfg.h	41;"	d
OS_ADAPTER_BM	usb\adapter\sources\sdk\adapter_cfg.h	37;"	d
OS_ADAPTER_MQX	usb\adapter\sources\sdk\adapter_cfg.h	36;"	d
OS_ADAPTER_SDK	usb\adapter\sources\sdk\adapter_cfg.h	38;"	d
OS_ADAPTER_UCOSIII	usb\adapter\sources\sdk\adapter_cfg.h	39;"	d
_OSADAPTER_CFG_H	usb\adapter\sources\sdk\adapter_cfg.h	34;"	d
OS_Event_check_bit	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Event_check_bit(event_object_t* handle,uint32_t bitmask) $/;"	f
OS_Event_clear	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Event_clear(event_object_t* handle, uint32_t bitmask)   $/;"	f
OS_Event_create	usb\adapter\sources\sdk\adapter_sdk.c	/^OS_Event_handle OS_Event_create(uint32_t flag)$/;"	f
OS_Event_destroy	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Event_destroy(OS_Event_handle handle)$/;"	f
OS_Event_set	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Event_set(event_object_t* handle, uint32_t bitmask)    $/;"	f
OS_Event_wait	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Event_wait(event_object_t* handle,uint32_t bitmask,uint32_t flag,uint32_t timeout)         $/;"	f
OS_Gpio_deinit	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Gpio_deinit(OS_GPIO_handle handle)$/;"	f
OS_Gpio_init	usb\adapter\sources\sdk\adapter_sdk.c	/^OS_GPIO_handle OS_Gpio_init(uint32_t id, uint32_t dir, uint32_t value)$/;"	f
OS_Gpio_set_functionality	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Gpio_set_functionality(OS_GPIO_handle handle, uint32_t function)$/;"	f
OS_Gpio_set_value	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Gpio_set_value(OS_GPIO_handle handle, uint32_t value)$/;"	f
OS_MsgQ_Is_Empty	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_MsgQ_Is_Empty(msg_queue_handler_t msgq, void* msg)$/;"	f
OS_MsgQ_create	usb\adapter\sources\sdk\adapter_sdk.c	/^OS_MsgQ_handle OS_MsgQ_create(uint32_t max_msg_number, uint32_t msg_size)$/;"	f
OS_MsgQ_destroy	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_MsgQ_destroy(OS_MsgQ_handle msgq)$/;"	f
OS_MsgQ_recv	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_MsgQ_recv(msg_queue_handler_t msgq, void* msg, uint32_t flag, uint32_t timeout)      $/;"	f
OS_MsgQ_send	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_MsgQ_send(msg_queue_handler_t msgq, void* msg,uint32_t flag)        $/;"	f
OS_Mutex_create	usb\adapter\sources\sdk\adapter_sdk.c	/^OS_Mutex_handle OS_Mutex_create()$/;"	f
OS_Mutex_destroy	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Mutex_destroy(OS_Mutex_handle handle)$/;"	f
OS_Mutex_lock	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Mutex_lock(lock_object_t* handle)     $/;"	f
OS_Mutex_unlock	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Mutex_unlock(lock_object_t* handle)      $/;"	f
OS_Sem_create	usb\adapter\sources\sdk\adapter_sdk.c	/^OS_Sem_handle OS_Sem_create(int32_t initial_number)$/;"	f
OS_Sem_destroy	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Sem_destroy(OS_Sem_handle handle)$/;"	f
OS_Sem_post	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Sem_post(sync_object_t* handle)     $/;"	f
OS_Sem_wait	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Sem_wait(sync_object_t* handle, uint32_t timeout)      $/;"	f
OS_Task_create	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Task_create(TASK_START pstart, void* param, uint32_t pri, uint32_t stack_size, char* task_name, void* opt)$/;"	f
OS_Task_delete	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Task_delete(uint32_t task_id)$/;"	f
OS_Task_resume	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Task_resume(uint32_t task_id)  $/;"	f
OS_Task_suspend	usb\adapter\sources\sdk\adapter_sdk.c	/^uint32_t OS_Task_suspend(uint32_t task_id)$/;"	f
soc_get_usb_vector_number	usb\adapter\sources\sdk\adapter_sdk.c	/^uint8_t soc_get_usb_vector_number(uint8_t controller_id)$/;"	f
ENDIANNESS	usb\adapter\sources\sdk\adapter_sdk.h	52;"	d
FALSE	usb\adapter\sources\sdk\adapter_sdk.h	57;"	d
FALSE	usb\adapter\sources\sdk\adapter_sdk.h	59;"	d
NULL	usb\adapter\sources\sdk\adapter_sdk.h	68;"	d
NULL	usb\adapter\sources\sdk\adapter_sdk.h	70;"	d
NULL	usb\adapter\sources\sdk\adapter_sdk.h	73;"	d
NULL	usb\adapter\sources\sdk\adapter_sdk.h	75;"	d
OS_Lock	usb\adapter\sources\sdk\adapter_sdk.h	95;"	d
OS_MSGQ_TIMEOUT	usb\adapter\sources\sdk\adapter_sdk.h	81;"	d
OS_Mem_alloc	usb\adapter\sources\sdk\adapter_sdk.h	112;"	d
OS_Mem_alloc_uncached	usb\adapter\sources\sdk\adapter_sdk.h	104;"	d
OS_Mem_alloc_uncached_zero	usb\adapter\sources\sdk\adapter_sdk.h	108;"	d
OS_Mem_alloc_zero	usb\adapter\sources\sdk\adapter_sdk.h	111;"	d
OS_Mem_copy	usb\adapter\sources\sdk\adapter_sdk.h	116;"	d
OS_Mem_free	usb\adapter\sources\sdk\adapter_sdk.h	113;"	d
OS_Mem_zero	usb\adapter\sources\sdk\adapter_sdk.h	115;"	d
OS_Time_delay	usb\adapter\sources\sdk\adapter_sdk.h	122;"	d
OS_Unlock	usb\adapter\sources\sdk\adapter_sdk.h	96;"	d
OS_dcache_flush_mlines	usb\adapter\sources\sdk\adapter_sdk.h	100;"	d
OS_dcache_invalidate_mlines	usb\adapter\sources\sdk\adapter_sdk.h	99;"	d
OS_install_isr	usb\adapter\sources\sdk\adapter_sdk.h	87;"	d
OS_intr_init	usb\adapter\sources\sdk\adapter_sdk.h	88;"	d
PACKED_STRUCT_BEGIN	usb\adapter\sources\sdk\adapter_sdk.h	39;"	d
PACKED_STRUCT_BEGIN	usb\adapter\sources\sdk\adapter_sdk.h	45;"	d
PACKED_STRUCT_END	usb\adapter\sources\sdk\adapter_sdk.h	40;"	d
PACKED_STRUCT_END	usb\adapter\sources\sdk\adapter_sdk.h	46;"	d
PACKED_UNION_BEGIN	usb\adapter\sources\sdk\adapter_sdk.h	42;"	d
PACKED_UNION_BEGIN	usb\adapter\sources\sdk\adapter_sdk.h	48;"	d
PACKED_UNION_END	usb\adapter\sources\sdk\adapter_sdk.h	43;"	d
PACKED_UNION_END	usb\adapter\sources\sdk\adapter_sdk.h	49;"	d
TICKS_PER_SEC	usb\adapter\sources\sdk\adapter_sdk.h	91;"	d
TRUE	usb\adapter\sources\sdk\adapter_sdk.h	62;"	d
TRUE	usb\adapter\sources\sdk\adapter_sdk.h	64;"	d
UNUSED	usb\adapter\sources\sdk\adapter_sdk.h	78;"	d
_CODE_PTR_	usb\adapter\sources\sdk\adapter_sdk.h	54;"	d
_USB_OSADAPTER_SDK_H	usb\adapter\sources\sdk\adapter_sdk.h	34;"	d
USBCFG_4BYTE_ALIGN_FIX	usb\usb_core\device\include\usb_device_config.h	120;"	d
USBCFG_DEV_AUDIO	usb\usb_core\device\include\usb_device_config.h	64;"	d
USBCFG_DEV_CDC	usb\usb_core\device\include\usb_device_config.h	70;"	d
USBCFG_DEV_COMPOSITE	usb\usb_core\device\include\usb_device_config.h	90;"	d
USBCFG_DEV_EHCI	usb\usb_core\device\include\usb_device_config.h	46;"	d
USBCFG_DEV_HID	usb\usb_core\device\include\usb_device_config.h	52;"	d
USBCFG_DEV_KHCI	usb\usb_core\device\include\usb_device_config.h	40;"	d
USBCFG_DEV_MAX_CLASS_OBJECT	usb\usb_core\device\include\usb_device_config.h	114;"	d
USBCFG_DEV_MAX_ENDPOINTS	usb\usb_core\device\include\usb_device_config.h	108;"	d
USBCFG_DEV_MAX_XDS	usb\usb_core\device\include\usb_device_config.h	111;"	d
USBCFG_DEV_MSC	usb\usb_core\device\include\usb_device_config.h	84;"	d
USBCFG_DEV_NUM	usb\usb_core\device\include\usb_device_config.h	105;"	d
USBCFG_DEV_PHDC	usb\usb_core\device\include\usb_device_config.h	58;"	d
USBCFG_DEV_REMOTE_WAKEUP	usb\usb_core\device\include\usb_device_config.h	102;"	d
USBCFG_DEV_RNDIS_SUPPORT	usb\usb_core\device\include\usb_device_config.h	77;"	d
USBCFG_DEV_SELF_POWER	usb\usb_core\device\include\usb_device_config.h	96;"	d
USBCFG_KHCI_SWAP_BUF_MAX	usb\usb_core\device\include\usb_device_config.h	126;"	d
_DEBUG	usb\usb_core\device\include\usb_device_config.h	129;"	d
__usb_dev_config_h__	usb\usb_core\device\include\usb_device_config.h	34;"	d
CONTROL_MAX_PACKET_SIZE	usb\usb_core\device\include\usb_device_stack_interface.h	206;"	d
DESC_REQUEST_NOFIFY_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^ }DESC_REQUEST_NOFIFY_STRUCT, * DESC_REQUEST_NOFIFY_STRUCT_PTR;$/;"	t	typeref:struct:_usb_desc_request_notify_struct
DESC_REQUEST_NOFIFY_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^ }DESC_REQUEST_NOFIFY_STRUCT, * DESC_REQUEST_NOFIFY_STRUCT_PTR;$/;"	t	typeref:struct:_usb_desc_request_notify_struct
ENTITY_TYPE	usb\usb_core\device\include\usb_device_stack_interface.h	/^} ENTITY_TYPE;$/;"	t	typeref:enum:__anon12
PTR_USB_EVENT_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_EVENT_STRUCT, *PTR_USB_EVENT_STRUCT;$/;"	t	typeref:struct:_USB_EVENT_STRUCT
USB_APPLICATION_CALLBACK_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^}USB_APPLICATION_CALLBACK_STRUCT,* USB_APPLICATION_CALLBACK_STRUCT_PTR ;$/;"	t	typeref:struct:usb_application_callback_struct
USB_APPLICATION_CALLBACK_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^}USB_APPLICATION_CALLBACK_STRUCT,* USB_APPLICATION_CALLBACK_STRUCT_PTR ;$/;"	t	typeref:struct:usb_application_callback_struct
USB_AUDIO_UNITS	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_AUDIO_UNITS,            $/;"	e	enum:__anon12
USB_CLASS_ALL	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_ALL,$/;"	e	enum:__anon13
USB_CLASS_AUDIO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_AUDIO,          $/;"	e	enum:__anon13
USB_CLASS_CDC	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_CDC,    $/;"	e	enum:__anon13
USB_CLASS_HID	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_HID  = 0,$/;"	e	enum:__anon13
USB_CLASS_INFO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_INFO  = 0,$/;"	e	enum:__anon12
USB_CLASS_INVALID	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_INVALID$/;"	e	enum:__anon13
USB_CLASS_MSC	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_MSC,         $/;"	e	enum:__anon13
USB_CLASS_PHDC	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_CLASS_PHDC,$/;"	e	enum:__anon13
USB_CLASS_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_CLASS_STRUCT, * USB_CLASS_STRUCT_PTR;$/;"	t	typeref:struct:_USB_CLASS_STRUCT
USB_CLASS_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_CLASS_STRUCT, * USB_CLASS_STRUCT_PTR;$/;"	t	typeref:struct:_USB_CLASS_STRUCT
USB_COMPOSITE_INFO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_COMPOSITE_INFO,    $/;"	e	enum:__anon12
USB_COMPOSITE_INFO_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_COMPOSITE_INFO_STRUCT, * USB_COMPOSITE_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_USB_COMPOSITE_INFO_STRUCT
USB_COMPOSITE_INFO_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_COMPOSITE_INFO_STRUCT, * USB_COMPOSITE_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_USB_COMPOSITE_INFO_STRUCT
USB_CONTROL_ENDPOINT	usb\usb_core\device\include\usb_device_stack_interface.h	73;"	d
USB_DESC_CLASS	usb\usb_core\device\include\usb_device_stack_interface.h	108;"	d
USB_DESC_CONFIGURATION	usb\usb_core\device\include\usb_device_stack_interface.h	103;"	d
USB_DESC_INTERFACE	usb\usb_core\device\include\usb_device_stack_interface.h	95;"	d
USB_DEVICE_NOFIFY	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef void(_CODE_PTR_ USB_DEVICE_NOFIFY)(uint8_t event, void* val, void* arg);$/;"	t
USB_DEV_EVENT_BUS_RESET	usb\usb_core\device\include\usb_device_stack_interface.h	78;"	d
USB_DEV_EVENT_CONFIG_CHANGED	usb\usb_core\device\include\usb_device_stack_interface.h	79;"	d
USB_DEV_EVENT_DATA_RECEIVED	usb\usb_core\device\include\usb_device_stack_interface.h	83;"	d
USB_DEV_EVENT_ENUM_COMPLETE	usb\usb_core\device\include\usb_device_stack_interface.h	81;"	d
USB_DEV_EVENT_EP_STALLED	usb\usb_core\device\include\usb_device_stack_interface.h	86;"	d
USB_DEV_EVENT_EP_UNSTALLED	usb\usb_core\device\include\usb_device_stack_interface.h	87;"	d
USB_DEV_EVENT_ERROR	usb\usb_core\device\include\usb_device_stack_interface.h	84;"	d
USB_DEV_EVENT_GET_DATA_BUFF	usb\usb_core\device\include\usb_device_stack_interface.h	85;"	d
USB_DEV_EVENT_GET_TRANSFER_SIZE	usb\usb_core\device\include\usb_device_stack_interface.h	88;"	d
USB_DEV_EVENT_INTERFACE_CHANGED	usb\usb_core\device\include\usb_device_stack_interface.h	80;"	d
USB_DEV_EVENT_SEND_COMPLETE	usb\usb_core\device\include\usb_device_stack_interface.h	82;"	d
USB_DEV_EVENT_TYPE_CLR_EP_HALT	usb\usb_core\device\include\usb_device_stack_interface.h	92;"	d
USB_DEV_EVENT_TYPE_CLR_REMOTE_WAKEUP	usb\usb_core\device\include\usb_device_stack_interface.h	90;"	d
USB_DEV_EVENT_TYPE_SET_EP_HALT	usb\usb_core\device\include\usb_device_stack_interface.h	91;"	d
USB_DEV_EVENT_TYPE_SET_REMOTE_WAKEUP	usb\usb_core\device\include\usb_device_stack_interface.h	89;"	d
USB_ENDPOINTS	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_ENDPOINTS;$/;"	t	typeref:struct:_USB_ENDPOINTS
USB_EP_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_EP_STRUCT, * USB_EP_STRUCT_PTR;$/;"	t	typeref:struct:_USB_EP_STRUCT
USB_EP_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_EP_STRUCT, * USB_EP_STRUCT_PTR;$/;"	t	typeref:struct:_USB_EP_STRUCT
USB_EVENT_SERVICE	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef void(_CODE_PTR_ USB_EVENT_SERVICE)(PTR_USB_EVENT_STRUCT, void*);$/;"	t
USB_EVENT_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_EVENT_STRUCT, *PTR_USB_EVENT_STRUCT;$/;"	t	typeref:struct:_USB_EVENT_STRUCT
USB_IF_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_IF_STRUCT;$/;"	t	typeref:struct:_USB_IF_STRUCT
USB_INTERFACES_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_INTERFACES_STRUCT, * USB_INTERFACES_STRUCT_PTR;$/;"	t	typeref:struct:_USB_INTERFACES_STRUCT
USB_INTERFACES_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_INTERFACES_STRUCT, * USB_INTERFACES_STRUCT_PTR;$/;"	t	typeref:struct:_USB_INTERFACES_STRUCT
USB_MSC_LBA_INFO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_MSC_LBA_INFO,$/;"	e	enum:__anon12
USB_PHDC_QOS_INFO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_PHDC_QOS_INFO,$/;"	e	enum:__anon12
USB_REQUEST_NOTIFY	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef uint8_t (_CODE_PTR_ USB_REQUEST_NOTIFY)(USB_SETUP_STRUCT *,$/;"	t
USB_RNDIS_INFO	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_RNDIS_INFO,$/;"	e	enum:__anon12
USB_SERVICE_BUS_RESET	usb\usb_core\device\include\usb_device_stack_interface.h	63;"	d
USB_SERVICE_EP0	usb\usb_core\device\include\usb_device_stack_interface.h	59;"	d
USB_SERVICE_EP1	usb\usb_core\device\include\usb_device_stack_interface.h	60;"	d
USB_SERVICE_EP2	usb\usb_core\device\include\usb_device_stack_interface.h	61;"	d
USB_SERVICE_EP3	usb\usb_core\device\include\usb_device_stack_interface.h	62;"	d
USB_SERVICE_ERROR	usb\usb_core\device\include\usb_device_stack_interface.h	69;"	d
USB_SERVICE_REQUEST	usb\usb_core\device\include\usb_device_stack_interface.h	71;"	d
USB_SERVICE_RESUME	usb\usb_core\device\include\usb_device_stack_interface.h	66;"	d
USB_SERVICE_SLEEP	usb\usb_core\device\include\usb_device_stack_interface.h	67;"	d
USB_SERVICE_SPEED_DETECTION	usb\usb_core\device\include\usb_device_stack_interface.h	68;"	d
USB_SERVICE_SUSPEND	usb\usb_core\device\include\usb_device_stack_interface.h	64;"	d
USB_SETUP_PKT_SIZE	usb\usb_core\device\include\usb_device_stack_interface.h	74;"	d
USB_SETUP_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_SETUP_STRUCT, * USB_SETUP_STRUCT_PTR;$/;"	t	typeref:struct:_USB_SETUP_STRUCT
USB_SETUP_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^} USB_SETUP_STRUCT, * USB_SETUP_STRUCT_PTR;$/;"	t	typeref:struct:_USB_SETUP_STRUCT
USB_STATUS_ADDRESS	usb\usb_core\device\include\usb_device_stack_interface.h	47;"	d
USB_STATUS_CURRENT_CONFIG	usb\usb_core\device\include\usb_device_stack_interface.h	48;"	d
USB_STATUS_DEVICE	usb\usb_core\device\include\usb_device_stack_interface.h	50;"	d
USB_STATUS_DEVICE_STATE	usb\usb_core\device\include\usb_device_stack_interface.h	45;"	d
USB_STATUS_ENDPOINT	usb\usb_core\device\include\usb_device_stack_interface.h	52;"	d
USB_STATUS_ENDPOINT_NUMBER_MASK	usb\usb_core\device\include\usb_device_stack_interface.h	53;"	d
USB_STATUS_INTERFACE	usb\usb_core\device\include\usb_device_stack_interface.h	46;"	d
USB_STATUS_SOF_COUNT	usb\usb_core\device\include\usb_device_stack_interface.h	49;"	d
USB_STATUS_TEST_MODE	usb\usb_core\device\include\usb_device_stack_interface.h	51;"	d
USB_TEST_MODE_TEST_PACKET	usb\usb_core\device\include\usb_device_stack_interface.h	55;"	d
USB_UNINITIALIZED_VAL_32	usb\usb_core\device\include\usb_device_stack_interface.h	75;"	d
USB_VENDOR_REQ_CALLBACK_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^}USB_VENDOR_REQ_CALLBACK_STRUCT,* USB_VENDOR_REQ_CALLBACK_STRUCT_PTR ;$/;"	t	typeref:struct:usb_vendor_req_callback_struct
USB_VENDOR_REQ_CALLBACK_STRUCT_PTR	usb\usb_core\device\include\usb_device_stack_interface.h	/^}USB_VENDOR_REQ_CALLBACK_STRUCT,* USB_VENDOR_REQ_CALLBACK_STRUCT_PTR ;$/;"	t	typeref:struct:usb_vendor_req_callback_struct
_USB_CLASS_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_CLASS_STRUCT$/;"	s
_USB_COMPOSITE_INFO_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_COMPOSITE_INFO_STRUCT$/;"	s
_USB_ENDPOINTS	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_ENDPOINTS$/;"	s
_USB_EP_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_EP_STRUCT$/;"	s
_USB_EVENT_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_EVENT_STRUCT$/;"	s
_USB_IF_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_IF_STRUCT$/;"	s
_USB_INTERFACES_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_INTERFACES_STRUCT$/;"	s
_USB_SETUP_STRUCT	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _USB_SETUP_STRUCT$/;"	s
__usb_device_stack_interface_h__	usb\usb_core\device\include\usb_device_stack_interface.h	36;"	d
_usb_desc_request_notify_struct	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct _usb_desc_request_notify_struct$/;"	s
arg	usb\usb_core\device\include\usb_device_stack_interface.h	/^    void*                 arg;$/;"	m	struct:usb_application_callback_struct
arg	usb\usb_core\device\include\usb_device_stack_interface.h	/^    void*                 arg;$/;"	m	struct:usb_vendor_req_callback_struct
buffer_ptr	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t*              buffer_ptr;         \/* void* to buffer       *\/$/;"	m	struct:_USB_EVENT_STRUCT
callback	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_DEVICE_NOFIFY     callback;$/;"	m	struct:usb_application_callback_struct
callback	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_REQUEST_NOTIFY    callback;$/;"	m	struct:usb_vendor_req_callback_struct
class_type	usb\usb_core\device\include\usb_device_stack_interface.h	/^} class_type;$/;"	t	typeref:enum:__anon13
count	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               count;$/;"	m	struct:_USB_COMPOSITE_INFO_STRUCT
count	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               count;$/;"	m	struct:_USB_ENDPOINTS
count	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               count;$/;"	m	struct:_USB_INTERFACES_STRUCT
direction	usb\usb_core\device\include\usb_device_stack_interface.h	/^    bool                  direction;          \/* direction of endpoint   *\/$/;"	m	struct:_USB_EVENT_STRUCT
direction	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               direction;   \/* direction of endpoint   *\/$/;"	m	struct:_USB_EP_STRUCT
endpoints	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_ENDPOINTS         endpoints;$/;"	m	struct:_USB_IF_STRUCT
ep	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_EP_STRUCT*        ep; $/;"	m	struct:_USB_ENDPOINTS
ep_num	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               ep_num;             \/* endpoint number *\/$/;"	m	struct:_USB_EVENT_STRUCT
ep_num	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               ep_num;      \/* endpoint number         *\/$/;"	m	struct:_USB_EP_STRUCT
for_each_ep_in_class	usb\usb_core\device\include\usb_device_stack_interface.h	115;"	d
for_each_if_in_class	usb\usb_core\device\include\usb_device_stack_interface.h	125;"	d
handle	usb\usb_core\device\include\usb_device_stack_interface.h	/^    _usb_device_handle    handle;             \/* conttroler device handle*\/$/;"	m	struct:_USB_EVENT_STRUCT
index	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint16_t              index;$/;"	m	struct:_USB_SETUP_STRUCT
index	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               index;$/;"	m	struct:_USB_IF_STRUCT
interface	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_IF_STRUCT*        interface;$/;"	m	struct:_USB_INTERFACES_STRUCT
interfaces	usb\usb_core\device\include\usb_device_stack_interface.h	/^    USB_INTERFACES_STRUCT interfaces;$/;"	m	struct:_USB_CLASS_STRUCT
len	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint32_t              len;                \/* the buffer len had been done *\/$/;"	m	struct:_USB_EVENT_STRUCT
length	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint16_t              length;$/;"	m	struct:_USB_SETUP_STRUCT
request	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               request;$/;"	m	struct:_USB_SETUP_STRUCT
request_type	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               request_type;$/;"	m	struct:_USB_SETUP_STRUCT
setup	usb\usb_core\device\include\usb_device_stack_interface.h	/^    bool                  setup;              \/* is setup packet         *\/$/;"	m	struct:_USB_EVENT_STRUCT
size	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint32_t              size;        \/* buffer size of endpoint *\/$/;"	m	struct:_USB_EP_STRUCT
type	usb\usb_core\device\include\usb_device_stack_interface.h	/^    class_type            type;$/;"	m	struct:_USB_CLASS_STRUCT
type	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint8_t               type;        \/* type of endpoint        *\/$/;"	m	struct:_USB_EP_STRUCT
usb_application_callback_struct	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct usb_application_callback_struct$/;"	s
usb_vendor_req_callback_struct	usb\usb_core\device\include\usb_device_stack_interface.h	/^typedef struct usb_vendor_req_callback_struct$/;"	s
value	usb\usb_core\device\include\usb_device_stack_interface.h	/^    uint16_t              value;$/;"	m	struct:_USB_SETUP_STRUCT
BSPCFG_USB_USE_IRC48M	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	44;"	d	file:
BSP_USB_INT_LEVEL	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	41;"	d	file:
SIM_SOPT2_IRC48MSEL_MASK	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	32;"	d	file:
SIM_SOPT2_IRC48MSEL_MASK	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	43;"	d	file:
USB_CLK_RECOVER_IRC_EN	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	42;"	d	file:
bsp_usb_dev_init	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	/^int32_t bsp_usb_dev_init(uint8_t controller_id)$/;"	f
bsp_usb_dev_io_init	usb\usb_core\device\sources\bsp\twrk22f120m\usb_dev_bsp.c	/^static int32_t bsp_usb_dev_io_init$/;"	f	file:
BSPCFG_USB_USE_IRC48M	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	45;"	d	file:
BSP_USB_INT_LEVEL	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	43;"	d	file:
SIM_SOPT2_IRC48MSEL_MASK	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	32;"	d	file:
USB_CLK_RECOVER_IRC_EN	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	44;"	d	file:
bsp_usb_dev_init	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	/^int32_t bsp_usb_dev_init(uint8_t controller_id)$/;"	f
bsp_usb_dev_io_init	usb\usb_core\device\sources\bsp\twrk64f120m\usb_dev_bsp.c	/^static int32_t bsp_usb_dev_io_init$/;"	f	file:
USB_Audio_Get_Control_Terminal	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Audio_Get_Control_Terminal$/;"	f
USB_Audio_Get_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Audio_Get_Feature_Unit$/;"	f
USB_Audio_Requests	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^uint8_t USB_Audio_Requests$/;"	f
USB_Audio_Set_Control_Terminal	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Audio_Set_Control_Terminal$/;"	f
USB_Audio_Set_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Audio_Set_Feature_Unit$/;"	f
USB_Class_Audio_Cancel	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^USB_STATUS USB_Class_Audio_Cancel$/;"	f
USB_Class_Audio_Deinit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^USB_STATUS USB_Class_Audio_Deinit$/;"	f
USB_Class_Audio_Event	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^void USB_Class_Audio_Event(uint8_t event, void* val,void* arg) $/;"	f
USB_Class_Audio_Init	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^USB_STATUS USB_Class_Audio_Init$/;"	f
USB_Class_Audio_Recv_Data	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^uint8_t USB_Class_Audio_Recv_Data$/;"	f
USB_Class_Audio_Send_Data	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^uint8_t USB_Class_Audio_Send_Data($/;"	f
USB_Get_Cur_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Cur_Audio_Feature_Unit$/;"	f
USB_Get_Max_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Max_Audio_Feature_Unit$/;"	f
USB_Get_Min_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Min_Audio_Feature_Unit$/;"	f
USB_Get_Request_Endpoint	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Request_Endpoint$/;"	f
USB_Get_Request_Interface	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Request_Interface$/;"	f
USB_Get_Res_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Get_Res_Audio_Feature_Unit$/;"	f
USB_Service_Audio_Isochronous_IN	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ void USB_Service_Audio_Isochronous_IN(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
USB_Service_Audio_Isochronous_OUT	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ void USB_Service_Audio_Isochronous_OUT(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
USB_Service_Audio_Status_Interrupt	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ void USB_Service_Audio_Status_Interrupt(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
USB_Set_Cur_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Cur_Audio_Feature_Unit$/;"	f
USB_Set_Max_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Max_Audio_Feature_Unit$/;"	f
USB_Set_Min_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Min_Audio_Feature_Unit$/;"	f
USB_Set_Request_Endpoint	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Request_Endpoint$/;"	f
USB_Set_Request_Interface	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Request_Interface$/;"	f
USB_Set_Res_Audio_Feature_Unit	usb\usb_core\device\sources\classes\audio\usb_audio.c	/^ uint8_t USB_Set_Res_Audio_Feature_Unit$/;"	f
AUDIO_CONTROL_FEATURE_UNIT	usb\usb_core\device\sources\classes\audio\usb_audio.h	62;"	d
AUDIO_CONTROL_INPUT_TERMINAL	usb\usb_core\device\sources\classes\audio\usb_audio.h	60;"	d
AUDIO_CONTROL_OUTPUT_TERMINAL	usb\usb_core\device\sources\classes\audio\usb_audio.h	61;"	d
AUDIO_DEVICE_STRUCT	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}AUDIO_DEVICE_STRUCT, * AUDIO_DEVICE_STRUCT_PTR; $/;"	t	typeref:struct:audio_device_struct
AUDIO_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}AUDIO_DEVICE_STRUCT, * AUDIO_DEVICE_STRUCT_PTR; $/;"	t	typeref:struct:audio_device_struct
AUDIO_MAX_QUEUE_ELEMS	usb\usb_core\device\sources\classes\audio\usb_audio.h	51;"	d
AUTOMATIC_GAIN_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	93;"	d
BASS_BOOST_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	95;"	d
BASS_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	89;"	d
COPY_PROTECT_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	82;"	d
DELAY_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	94;"	d
EP_CONTROL_DEFINED	usb\usb_core\device\sources\classes\audio\usb_audio.h	99;"	d
FU_CONTROL_UNDEFINED	usb\usb_core\device\sources\classes\audio\usb_audio.h	85;"	d
GET_CUR	usb\usb_core\device\sources\classes\audio\usb_audio.h	72;"	d
GET_MAX	usb\usb_core\device\sources\classes\audio\usb_audio.h	74;"	d
GET_MIN	usb\usb_core\device\sources\classes\audio\usb_audio.h	73;"	d
GET_REQUEST_EP	usb\usb_core\device\sources\classes\audio\usb_audio.h	56;"	d
GET_REQUEST_ITF	usb\usb_core\device\sources\classes\audio\usb_audio.h	57;"	d
GET_RES	usb\usb_core\device\sources\classes\audio\usb_audio.h	75;"	d
GET_STAT	usb\usb_core\device\sources\classes\audio\usb_audio.h	77;"	d
GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	92;"	d
LOUDNESS_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	96;"	d
MAX_AUDIO_DEVICE	usb\usb_core\device\sources\classes\audio\usb_audio.h	103;"	d
MID_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	90;"	d
MUTE_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	87;"	d
PITCH_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	101;"	d
PTR_USB_CLASS_AUDIO_ENDPOINT_DATA	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}USB_CLASS_AUDIO_ENDPOINT_DATA, *PTR_USB_CLASS_AUDIO_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_audio_endpoint_data
PTR_USB_CLASS_AUDIO_QUEUE	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}USB_CLASS_AUDIO_QUEUE, *PTR_USB_CLASS_AUDIO_QUEUE;$/;"	t	typeref:struct:_usb_class_audio_queue
REQUEST_CODE_UNDEFINED	usb\usb_core\device\sources\classes\audio\usb_audio.h	65;"	d
SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	100;"	d
SET_CUR	usb\usb_core\device\sources\classes\audio\usb_audio.h	66;"	d
SET_MAX	usb\usb_core\device\sources\classes\audio\usb_audio.h	68;"	d
SET_MIN	usb\usb_core\device\sources\classes\audio\usb_audio.h	67;"	d
SET_REQUEST_EP	usb\usb_core\device\sources\classes\audio\usb_audio.h	55;"	d
SET_REQUEST_ITF	usb\usb_core\device\sources\classes\audio\usb_audio.h	54;"	d
SET_RES	usb\usb_core\device\sources\classes\audio\usb_audio.h	69;"	d
TE_CONTROL_UNDEFINED	usb\usb_core\device\sources\classes\audio\usb_audio.h	81;"	d
TREBLE_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	91;"	d
USB_CLASS_AUDIO_ENDPOINT	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}USB_CLASS_AUDIO_ENDPOINT;$/;"	t	typeref:struct:_usb_class_audio_endpoint
USB_CLASS_AUDIO_ENDPOINT_DATA	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}USB_CLASS_AUDIO_ENDPOINT_DATA, *PTR_USB_CLASS_AUDIO_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_audio_endpoint_data
USB_CLASS_AUDIO_QUEUE	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^}USB_CLASS_AUDIO_QUEUE, *PTR_USB_CLASS_AUDIO_QUEUE;$/;"	t	typeref:struct:_usb_class_audio_queue
VOLUME_CONTROL	usb\usb_core\device\sources\classes\audio\usb_audio.h	88;"	d
_USB_AUDIO_H	usb\usb_core\device\sources\classes\audio\usb_audio.h	36;"	d
_usb_class_audio_endpoint	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^typedef struct _usb_class_audio_endpoint $/;"	s
_usb_class_audio_endpoint_data	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^typedef struct _usb_class_audio_endpoint_data $/;"	s
_usb_class_audio_queue	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^typedef struct _usb_class_audio_queue $/;"	s
app_data	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^	AUDIO_APP_DATA_STRUCT     app_data;$/;"	m	struct:_usb_class_audio_queue
audio_application_callback	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_APPLICATION_CALLBACK_STRUCT            audio_application_callback;$/;"	m	struct:audio_device_struct
audio_device_struct	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^typedef struct audio_device_struct$/;"	s
audio_handle	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    AUDIO_HANDLE                               audio_handle;$/;"	m	struct:audio_device_struct
bin_consumer	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   bin_consumer;\/* the num of queued elements *\/$/;"	m	struct:_usb_class_audio_endpoint
bin_producer	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   bin_producer;\/* the num of de-queued elements *\/$/;"	m	struct:_usb_class_audio_endpoint
channel	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   channel;       $/;"	m	struct:_usb_class_audio_queue
class_handle	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_HANDLE                           class_handle;$/;"	m	struct:audio_device_struct
class_specific_callback	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:audio_device_struct
count	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   count;  \/* num of non control endpoints *\/     $/;"	m	struct:_usb_class_audio_endpoint_data
current_interface	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                                    current_interface;$/;"	m	struct:audio_device_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;$/;"	m	struct:audio_device_struct
endpoint	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   endpoint; \/* endpoint num *\/                    $/;"	m	struct:_usb_class_audio_endpoint
ep	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_AUDIO_ENDPOINT*                  ep;$/;"	m	struct:audio_device_struct
ep	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_AUDIO_ENDPOINT* ep;       $/;"	m	struct:_usb_class_audio_endpoint_data
handle	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    _usb_device_handle                         handle;$/;"	m	struct:audio_device_struct
handle	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    _usb_device_handle        handle;$/;"	m	struct:_usb_class_audio_queue
queue	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_AUDIO_QUEUE     queue[AUDIO_MAX_QUEUE_ELEMS]; \/* queue data *\/  $/;"	m	struct:_usb_class_audio_endpoint
queue_num	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   queue_num;	\/* the num of queue *\/$/;"	m	struct:_usb_class_audio_endpoint
type	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint8_t                   type;     \/* type of endpoint (interrupt, bulk or isochronous) *\/   $/;"	m	struct:_usb_class_audio_endpoint
usb_ep_data	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_ENDPOINTS*                             usb_ep_data;$/;"	m	struct:audio_device_struct
usb_ut_data	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_CLASS_AUDIO_UNITS*                     usb_ut_data;$/;"	m	struct:audio_device_struct
user_handle	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    uint32_t                                   user_handle;$/;"	m	struct:audio_device_struct
vendor_req_callback	usb\usb_core\device\sources\classes\audio\usb_audio.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT		       vendor_req_callback;$/;"	m	struct:audio_device_struct
USB_CDC_Other_Requests	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint8_t USB_CDC_Other_Requests$/;"	f
USB_Cdc_Allocate_Handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^static CDC_HANDLE  USB_Cdc_Allocate_Handle(void)$/;"	f	file:
USB_Cdc_Free_Handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^static int32_t USB_Cdc_Free_Handle(CDC_HANDLE handle)$/;"	f	file:
USB_Cdc_Get_Desc_Info	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^ static uint8_t USB_Cdc_Get_Desc_Info(CDC_DEVICE_STRUCT_PTR cdc_obj_ptr,USB_DESC_INFO_T type, uint32_t * object)$/;"	f	file:
USB_Cdc_Get_Device_Ptr	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^static CDC_DEVICE_STRUCT_PTR USB_Cdc_Get_Device_Ptr(CDC_HANDLE handle)$/;"	f	file:
USB_Class_CDC_Deinit	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint32_t USB_Class_CDC_Deinit$/;"	f
USB_Class_CDC_Event	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^ void USB_Class_CDC_Event(uint8_t event, void* val,void* arg) $/;"	f
USB_Class_CDC_Init	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint32_t USB_Class_CDC_Init$/;"	f
USB_Class_CDC_Recv_Data	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint8_t USB_Class_CDC_Recv_Data$/;"	f
USB_Class_CDC_Send_Data	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint8_t USB_Class_CDC_Send_Data$/;"	f
USB_Map_Ep_To_Struct_Index	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^uint8_t USB_Map_Ep_To_Struct_Index(CDC_DEVICE_STRUCT_PTR cdc_obj_ptr,uint8_t ep_num) $/;"	f
USB_Service_Cdc_Notif	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^void USB_Service_Cdc_Notif(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
USB_Service_Dic_Bulk_In	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^void USB_Service_Dic_Bulk_In(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
USB_Service_Dic_Bulk_Out	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^void USB_Service_Dic_Bulk_Out(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
cdc_device_array	usb\usb_core\device\sources\classes\cdc\usb_cdc.c	/^CDC_DEVICE_STRUCT_PTR   cdc_device_array[MAX_CDC_DEVICE];$/;"	v
CDC_DEVICE_STRUCT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^ }CDC_DEVICE_STRUCT, * CDC_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_variable_struct
CDC_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^ }CDC_DEVICE_STRUCT, * CDC_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_variable_struct
CDC_IMPLEMENT_QUEUING	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	46;"	d
CDC_MAX_QUEUE_ELEMS	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	59;"	d
MAX_CDC_DEVICE	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	61;"	d
MDLM_SPECIFIC_NOTIF_MASK	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	51;"	d
NOTIF_PACKET_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	54;"	d
NOTIF_REQUEST_TYPE	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	55;"	d
PSTN_SUBCLASS_NOTIF_SUPPORT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	56;"	d
PTR_USB_CLASS_CDC_QUEUE	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^}USB_CLASS_CDC_QUEUE, *PTR_USB_CLASS_CDC_QUEUE;$/;"	t	typeref:struct:_usb_class_cdc_queue
USB_CDC_EP_COUNT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^   USB_CDC_EP_COUNT,$/;"	e	enum:__anon14
USB_CDC_INTERFACE_COUNT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^   USB_CDC_INTERFACE_COUNT$/;"	e	enum:__anon14
USB_CLASS_CDC_ENDPOINT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^}USB_CLASS_CDC_ENDPOINT;$/;"	t	typeref:struct:_usb_class_cdc_endpoint
USB_CLASS_CDC_QUEUE	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^}USB_CLASS_CDC_QUEUE, *PTR_USB_CLASS_CDC_QUEUE;$/;"	t	typeref:struct:_usb_class_cdc_queue
USB_DESC_INFO_T	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^}USB_DESC_INFO_T;$/;"	t	typeref:enum:__anon14
USB_EP_COUNT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^   USB_EP_COUNT = 0,$/;"	e	enum:__anon14
USB_INTERFACE_COUNT	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^   USB_INTERFACE_COUNT,$/;"	e	enum:__anon14
_USB_CDC_H	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	36;"	d
_cdc_variable_struct	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^typedef struct _cdc_variable_struct$/;"	s
_usb_class_cdc_endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^typedef struct _usb_class_cdc_endpoint $/;"	s
_usb_class_cdc_queue	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^typedef struct _usb_class_cdc_queue $/;"	s
app_data	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    CDC_APP_DATA_STRUCT                        app_data;  $/;"	m	struct:_usb_class_cdc_queue
bin_consumer	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    bin_consumer;\/* the num of queued elements *\/$/;"	m	struct:_usb_class_cdc_endpoint
bin_producer	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    bin_producer;\/* the num of de-queued elements *\/$/;"	m	struct:_usb_class_cdc_endpoint
cdc_application_callback	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_APPLICATION_CALLBACK_STRUCT            cdc_application_callback;$/;"	m	struct:_cdc_variable_struct
cdc_handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    CDC_HANDLE                                 cdc_handle;$/;"	m	struct:_cdc_variable_struct
channel	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    channel;       $/;"	m	struct:_usb_class_cdc_queue
cic_recv_endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    cic_recv_endpoint;$/;"	m	struct:_cdc_variable_struct
cic_send_endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    cic_send_endpoint;$/;"	m	struct:_cdc_variable_struct
cic_send_pkt_size	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint32_t                                   cic_send_pkt_size;    $/;"	m	struct:_cdc_variable_struct
class_handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_CLASS_HANDLE                           class_handle;$/;"	m	struct:_cdc_variable_struct
class_specific_callback	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^	USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:_cdc_variable_struct
comm_feature_data_size	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint32_t                                   comm_feature_data_size;$/;"	m	struct:_cdc_variable_struct
controller_handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    _usb_device_handle                         controller_handle;$/;"	m	struct:_cdc_variable_struct
desc_callback	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    DESC_REQUEST_NOFIFY_STRUCT                 desc_callback;$/;"	m	struct:_cdc_variable_struct
dic_recv_endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    dic_recv_endpoint;$/;"	m	struct:_cdc_variable_struct
dic_recv_pkt_size	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint32_t                                   dic_recv_pkt_size;$/;"	m	struct:_cdc_variable_struct
dic_send_endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    dic_send_endpoint;$/;"	m	struct:_cdc_variable_struct
dic_send_pkt_size	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint32_t                                   dic_send_pkt_size;$/;"	m	struct:_cdc_variable_struct
endpoint	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    endpoint; \/* endpoint num *\/                    $/;"	m	struct:_usb_class_cdc_endpoint
ep	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_CLASS_CDC_ENDPOINT*                    ep;$/;"	m	struct:_cdc_variable_struct
handle	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    _usb_device_handle                         handle;$/;"	m	struct:_usb_class_cdc_queue
max_supported_interfaces	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    max_supported_interfaces;$/;"	m	struct:_cdc_variable_struct
pstn_obj_ptr	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    void*                                      pstn_obj_ptr;$/;"	m	struct:_cdc_variable_struct
queue	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_CLASS_CDC_QUEUE                        queue[CDC_MAX_QUEUE_ELEMS]; \/* queue data *\/  $/;"	m	struct:_usb_class_cdc_endpoint
rndis_info	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^	USB_RNDIS_INFO_STRUCT                      rndis_info;$/;"	m	struct:_cdc_variable_struct
type	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    uint8_t                                    type;     \/* type of endpoint (interrupt, bulk or isochronous) *\/   $/;"	m	struct:_usb_class_cdc_endpoint
usb_ep_data	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_ENDPOINTS*                             usb_ep_data;$/;"	m	struct:_cdc_variable_struct
vendor_req_callback	usb\usb_core\device\sources\classes\cdc\usb_cdc.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;$/;"	m	struct:_cdc_variable_struct
MAX_EXPECTED_COMMAND_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	50;"	d	file:
MAX_EXPECTED_RESPONSE_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	55;"	d	file:
PSTN_Get_Comm_Feature	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Get_Comm_Feature$/;"	f
PSTN_Get_Line_Coding	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Get_Line_Coding$/;"	f
PSTN_Response_Available	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void PSTN_Response_Available(CDC_DEVICE_STRUCT_PTR cdc_obj_ptr) $/;"	f
PSTN_Rndis_Message_Get	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Rndis_Message_Get$/;"	f
PSTN_Rndis_Message_Set	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Rndis_Message_Set$/;"	f
PSTN_Send_Break	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Send_Break$/;"	f
PSTN_Send_Serial_State	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void PSTN_Send_Serial_State(CDC_DEVICE_STRUCT_PTR cdc_obj_ptr) $/;"	f
PSTN_Set_Comm_Feature	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Set_Comm_Feature$/;"	f
PSTN_Set_Ctrl_Line_State	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Set_Ctrl_Line_State$/;"	f
PSTN_Set_Line_Coding	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t PSTN_Set_Line_Coding$/;"	f
RNDIS_Halt_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Halt_Command(CDC_DEVICE_STRUCT_PTR cdc_obj_ptr)$/;"	f
RNDIS_Indicate_Status_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Indicate_Status_Command $/;"	f
RNDIS_Initialize_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Initialize_Command$/;"	f
RNDIS_Keepalive_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Keepalive_Command$/;"	f
RNDIS_Query_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Query_Command$/;"	f
RNDIS_Reset_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Reset_Command$/;"	f
RNDIS_Set_Command	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^void RNDIS_Set_Command$/;"	f
USB_Pstn_Deinit	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t USB_Pstn_Deinit$/;"	f
USB_Pstn_Init	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t USB_Pstn_Init$/;"	f
VENDOR_INFO_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	122;"	d	file:
g_list_supp_oid	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^    static uint32_t g_list_supp_oid[NUM_OIDS_SUPPORTED] = $/;"	v	file:
g_response_available_data	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t g_response_available_data[NOTIF_PACKET_SIZE] =$/;"	v
g_serial_state_buf	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^uint8_t g_serial_state_buf[NOTIF_PACKET_SIZE+UART_BITMAP_SIZE] = $/;"	v
g_vendor_info	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.c	/^    static uint8_t g_vendor_info[VENDOR_INFO_SIZE] = " FSL RNDIS PORT ";$/;"	v	file:
ABSTRACT_STATE_FEATURE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	58;"	d
AF_LIST_OFFSET	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	150;"	d
AF_LIST_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	151;"	d
CARRIER_ACTIVATION_CHECK	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	60;"	d
CDC_PSTN_STRUCT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^ }CDC_PSTN_STRUCT, * CDC_PSTN_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_pstn_struct
CDC_PSTN_STRUCT_PTR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^ }CDC_PSTN_STRUCT, * CDC_PSTN_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_pstn_struct
COMM_FEATURE_DATA_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	349;"	d
COUNTRY_SETTING_FEATURE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	59;"	d
DTE_PRESENCE_CHECK	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	61;"	d
NDIS_802_3_MAC_OPTION_PRIORITY	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	321;"	d
NDIS_PACKET_TYPE_ALL_FUNCTIONAL	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	261;"	d
NDIS_PACKET_TYPE_ALL_LOCAL	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	253;"	d
NDIS_PACKET_TYPE_ALL_MULTICAST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	241;"	d
NDIS_PACKET_TYPE_BROADCAST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	243;"	d
NDIS_PACKET_TYPE_DIRECTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	231;"	d
NDIS_PACKET_TYPE_FUNCTIONAL	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	258;"	d
NDIS_PACKET_TYPE_GROUP	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	263;"	d
NDIS_PACKET_TYPE_MAC_FRAME	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	255;"	d
NDIS_PACKET_TYPE_MULTICAST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	238;"	d
NDIS_PACKET_TYPE_PROMISCUOUS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	248;"	d
NDIS_PACKET_TYPE_SMT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	250;"	d
NDIS_PACKET_TYPE_SOURCE_ROUTING	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	246;"	d
NIC_IDENTIFIER_VENDOR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	147;"	d
NUM_OIDS_SUPPORTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	145;"	d
NdisHardwareStatusClosing	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	174;"	d
NdisHardwareStatusInitializing	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	170;"	d
NdisHardwareStatusNotReady	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	176;"	d
NdisHardwareStatusReady	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	168;"	d
NdisHardwareStatusReset	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	172;"	d
NdisMediaStateConnected	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	336;"	d
NdisMediaStateDisconnected	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	337;"	d
NdisMediaStateUnknown	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	338;"	d
NdisMedium1394	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	215;"	d
NdisMedium802_3	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	185;"	d
NdisMedium802_5	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	187;"	d
NdisMediumArcnet878_2	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	199;"	d
NdisMediumArcnetRaw	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	197;"	d
NdisMediumAtm	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	201;"	d
NdisMediumBpc	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	217;"	d
NdisMediumCoWan	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	213;"	d
NdisMediumDix	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	195;"	d
NdisMediumFddi	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	189;"	d
NdisMediumInfiniBand	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	219;"	d
NdisMediumIrda	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	211;"	d
NdisMediumLocalTalk	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	193;"	d
NdisMediumLoopback	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	223;"	d
NdisMediumNative802_11	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	206;"	d
NdisMediumTunnel	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	221;"	d
NdisMediumWan	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	191;"	d
NdisMediumWirelessWan	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	209;"	d
OID_802_3_CURRENT_ADDRESS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	316;"	d
OID_802_3_MAC_OPTIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	319;"	d
OID_802_3_MAXIMUM_LIST_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	318;"	d
OID_802_3_MULTICAST_LIST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	317;"	d
OID_802_3_PERMANENT_ADDRESS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	315;"	d
OID_802_3_RCV_ERROR_ALIGNMENT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	322;"	d
OID_802_3_RCV_OVERRUN	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	327;"	d
OID_802_3_XMIT_DEFERRED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	325;"	d
OID_802_3_XMIT_HEARTBEAT_FAILURE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	329;"	d
OID_802_3_XMIT_LATE_COLLISIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	331;"	d
OID_802_3_XMIT_MAX_COLLISIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	326;"	d
OID_802_3_XMIT_MORE_COLLISIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	324;"	d
OID_802_3_XMIT_ONE_COLLISION	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	323;"	d
OID_802_3_XMIT_TIMES_CRS_LOST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	330;"	d
OID_802_3_XMIT_UNDERRUN	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	328;"	d
OID_GEN_BROADCAST_BYTES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	308;"	d
OID_GEN_BROADCAST_BYTES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	302;"	d
OID_GEN_BROADCAST_FRAMES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	309;"	d
OID_GEN_BROADCAST_FRAMES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	303;"	d
OID_GEN_CURRENT_LOOKAHEAD	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	285;"	d
OID_GEN_CURRENT_PACKET_FILTER	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	284;"	d
OID_GEN_DIRECTED_BYTES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	304;"	d
OID_GEN_DIRECTED_BYTES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	298;"	d
OID_GEN_DIRECTED_FRAMES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	305;"	d
OID_GEN_DIRECTED_FRAMES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	299;"	d
OID_GEN_DRIVER_VERSION	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	286;"	d
OID_GEN_GET_NETCARD_TIME	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	313;"	d
OID_GEN_GET_TIME_CAPS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	312;"	d
OID_GEN_HARDWARE_STATUS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	272;"	d
OID_GEN_LINK_SPEED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	277;"	d
OID_GEN_MAC_OPTIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	289;"	d
OID_GEN_MAXIMUM_FRAME_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	276;"	d
OID_GEN_MAXIMUM_LOOKAHEAD	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	275;"	d
OID_GEN_MAXIMUM_SEND_PACKETS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	291;"	d
OID_GEN_MAXIMUM_TOTAL_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	287;"	d
OID_GEN_MEDIA_CONNECT_STATUS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	290;"	d
OID_GEN_MEDIA_IN_USE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	274;"	d
OID_GEN_MEDIA_SUPPORTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	273;"	d
OID_GEN_MULTICAST_BYTES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	306;"	d
OID_GEN_MULTICAST_BYTES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	300;"	d
OID_GEN_MULTICAST_FRAMES_RCV	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	307;"	d
OID_GEN_MULTICAST_FRAMES_XMIT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	301;"	d
OID_GEN_PROTOCOL_OPTIONS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	288;"	d
OID_GEN_RCV_CRC_ERROR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	310;"	d
OID_GEN_RCV_ERROR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	296;"	d
OID_GEN_RCV_NO_BUFFER	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	297;"	d
OID_GEN_RCV_OK	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	294;"	d
OID_GEN_RECEIVE_BLOCK_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	281;"	d
OID_GEN_RECEIVE_BUFFER_SPACE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	279;"	d
OID_GEN_SUPPORTED_LIST	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	271;"	d
OID_GEN_TRANSMIT_BLOCK_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	280;"	d
OID_GEN_TRANSMIT_BUFFER_SPACE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	278;"	d
OID_GEN_TRANSMIT_QUEUE_LENGTH	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	311;"	d
OID_GEN_VENDOR_DESCRIPTION	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	283;"	d
OID_GEN_VENDOR_DRIVER_VERSION	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	292;"	d
OID_GEN_VENDOR_ID	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	282;"	d
OID_GEN_XMIT_ERROR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	295;"	d
OID_GEN_XMIT_OK	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	293;"	d
PACKET_ALIGNMENT_FACTOR	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	144;"	d
REMOTE_NDIS_HALT_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	67;"	d
REMOTE_NDIS_INDICATE_STATUS_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	71;"	d
REMOTE_NDIS_INITIALIZE_CMPLT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	73;"	d
REMOTE_NDIS_INITIALIZE_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	66;"	d
REMOTE_NDIS_KEEPALIVE_CMPLT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	77;"	d
REMOTE_NDIS_KEEPALIVE_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	72;"	d
REMOTE_NDIS_PACKET_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	162;"	d
REMOTE_NDIS_QUERY_CMPLT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	74;"	d
REMOTE_NDIS_QUERY_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	68;"	d
REMOTE_NDIS_RESET_CMPLT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	76;"	d
REMOTE_NDIS_RESET_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	70;"	d
REMOTE_NDIS_SET_CMPLT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	75;"	d
REMOTE_NDIS_SET_MSG	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	69;"	d
RESPONSE_RNDIS_INITIALIZE_MSG_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	131;"	d
RESPONSE_RNDIS_KEEPALIVE_MSG_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	135;"	d
RESPONSE_RNDIS_QUERY_MSG_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	132;"	d
RESPONSE_RNDIS_RESET_MSG_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	134;"	d
RESPONSE_RNDIS_SET_MSG_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	133;"	d
RNDIS_DATA_INITIALIZED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	84;"	d
RNDIS_DEVICE_STATE_CONNECTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	343;"	d
RNDIS_DEVICE_STATE_DISCONNECTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	344;"	d
RNDIS_DF_CONNECTIONLESS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	140;"	d
RNDIS_DF_CONNECTION_ORIENTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	141;"	d
RNDIS_ETHER_ADDR_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	153;"	d
RNDIS_ETHER_HDR_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	156;"	d
RNDIS_ETH_MAX_PACKET	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	158;"	d
RNDIS_ETH_MIN_FRAME	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	160;"	d
RNDIS_ETH_MIN_PACKET	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	157;"	d
RNDIS_INITIALIZED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	83;"	d
RNDIS_MCAST_LIST_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	159;"	d
RNDIS_MEDIUM_802_3	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	142;"	d
RNDIS_MULTICAST_LIST_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	161;"	d
RNDIS_SINGLE_PACKET_TRANSFER	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	143;"	d
RNDIS_STATUS_BUFFER_TOO_SHORT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	118;"	d
RNDIS_STATUS_CLOSING	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	107;"	d
RNDIS_STATUS_CLOSING_INDICATING	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	108;"	d
RNDIS_STATUS_FAILURE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	100;"	d
RNDIS_STATUS_INVALID_DATA	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	121;"	d
RNDIS_STATUS_INVALID_LENGTH	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	117;"	d
RNDIS_STATUS_INVALID_OID	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	124;"	d
RNDIS_STATUS_MEDIA_CONNECT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	125;"	d
RNDIS_STATUS_MEDIA_DISCONNECT	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	126;"	d
RNDIS_STATUS_NOT_ACCEPTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	97;"	d
RNDIS_STATUS_NOT_RECOGNIZED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	92;"	d
RNDIS_STATUS_NOT_SUPPORTED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	93;"	d
RNDIS_STATUS_RESET_IN_PROGRESS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	111;"	d
RNDIS_STATUS_RESOURCES	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	105;"	d
RNDIS_STATUS_SUCCESS	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	90;"	d
RNDIS_UNINITIALIZED	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	82;"	d
RNDIS_USB_HEADER_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	155;"	d
RNDIS_VENDOR_ID	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	146;"	d
UART_BITMAP_SIZE	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	57;"	d
UART_STATE_BREAK	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	48;"	d
UART_STATE_FRAMING	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	50;"	d
UART_STATE_OVERRUN	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	52;"	d
UART_STATE_PARITY	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	51;"	d
UART_STATE_RING_SIGNAL	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	49;"	d
UART_STATE_RX_CARRIER	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	46;"	d
UART_STATE_TX_CARRIER	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	47;"	d
_USB_CDC_PSTN_H	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	36;"	d
_cdc_pstn_struct	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^typedef struct _cdc_pstn_struct$/;"	s
break_duration	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint16_t                  break_duration; $/;"	m	struct:_cdc_pstn_struct
current_interface	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t                   current_interface; $/;"	m	struct:_cdc_pstn_struct
dte_present	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    bool                      dte_present;$/;"	m	struct:_cdc_pstn_struct
dte_status	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t                   dte_status; $/;"	m	struct:_cdc_pstn_struct
num_frames_rx_error	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_rx_error;$/;"	m	struct:_cdc_pstn_struct
num_frames_rx_ok	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_rx_ok;$/;"	m	struct:_cdc_pstn_struct
num_frames_tx_error	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_tx_error;$/;"	m	struct:_cdc_pstn_struct
num_frames_tx_many_collision	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_tx_many_collision;$/;"	m	struct:_cdc_pstn_struct
num_frames_tx_ok	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_tx_ok;$/;"	m	struct:_cdc_pstn_struct
num_frames_tx_one_collision	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_frames_tx_one_collision;$/;"	m	struct:_cdc_pstn_struct
num_recv_frames_alignment_error	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_recv_frames_alignment_error;$/;"	m	struct:_cdc_pstn_struct
num_recv_frames_missed	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  num_recv_frames_missed;$/;"	m	struct:_cdc_pstn_struct
pstn_callback	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    USB_APPLICATION_CALLBACK_STRUCT pstn_callback;$/;"	m	struct:_cdc_pstn_struct
response_data_ptr	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t*                  response_data_ptr;$/;"	m	struct:_cdc_pstn_struct
rndis_command_ptr	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t*                  rndis_command_ptr;$/;"	m	struct:_cdc_pstn_struct
rndis_dev_max_tx_size	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  rndis_dev_max_tx_size;  $/;"	m	struct:_cdc_pstn_struct
rndis_device_state	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t                   rndis_device_state;$/;"	m	struct:_cdc_pstn_struct
rndis_host_max_tx_size	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  rndis_host_max_tx_size;  $/;"	m	struct:_cdc_pstn_struct
rndis_hw_state	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  rndis_hw_state;     $/;"	m	struct:_cdc_pstn_struct
rndis_media_connect_status	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  rndis_media_connect_status;$/;"	m	struct:_cdc_pstn_struct
rndis_packet_filter	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint32_t                  rndis_packet_filter;$/;"	m	struct:_cdc_pstn_struct
serial_state_buf	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint8_t                   serial_state_buf[NOTIF_PACKET_SIZE+UART_BITMAP_SIZE];$/;"	m	struct:_cdc_pstn_struct
uart_state	usb\usb_core\device\sources\classes\cdc\usb_cdc_pstn.h	/^    uint16_t uart_state;$/;"	m	struct:_cdc_pstn_struct
Get_Usb_Class_Object_Ptr	usb\usb_core\device\sources\classes\common\usb_class.c	/^static USB_CLASS_OBJECT_STRUCT_PTR Get_Usb_Class_Object_Ptr(USB_CLASS_HANDLE handle)$/;"	f	file:
USB_Class_Allocate_Handle	usb\usb_core\device\sources\classes\common\usb_class.c	/^static USB_CLASS_HANDLE  USB_Class_Allocate_Handle()$/;"	f	file:
USB_Class_Deinit	usb\usb_core\device\sources\classes\common\usb_class.c	/^uint8_t USB_Class_Deinit$/;"	f
USB_Class_Free_Handle	usb\usb_core\device\sources\classes\common\usb_class.c	/^static int32_t USB_Class_Free_Handle(USB_CLASS_HANDLE handle)$/;"	f	file:
USB_Class_Get_Class_Handle	usb\usb_core\device\sources\classes\common\usb_class.c	/^USB_CLASS_HANDLE USB_Class_Get_Class_Handle()$/;"	f
USB_Class_Get_Ctrler_Handle	usb\usb_core\device\sources\classes\common\usb_class.c	/^_usb_device_handle USB_Class_Get_Ctrler_Handle(USB_CLASS_HANDLE class_handle)$/;"	f
USB_Class_Get_Desc	usb\usb_core\device\sources\classes\common\usb_class.c	/^uint8_t USB_Class_Get_Desc(USB_CLASS_HANDLE handle,\/*[IN]*\/$/;"	f
USB_Class_Init	usb\usb_core\device\sources\classes\common\usb_class.c	/^USB_CLASS_HANDLE USB_Class_Init$/;"	f
USB_Class_Periodic_Task	usb\usb_core\device\sources\classes\common\usb_class.c	/^void USB_Class_Periodic_Task(void) $/;"	f
USB_Class_Send_Data	usb\usb_core\device\sources\classes\common\usb_class.c	/^uint8_t USB_Class_Send_Data$/;"	f
USB_Class_Set_Desc	usb\usb_core\device\sources\classes\common\usb_class.c	/^uint8_t USB_Class_Set_Desc(USB_CLASS_HANDLE handle,\/*[IN]*\/$/;"	f
s_class_handle	usb\usb_core\device\sources\classes\common\usb_class.c	/^static USB_CLASS_HANDLE s_class_handle = USB_UNINITIALIZED_VAL_32;$/;"	v	file:
usb_class_object	usb\usb_core\device\sources\classes\common\usb_class.c	/^static USB_CLASS_OBJECT_STRUCT_PTR usb_class_object[USBCFG_DEV_MAX_CLASS_OBJECT];$/;"	v	file:
USB_CLASS_OBJECT_STRUCT	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^}USB_CLASS_OBJECT_STRUCT,* USB_CLASS_OBJECT_STRUCT_PTR;$/;"	t	typeref:struct:_usb_class_object
USB_CLASS_OBJECT_STRUCT_PTR	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^}USB_CLASS_OBJECT_STRUCT,* USB_CLASS_OBJECT_STRUCT_PTR;$/;"	t	typeref:struct:_usb_class_object
_USB_CLASS_INTERNAL_H	usb\usb_core\device\sources\classes\common\usb_class_internal.h	36;"	d
_usb_class_object	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^typedef struct _usb_class_object$/;"	s
arg	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^   void*              arg;$/;"	m	struct:_usb_class_object
class_callback	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^   USB_DEVICE_NOFIFY  class_callback;   $/;"	m	struct:_usb_class_object
controller_handle	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^   _usb_device_handle controller_handle;$/;"	m	struct:_usb_class_object
usb_fw_handle	usb\usb_core\device\sources\classes\common\usb_class_internal.h	/^   uint32_t           usb_fw_handle;$/;"	m	struct:_usb_class_object
USB_Composite_DeInit	usb\usb_core\device\sources\classes\composite\usb_composite.c	/^uint8_t USB_Composite_DeInit($/;"	f
USB_Composite_Event	usb\usb_core\device\sources\classes\composite\usb_composite.c	/^void USB_Composite_Event (uint8_t event, void* val,void * arg) $/;"	f
USB_Composite_Get_Class_Handle	usb\usb_core\device\sources\classes\composite\usb_composite.c	/^uint8_t USB_Composite_Get_Class_Handle($/;"	f
USB_Composite_Init	usb\usb_core\device\sources\classes\composite\usb_composite.c	/^uint8_t USB_Composite_Init($/;"	f
USB_Composite_Requests	usb\usb_core\device\sources\classes\composite\usb_composite.c	/^uint8_t USB_Composite_Requests ($/;"	f
COMPOSITE_DEVICE_STRUCT	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^}COMPOSITE_DEVICE_STRUCT, * COMPOSITE_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:composite_device_struct
COMPOSITE_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^}COMPOSITE_DEVICE_STRUCT, * COMPOSITE_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:composite_device_struct
_USB_COMPOSITE_H	usb\usb_core\device\sources\classes\composite\usb_composite.h	35;"	d
audio_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	AUDIO_HANDLE                  audio_handle;$/;"	m	struct:composite_device_struct
cdc_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	CDC_HANDLE                    cdc_handle;$/;"	m	struct:composite_device_struct
cl_count	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	uint8_t                       cl_count;$/;"	m	struct:composite_device_struct
class_app_callback	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	COMPOSITE_CONFIG_STRUCT_PTR   class_app_callback;$/;"	m	struct:composite_device_struct
class_composite_info	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	USB_COMPOSITE_INFO_STRUCT_PTR class_composite_info;$/;"	m	struct:composite_device_struct
class_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	USB_CLASS_HANDLE              class_handle;$/;"	m	struct:composite_device_struct
composite_device_struct	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^typedef struct composite_device_struct$/;"	s
handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	_usb_device_handle            handle;$/;"	m	struct:composite_device_struct
hid_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	HID_HANDLE                    hid_handle;$/;"	m	struct:composite_device_struct
msc_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	MSD_HANDLE                    msc_handle;$/;"	m	struct:composite_device_struct
phdc_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	PHDC_HANDLE                   phdc_handle;	$/;"	m	struct:composite_device_struct
user_handle	usb\usb_core\device\sources\classes\composite\usb_composite.h	/^	uint32_t                      user_handle;$/;"	m	struct:composite_device_struct
USB_Class_HID_Cancel	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^USB_STATUS USB_Class_HID_Cancel$/;"	f
USB_Class_HID_Deinit	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^USB_STATUS USB_Class_HID_Deinit$/;"	f
USB_Class_HID_Init	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^USB_STATUS USB_Class_HID_Init$/;"	f
USB_Class_HID_Send_Data	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^uint8_t USB_Class_HID_Send_Data$/;"	f
USB_Class_Hid_Event	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^void USB_Class_Hid_Event(uint8_t event, void* val,void * arg) $/;"	f
USB_HID_Requests	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^uint8_t USB_HID_Requests(USB_SETUP_STRUCT * setup_packet, $/;"	f
USB_Hid_Get_Device_Ptr	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^static HID_DEVICE_STRUCT_PTR USB_Hid_Get_Device_Ptr(HID_HANDLE handle)$/;"	f	file:
USB_Service_Hid	usb\usb_core\device\sources\classes\hid\usb_hid.c	/^void USB_Service_Hid(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
CLASS_REQ_DATA_SIZE	usb\usb_core\device\sources\classes\hid\usb_hid.h	55;"	d
HID_DEVICE_STRUCT	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}HID_DEVICE_STRUCT, * HID_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:hid_device_struct
HID_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}HID_DEVICE_STRUCT, * HID_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:hid_device_struct
HID_IMPLEMENT_QUEUING	usb\usb_core\device\sources\classes\hid\usb_hid.h	50;"	d
HID_MAX_QUEUE_ELEMS	usb\usb_core\device\sources\classes\hid\usb_hid.h	57;"	d
MAX_HID_DEVICE	usb\usb_core\device\sources\classes\hid\usb_hid.h	56;"	d
PTR_USB_CLASS_HID_ENDPOINT_DATA	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}USB_CLASS_HID_ENDPOINT_DATA, *PTR_USB_CLASS_HID_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_hid_endpoint_data
PTR_USB_CLASS_HID_QUEUE	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}USB_CLASS_HID_QUEUE, *PTR_USB_CLASS_HID_QUEUE;$/;"	t	typeref:struct:_usb_class_hid_queue
REPORT_SIZE	usb\usb_core\device\sources\classes\hid\usb_hid.h	54;"	d
USB_CLASS_HID_ENDPOINT	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}USB_CLASS_HID_ENDPOINT;$/;"	t	typeref:struct:_usb_class_hid_endpoint
USB_CLASS_HID_ENDPOINT_DATA	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}USB_CLASS_HID_ENDPOINT_DATA, *PTR_USB_CLASS_HID_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_hid_endpoint_data
USB_CLASS_HID_QUEUE	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^}USB_CLASS_HID_QUEUE, *PTR_USB_CLASS_HID_QUEUE;$/;"	t	typeref:struct:_usb_class_hid_queue
_USB_HID_H	usb\usb_core\device\sources\classes\hid\usb_hid.h	36;"	d
_usb_class_hid_endpoint	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^typedef struct _usb_class_hid_endpoint $/;"	s
_usb_class_hid_endpoint_data	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^typedef struct _usb_class_hid_endpoint_data $/;"	s
_usb_class_hid_queue	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^typedef struct _usb_class_hid_queue $/;"	s
app_buff	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t*                                 app_buff; \/* buffer to send *\/$/;"	m	struct:_usb_class_hid_queue
bin_consumer	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  bin_consumer;\/* the num of queued elements *\/$/;"	m	struct:_usb_class_hid_endpoint
bin_producer	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  bin_producer;\/* the num of de-queued elements *\/$/;"	m	struct:_usb_class_hid_endpoint
channel	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  channel; $/;"	m	struct:_usb_class_hid_queue
class_handle	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_CLASS_HANDLE                           class_handle;$/;"	m	struct:hid_device_struct
class_request_params	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  uint8_t                                    class_request_params[2]; $/;"	m	struct:hid_device_struct
class_specific_callback	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:hid_device_struct
count	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  count;  \/* num of non control endpoints *\/     $/;"	m	struct:_usb_class_hid_endpoint_data
desc_callback_ptr	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;$/;"	m	struct:hid_device_struct
endpoint	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  endpoint; \/* endpoint num *\/                    $/;"	m	struct:_usb_class_hid_endpoint
ep	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    USB_CLASS_HID_ENDPOINT*                  ep;       $/;"	m	struct:_usb_class_hid_endpoint_data
ep_desc_data	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_ENDPOINTS*                             ep_desc_data;$/;"	m	struct:hid_device_struct
handle	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    _usb_device_handle                       handle;$/;"	m	struct:_usb_class_hid_queue
handle	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  _usb_device_handle                         handle;$/;"	m	struct:hid_device_struct
hid_application_callback	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_APPLICATION_CALLBACK_STRUCT            hid_application_callback;$/;"	m	struct:hid_device_struct
hid_device_struct	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^typedef struct hid_device_struct$/;"	s
hid_endpoint_data	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_CLASS_HID_ENDPOINT_DATA                hid_endpoint_data;$/;"	m	struct:hid_device_struct
queue	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    USB_CLASS_HID_QUEUE queue[HID_MAX_QUEUE_ELEMS]; \/* queue data *\/  $/;"	m	struct:_usb_class_hid_endpoint
size	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint32_t                                 size; \/* size of the transfer *\/$/;"	m	struct:_usb_class_hid_queue
type	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^    uint8_t                                  type;     \/* type of endpoint (interrupt, bulk or isochronous) *\/   $/;"	m	struct:_usb_class_hid_endpoint
user_handle	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  uint32_t                                   user_handle;$/;"	m	struct:hid_device_struct
vendor_req_callback	usb\usb_core\device\sources\classes\hid\usb_hid.h	/^  USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;$/;"	m	struct:hid_device_struct
USB_CLASS_HANDLE	usb\usb_core\device\sources\classes\include\usb_class.h	/^typedef uint32_t USB_CLASS_HANDLE;$/;"	t
USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT	usb\usb_core\device\sources\classes\include\usb_class.h	/^}USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT,$/;"	t	typeref:struct:usb_class_specific_handler_callback_struct
USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class.h	/^* USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT_PTR;$/;"	t	typeref:struct:usb_class_specific_handler_callback_struct
USB_CLASS_SPECIFIC_HANDLER_FUNC	usb\usb_core\device\sources\classes\include\usb_class.h	/^typedef uint8_t (_CODE_PTR_ USB_CLASS_SPECIFIC_HANDLER_FUNC)($/;"	t
_USB_CLASS_H	usb\usb_core\device\sources\classes\include\usb_class.h	36;"	d
arg	usb\usb_core\device\sources\classes\include\usb_class.h	/^    void*                            arg;$/;"	m	struct:usb_class_specific_handler_callback_struct
callback	usb\usb_core\device\sources\classes\include\usb_class.h	/^    USB_CLASS_SPECIFIC_HANDLER_FUNC  callback;$/;"	m	struct:usb_class_specific_handler_callback_struct
usb_class_specific_handler_callback_struct	usb\usb_core\device\sources\classes\include\usb_class.h	/^typedef struct usb_class_specific_handler_callback_struct$/;"	s
AUDIO_APP_DATA_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^}AUDIO_APP_DATA_STRUCT;$/;"	t	typeref:struct:_audio_app_data_struct
AUDIO_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^ }AUDIO_CONFIG_STRUCT,* AUDIO_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:audio_config_struct
AUDIO_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^ }AUDIO_CONFIG_STRUCT,* AUDIO_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:audio_config_struct
AUDIO_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^ typedef uint32_t AUDIO_HANDLE;$/;"	t
GET_CUR_AUTOMATIC_GAIN_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	60;"	d
GET_CUR_BASS_BOOST_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	62;"	d
GET_CUR_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	56;"	d
GET_CUR_COPY_PROTECT_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	125;"	d
GET_CUR_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	61;"	d
GET_CUR_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	59;"	d
GET_CUR_LOUDNESS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	63;"	d
GET_CUR_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	57;"	d
GET_CUR_MUTE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	54;"	d
GET_CUR_PITCH_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	132;"	d
GET_CUR_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	127;"	d
GET_CUR_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	58;"	d
GET_CUR_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	55;"	d
GET_MAX_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	75;"	d
GET_MAX_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	79;"	d
GET_MAX_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	78;"	d
GET_MAX_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	76;"	d
GET_MAX_PITCH_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	134;"	d
GET_MAX_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	129;"	d
GET_MAX_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	77;"	d
GET_MAX_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	74;"	d
GET_MEM	usb\usb_core\device\sources\classes\include\usb_class_audio.h	147;"	d
GET_MIN_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	67;"	d
GET_MIN_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	71;"	d
GET_MIN_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	70;"	d
GET_MIN_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	68;"	d
GET_MIN_PITCH_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	133;"	d
GET_MIN_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	128;"	d
GET_MIN_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	69;"	d
GET_MIN_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	66;"	d
GET_RES_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	83;"	d
GET_RES_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	87;"	d
GET_RES_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	86;"	d
GET_RES_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	84;"	d
GET_RES_PITCH_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	135;"	d
GET_RES_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	130;"	d
GET_RES_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	85;"	d
GET_RES_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	82;"	d
SET_CUR_AUTOMATIC_GAIN_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	96;"	d
SET_CUR_BASS_BOOST_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	98;"	d
SET_CUR_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	92;"	d
SET_CUR_COPY_PROTECT_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	137;"	d
SET_CUR_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	97;"	d
SET_CUR_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	95;"	d
SET_CUR_LOUDNESS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	99;"	d
SET_CUR_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	93;"	d
SET_CUR_MUTE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	90;"	d
SET_CUR_PITCH_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	144;"	d
SET_CUR_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	139;"	d
SET_CUR_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	94;"	d
SET_CUR_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	91;"	d
SET_MAX_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	111;"	d
SET_MAX_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	115;"	d
SET_MAX_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	114;"	d
SET_MAX_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	112;"	d
SET_MAX_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	141;"	d
SET_MAX_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	113;"	d
SET_MAX_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	110;"	d
SET_MEM	usb\usb_core\device\sources\classes\include\usb_class_audio.h	146;"	d
SET_MIN_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	103;"	d
SET_MIN_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	107;"	d
SET_MIN_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	106;"	d
SET_MIN_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	104;"	d
SET_MIN_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	140;"	d
SET_MIN_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	105;"	d
SET_MIN_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	102;"	d
SET_RES_BASS_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	119;"	d
SET_RES_DELAY_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	123;"	d
SET_RES_GRAPHIC_EQUALIZER_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	122;"	d
SET_RES_MID_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	120;"	d
SET_RES_SAMPLING_FREQ_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	142;"	d
SET_RES_TREBLE_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	121;"	d
SET_RES_VOLUME_CONTROL	usb\usb_core\device\sources\classes\include\usb_class_audio.h	118;"	d
USB_CLASS_AUDIO_UNITS	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^}USB_CLASS_AUDIO_UNITS; $/;"	t	typeref:struct:_USB_CLASS_AUDIO_UNITS
USB_REQ_VAL_INVALID	usb\usb_core\device\sources\classes\include\usb_class_audio.h	149;"	d
USB_UT_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^}USB_UT_STRUCT, *USB_UT_STRUCT_PTR;$/;"	t	typeref:struct:_USB_AUDIO_UT_STRUCT
USB_UT_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^}USB_UT_STRUCT, *USB_UT_STRUCT_PTR;$/;"	t	typeref:struct:_USB_AUDIO_UT_STRUCT
_USB_AUDIO_UT_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^typedef struct _USB_AUDIO_UT_STRUCT$/;"	s
_USB_CLASS_AUDIO_H	usb\usb_core\device\sources\classes\include\usb_class_audio.h	36;"	d
_USB_CLASS_AUDIO_UNITS	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^typedef  struct _USB_CLASS_AUDIO_UNITS $/;"	s
_audio_app_data_struct	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^typedef struct _audio_app_data_struct$/;"	s
audio_application_callback	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^    USB_APPLICATION_CALLBACK_STRUCT                audio_application_callback;$/;"	m	struct:audio_config_struct
audio_config_struct	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^ typedef struct audio_config_struct$/;"	s
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^	USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT     class_specific_callback;$/;"	m	struct:audio_config_struct
count	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^   uint8_t        count;       \/* Number of terminal or Ferture Unit End point *\/  $/;"	m	struct:_USB_CLASS_AUDIO_UNITS
data_ptr	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^    uint8_t*      data_ptr;    \/* pointer to buffer       *\/     $/;"	m	struct:_audio_app_data_struct
data_size	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^    uint32_t      data_size;   \/* buffer size of endpoint *\/$/;"	m	struct:_audio_app_data_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^	DESC_REQUEST_NOFIFY_STRUCT_PTR	               desc_callback_ptr; $/;"	m	struct:audio_config_struct
epp	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^   USB_UT_STRUCT* epp;         \/* Array of terminal or Feature Unit *\/$/;"	m	struct:_USB_CLASS_AUDIO_UNITS
type	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^  uint8_t         type;        \/* type of endpoint        *\/$/;"	m	struct:_USB_AUDIO_UT_STRUCT
unit_id	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^  uint8_t         unit_id;     \/* endpoint number         *\/$/;"	m	struct:_USB_AUDIO_UT_STRUCT
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_audio.h	/^	USB_VENDOR_REQ_CALLBACK_STRUCT 	               vendor_req_callback;$/;"	m	struct:audio_config_struct
AUX_JACK_HOOK_STATE_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	94;"	d
CALL_STATE_CHANGE_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	97;"	d
CDC_APP_DATA_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^}CDC_APP_DATA_STRUCT;$/;"	t	typeref:struct:_cdc_app_data_struct
CDC_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^}CDC_CONFIG_STRUCT,* CDC_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_config_struct
CDC_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^}CDC_CONFIG_STRUCT,* CDC_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:_cdc_config_struct
CDC_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef uint32_t  CDC_HANDLE;$/;"	t
CLEAR_COMM_FEATURE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	54;"	d
CLEAR_UNIT_PARAMETER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	74;"	d
CONNECTION_SPEED_CHANGE_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	99;"	d
DIAL_DIGITS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	71;"	d
GET_ABSTRACT_STATE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	87;"	d
GET_ATM_DEVICE_STATISTICS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	82;"	d
GET_ATM_VC_STATISTICS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	84;"	d
GET_COMM_FEATURE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	53;"	d
GET_COUNTRY_SETTING	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	88;"	d
GET_ENCAPSULATED_RESPONSE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	51;"	d
GET_ETHERNET_POW_PATTER_FILTER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	78;"	d
GET_ETHERNET_STATISTIC	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	80;"	d
GET_LINE_CODING	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	62;"	d
GET_LINE_PARAMS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	70;"	d
GET_OPERATION_PARAM	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	68;"	d
GET_PROFILE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	75;"	d
GET_RINGER_PARAMS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	66;"	d
GET_UNIT_PARAMETER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	73;"	d
LINE_STATE_CHANGE_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	98;"	d
MDLM_SPECIFIC_REQUESTS_MASK	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	85;"	d
NETWORK_CONNECTION_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	92;"	d
PULSE_SETUP	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	57;"	d
RESPONSE_AVAIL_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	93;"	d
RING_AUX_JACK	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	60;"	d
RING_DETECT_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	95;"	d
SEND_BREAK	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	64;"	d
SEND_ENCAPSULATED_COMMAND	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	50;"	d
SEND_PULSE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	58;"	d
SERIAL_STATE_NOTIF	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	96;"	d
SET_ABSTRACT_STATE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	89;"	d
SET_ATM_DATA_FORMAT	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	81;"	d
SET_ATM_DEFAULT_VC	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	83;"	d
SET_AUX_LINE_STATE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	55;"	d
SET_COMM_FEATURE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	52;"	d
SET_CONTROL_LINE_STATE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	63;"	d
SET_COUNTRY_SETTING	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	90;"	d
SET_ETHERNET_MULTICAST_FILTERS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	76;"	d
SET_ETHERNET_PACKET_FILTER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	79;"	d
SET_ETHERNET_POW_PATTER_FILTER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	77;"	d
SET_HOOK_STATE	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	56;"	d
SET_LINE_CODING	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	61;"	d
SET_LINE_PARAMS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	69;"	d
SET_OPERATION_PARAM	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	67;"	d
SET_PULSE_TIME	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	59;"	d
SET_RINGER_PARAMS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	65;"	d
SET_UNIT_PARAMETER	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	72;"	d
USB_APP_CDC_CARRIER_ACTIVATED	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	102;"	d
USB_APP_CDC_CARRIER_DEACTIVATED	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	101;"	d
USB_APP_CDC_DTE_ACTIVATED	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	104;"	d
USB_APP_CDC_DTE_DEACTIVATED	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	103;"	d
USB_APP_GET_LINK_SPEED	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	105;"	d
USB_APP_GET_LINK_STATUS	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	106;"	d
USB_CDC_Periodic_Task	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	111;"	d
USB_REQ_VAL_INVALID	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	109;"	d
USB_RNDIS_INFO_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^} USB_RNDIS_INFO_STRUCT, * USB_RNDIS_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_USB_RNDIS_INFO_STRUCT
USB_RNDIS_INFO_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^} USB_RNDIS_INFO_STRUCT, * USB_RNDIS_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_USB_RNDIS_INFO_STRUCT
_USB_CLASS_CDC_H	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	36;"	d
_USB_RNDIS_INFO_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef struct _USB_RNDIS_INFO_STRUCT$/;"	s
_cdc_app_data_struct	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef struct _cdc_app_data_struct$/;"	s
_cdc_config_struct	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef struct _cdc_config_struct$/;"	s
_ip_address	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef uint32_t  _ip_address;$/;"	t
cdc_application_callback	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^   USB_APPLICATION_CALLBACK_STRUCT            cdc_application_callback;$/;"	m	struct:_cdc_config_struct
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^   USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:_cdc_config_struct
data_ptr	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^    uint8_t*                                  data_ptr;     \/* pointer to buffer       *\/     $/;"	m	struct:_cdc_app_data_struct
data_size	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^    uint32_t                                  data_size;    \/* buffer size of endpoint *\/$/;"	m	struct:_cdc_app_data_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^   DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;$/;"	m	struct:_cdc_config_struct
enet_address_t	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^typedef uint8_t   enet_address_t[6];$/;"	t
ip_address	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^	_ip_address   ip_address;$/;"	m	struct:_USB_RNDIS_INFO_STRUCT
mac_address	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^	enet_address_t mac_address;$/;"	m	struct:_USB_RNDIS_INFO_STRUCT
rndis_max_frame_size	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^	uint32_t      rndis_max_frame_size; $/;"	m	struct:_USB_RNDIS_INFO_STRUCT
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_cdc.h	/^   USB_VENDOR_REQ_CALLBACK_STRUCT	          vendor_req_callback;$/;"	m	struct:_cdc_config_struct
COMPOSITE_CALLBACK_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ }COMPOSITE_CALLBACK_STRUCT;$/;"	t	typeref:struct:_COMPOSITE_CALLBACK_STRUCT
COMPOSITE_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ }COMPOSITE_CONFIG_STRUCT,* COMPOSITE_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:composite_config_struct
COMPOSITE_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ }COMPOSITE_CONFIG_STRUCT,* COMPOSITE_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:composite_config_struct
COMPOSITE_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ typedef uint32_t COMPOSITE_HANDLE;$/;"	t
_COMPOSITE_CALLBACK_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ typedef struct _COMPOSITE_CALLBACK_STRUCT$/;"	s
_USB_CLASS_COMPOSITE_H	usb\usb_core\device\sources\classes\include\usb_class_composite.h	37;"	d
class_app_callback	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^	 COMPOSITE_CONFIG_STRUCT_PTR                class_app_callback;  \/* Array of Endpoints Structures *\/$/;"	m	struct:_COMPOSITE_CALLBACK_STRUCT
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^     USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:composite_config_struct
composite_application_callback	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^     USB_APPLICATION_CALLBACK_STRUCT            composite_application_callback;$/;"	m	struct:composite_config_struct
composite_config_struct	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^ typedef struct composite_config_struct$/;"	s
count	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^	 uint8_t                                    count;               \/* Number of class support *\/	 $/;"	m	struct:_COMPOSITE_CALLBACK_STRUCT
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^     DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;$/;"	m	struct:composite_config_struct
type	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^	 class_type                                 type;$/;"	m	struct:composite_config_struct
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_composite.h	/^     USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;$/;"	m	struct:composite_config_struct
HID_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^ }HID_CONFIG_STRUCT,* HID_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:hid_config_struct
HID_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^ }HID_CONFIG_STRUCT,* HID_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:hid_config_struct
HID_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^ typedef uint32_t HID_HANDLE; $/;"	t
HIGH_BYTE_SHIFT	usb\usb_core\device\sources\classes\include\usb_class_hid.h	59;"	d
MSB_MASK	usb\usb_core\device\sources\classes\include\usb_class_hid.h	60;"	d
USB_HID_GET_IDLE_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	54;"	d
USB_HID_GET_PROTOCOL_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	55;"	d
USB_HID_GET_REPORT_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	53;"	d
USB_HID_Periodic_Task	usb\usb_core\device\sources\classes\include\usb_class_hid.h	141;"	d
USB_HID_REQUEST_DIR_MASK	usb\usb_core\device\sources\classes\include\usb_class_hid.h	61;"	d
USB_HID_REQUEST_TYPE_MASK	usb\usb_core\device\sources\classes\include\usb_class_hid.h	62;"	d
USB_HID_SET_IDLE_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	57;"	d
USB_HID_SET_PROTOCOL_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	58;"	d
USB_HID_SET_REPORT_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_hid.h	56;"	d
USB_REQ_VAL_INVALID	usb\usb_core\device\sources\classes\include\usb_class_hid.h	67;"	d
_USB_CLASS_HID_H	usb\usb_core\device\sources\classes\include\usb_class_hid.h	36;"	d
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:hid_config_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^    DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr; $/;"	m	struct:hid_config_struct
hid_application_callback	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^    USB_APPLICATION_CALLBACK_STRUCT            hid_application_callback;$/;"	m	struct:hid_config_struct
hid_config_struct	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^ typedef struct hid_config_struct$/;"	s
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_hid.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;$/;"	m	struct:hid_config_struct
DEVICE_LBA_INFO_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}DEVICE_LBA_INFO_STRUCT, * PTR_DEVICE_LBA_INFO_STRUCT;$/;"	t	typeref:struct:_device_lba_info_struct
LBA_APP_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}LBA_APP_STRUCT, * PTR_LBA_APP_STRUCT;$/;"	t	typeref:struct:_lba_app_struct
MSC_APP_DATA_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}MSC_APP_DATA_STRUCT;$/;"	t	typeref:struct:_msc_app_data_struct
MSD_BUFF_INFO	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}MSD_BUFF_INFO, *PTR_MSD_BUFF_INFO;$/;"	t	typeref:struct:_msd_buffers_info
MSD_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef uint32_t MSD_HANDLE;$/;"	t
MSD_MAX_QUEUE_ELEMS	usb\usb_core\device\sources\classes\include\usb_class_msc.h	58;"	d
PTR_DEVICE_LBA_INFO_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}DEVICE_LBA_INFO_STRUCT, * PTR_DEVICE_LBA_INFO_STRUCT;$/;"	t	typeref:struct:_device_lba_info_struct
PTR_LBA_APP_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}LBA_APP_STRUCT, * PTR_LBA_APP_STRUCT;$/;"	t	typeref:struct:_lba_app_struct
PTR_MSD_BUFF_INFO	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}MSD_BUFF_INFO, *PTR_MSD_BUFF_INFO;$/;"	t	typeref:struct:_msd_buffers_info
PTR_USB_CLASS_MSC_ENDPOINT_DATA	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_CLASS_MSC_ENDPOINT_DATA,*PTR_USB_CLASS_MSC_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_msc_endpoint_data
PTR_USB_CLASS_MSC_QUEUE	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_CLASS_MSC_QUEUE, *PTR_USB_CLASS_MSC_QUEUE;$/;"	t	typeref:struct:_usb_class_msc_queue
USB_CLASS_MSC_ENDPOINT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_CLASS_MSC_ENDPOINT;$/;"	t	typeref:struct:_usb_class_msc_endpoint
USB_CLASS_MSC_ENDPOINT_DATA	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_CLASS_MSC_ENDPOINT_DATA,*PTR_USB_CLASS_MSC_ENDPOINT_DATA;$/;"	t	typeref:struct:_usb_class_msc_endpoint_data
USB_CLASS_MSC_QUEUE	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_CLASS_MSC_QUEUE, *PTR_USB_CLASS_MSC_QUEUE;$/;"	t	typeref:struct:_usb_class_msc_queue
USB_MSC_DEVICE_FORMAT_COMPLETE	usb\usb_core\device\sources\classes\include\usb_class_msc.h	53;"	d
USB_MSC_DEVICE_GET_INFO	usb\usb_core\device\sources\classes\include\usb_class_msc.h	55;"	d
USB_MSC_DEVICE_READ_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_msc.h	51;"	d
USB_MSC_DEVICE_REMOVAL_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_msc.h	54;"	d
USB_MSC_DEVICE_WRITE_REQUEST	usb\usb_core\device\sources\classes\include\usb_class_msc.h	52;"	d
USB_MSC_Periodic_Task	usb\usb_core\device\sources\classes\include\usb_class_msc.h	126;"	d
USB_MSC_START_STOP_EJECT_MEDIA	usb\usb_core\device\sources\classes\include\usb_class_msc.h	56;"	d
USB_MSD_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_MSD_CONFIG_STRUCT, * USB_MSD_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:_usb_msd_config
USB_MSD_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^}USB_MSD_CONFIG_STRUCT, * USB_MSD_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:_usb_msd_config
USB_REQ_VAL_INVALID	usb\usb_core\device\sources\classes\include\usb_class_msc.h	60;"	d
_USB_CLASS_MSC_H	usb\usb_core\device\sources\classes\include\usb_class_msc.h	36;"	d
_device_lba_info_struct	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _device_lba_info_struct$/;"	s
_lba_app_struct	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _lba_app_struct$/;"	s
_msc_app_data_struct	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _msc_app_data_struct$/;"	s
_msd_buffers_info	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _msd_buffers_info$/;"	s
_usb_class_msc_endpoint	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _usb_class_msc_endpoint $/;"	s
_usb_class_msc_endpoint_data	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _usb_class_msc_endpoint_data$/;"	s
_usb_class_msc_queue	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _usb_class_msc_queue $/;"	s
_usb_msd_config	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^typedef struct _usb_msd_config $/;"	s
app_data	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    MSC_APP_DATA_STRUCT     app_data;  $/;"	m	struct:_usb_class_msc_queue
bin_consumer	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 bin_consumer;\/* the num of queued elements *\/$/;"	m	struct:_usb_class_msc_endpoint
bin_producer	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 bin_producer;\/* the num of de-queued elements *\/$/;"	m	struct:_usb_class_msc_endpoint
buff_ptr	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t*             buff_ptr;$/;"	m	struct:_lba_app_struct
channel	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 channel;       $/;"	m	struct:_usb_class_msc_queue
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:_usb_msd_config
count	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^	uint8_t                 count;$/;"	m	struct:_usb_class_msc_endpoint_data
data_ptr	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t*                data_ptr;         \/* pointer to buffer       *\/     $/;"	m	struct:_msc_app_data_struct
data_size	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint32_t                data_size;        \/* buffer size of endpoint *\/$/;"	m	struct:_msc_app_data_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr; $/;"	m	struct:_usb_msd_config
endpoint	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 endpoint; \/* endpoint num *\/                    $/;"	m	struct:_usb_class_msc_endpoint
ep	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^	USB_CLASS_MSC_ENDPOINT* ep;$/;"	m	struct:_usb_class_msc_endpoint_data
handle	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    _usb_device_handle      handle;$/;"	m	struct:_usb_class_msc_queue
length_of_each_lab_of_device	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint32_t                length_of_each_lab_of_device;$/;"	m	struct:_device_lba_info_struct
msc_application_callback	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     USB_APPLICATION_CALLBACK_STRUCT            msc_application_callback;$/;"	m	struct:_usb_msd_config
msc_lba_recv_buff_size	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     uint32_t               msc_lba_recv_buff_size;$/;"	m	struct:_msd_buffers_info
msc_lba_recv_ptr	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     uint8_t*               msc_lba_recv_ptr;$/;"	m	struct:_msd_buffers_info
msc_lba_send_buff_size	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     uint32_t               msc_lba_send_buff_size;$/;"	m	struct:_msd_buffers_info
msc_lba_send_ptr	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     uint8_t*               msc_lba_send_ptr;$/;"	m	struct:_msd_buffers_info
num_lun_supported	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 num_lun_supported; $/;"	m	struct:_device_lba_info_struct
offset	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint32_t             offset;$/;"	m	struct:_lba_app_struct
queue	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    USB_CLASS_MSC_QUEUE     queue[MSD_MAX_QUEUE_ELEMS]; \/* queue data *\/  $/;"	m	struct:_usb_class_msc_endpoint
size	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint32_t             size;$/;"	m	struct:_lba_app_struct
total_lba_device_supports	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint32_t                total_lba_device_supports;\/* lab : LOGICAL ADDRESS BLOCK *\/ $/;"	m	struct:_device_lba_info_struct
type	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^    uint8_t                 type;     \/* type of endpoint (interrupt, bulk or isochronous) *\/   $/;"	m	struct:_usb_class_msc_endpoint
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_msc.h	/^     USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;$/;"	m	struct:_usb_msd_config
META_DATA_MSG_PRE_IMPLEMENTED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	55;"	d
META_DATA_MSG_PRE_IMPLEMENTED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	57;"	d
PHDC_CONFIG_STRUCT	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}PHDC_CONFIG_STRUCT,* PHDC_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:phdc_config_struct
PHDC_CONFIG_STRUCT_PTR	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}PHDC_CONFIG_STRUCT,* PHDC_CONFIG_STRUCT_PTR;$/;"	t	typeref:struct:phdc_config_struct
PHDC_HANDLE	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^typedef uint32_t PHDC_HANDLE;$/;"	t
PTR_USB_APP_EVENT_DATA_RECIEVED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_APP_EVENT_DATA_RECIEVED, *PTR_USB_APP_EVENT_DATA_RECIEVED;$/;"	t	typeref:struct:_usb_app_event_data_recieved
PTR_USB_APP_EVENT_SEND_COMPLETE	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_APP_EVENT_SEND_COMPLETE, *PTR_USB_APP_EVENT_SEND_COMPLETE;$/;"	t	typeref:struct:_usb_app_event_send_complete
PTR_USB_CLASS_PHDC_RX_BUFF	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_CLASS_PHDC_RX_BUFF, *PTR_USB_CLASS_PHDC_RX_BUFF;$/;"	t	typeref:struct:_usb_class_phdc_rx_buff
USB_APP_EVENT_DATA_RECIEVED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_APP_EVENT_DATA_RECIEVED, *PTR_USB_APP_EVENT_DATA_RECIEVED;$/;"	t	typeref:struct:_usb_app_event_data_recieved
USB_APP_EVENT_SEND_COMPLETE	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_APP_EVENT_SEND_COMPLETE, *PTR_USB_APP_EVENT_SEND_COMPLETE;$/;"	t	typeref:struct:_usb_app_event_send_complete
USB_CLASS_PHDC_RX_BUFF	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^}USB_CLASS_PHDC_RX_BUFF, *PTR_USB_CLASS_PHDC_RX_BUFF;$/;"	t	typeref:struct:_usb_class_phdc_rx_buff
USB_Class_PHDC_Periodic_Task	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	53;"	d
USB_DEV_EVENT_FEATURE_CHANGED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	52;"	d
USB_DEV_EVENT_META_DATA_PARAMS_CHANGED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	51;"	d
USB_METADATA_SUPPORTED	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	50;"	d
USB_PHDC_Periodic_Task	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	201;"	d
USB_REQ_VAL_INVALID	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	60;"	d
_USB_CLASS_PHDC_H	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	36;"	d
_usb_app_event_data_recieved	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^typedef struct _usb_app_event_data_recieved $/;"	s
_usb_app_event_send_complete	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^typedef struct _usb_app_event_send_complete $/;"	s
_usb_class_phdc_rx_buff	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^typedef struct _usb_class_phdc_rx_buff $/;"	s
buffer_ptr	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t*  buffer_ptr;$/;"	m	struct:_usb_app_event_data_recieved
buffer_ptr	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t*  buffer_ptr;$/;"	m	struct:_usb_app_event_send_complete
class_specific_callback	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:phdc_config_struct
desc_callback_ptr	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;  $/;"	m	struct:phdc_config_struct
in_buff	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t*  in_buff;  \/* Pointer to input Buffer *\/$/;"	m	struct:_usb_class_phdc_rx_buff
in_size	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint32_t  in_size; \/* Length of Input Buffer*\/$/;"	m	struct:_usb_class_phdc_rx_buff
meta_data_packet	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    bool      meta_data_packet;\/* meta data packet flag *\/$/;"	m	struct:_usb_class_phdc_rx_buff
out_buff	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t*  out_buff; \/* Pointer to Output Buffer *\/$/;"	m	struct:_usb_class_phdc_rx_buff
out_size	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint16_t  out_size; \/* Size of Output Buffer *\/$/;"	m	struct:_usb_class_phdc_rx_buff
phdc_application_callback	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    USB_APPLICATION_CALLBACK_STRUCT            phdc_application_callback;$/;"	m	struct:phdc_config_struct
phdc_config_struct	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^typedef struct phdc_config_struct$/;"	s
qos	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t   qos;$/;"	m	struct:_usb_app_event_data_recieved
qos	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint8_t   qos;$/;"	m	struct:_usb_app_event_send_complete
size	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint32_t  size;$/;"	m	struct:_usb_app_event_data_recieved
size	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint32_t  size;$/;"	m	struct:_usb_app_event_send_complete
transfer_size	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    uint16_t  transfer_size;$/;"	m	struct:_usb_class_phdc_rx_buff
vendor_req_callback	usb\usb_core\device\sources\classes\include\usb_class_phdc.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback; $/;"	m	struct:phdc_config_struct
USB_Class_MSC_Deinit	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^USB_STATUS USB_Class_MSC_Deinit$/;"	f
USB_Class_MSC_Event	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^ void USB_Class_MSC_Event(uint8_t event, void* val,void* arg) $/;"	f
USB_Class_MSC_Init	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^USB_STATUS USB_Class_MSC_Init$/;"	f
USB_Class_MSC_Send_Data	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^uint8_t USB_Class_MSC_Send_Data$/;"	f
USB_MSC_LBA_Transfer	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^uint8_t USB_MSC_LBA_Transfer$/;"	f
USB_MSC_Requests	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^uint8_t USB_MSC_Requests$/;"	f
USB_Msd_Get_Desc_Info	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^ static uint8_t USB_Msd_Get_Desc_Info(MSC_DEVICE_STRUCT_PTR msc_dev_ptr,USB_MSD_DESC_INFO_T type, uint32_t * object)$/;"	f	file:
USB_Msd_Get_Device_Ptr	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^static MSC_DEVICE_STRUCT_PTR USB_Msd_Get_Device_Ptr(MSD_HANDLE handle)$/;"	f	file:
USB_Service_Bulk_In	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^void USB_Service_Bulk_In(PTR_USB_EVENT_STRUCT event, void* arg)$/;"	f
USB_Service_Bulk_Out	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^void USB_Service_Bulk_Out(PTR_USB_EVENT_STRUCT event,void* arg)$/;"	f
msc_lba_recv_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^ uint8_t * msc_lba_recv_ptr;$/;"	v
msc_lba_send_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^ uint8_t * msc_lba_send_ptr;$/;"	v
process_mass_storage_command	usb\usb_core\device\sources\classes\msd\usb_msc.c	/^uint8_t process_mass_storage_command $/;"	f
BULK_ONLY_MASS_STORAGE_RESET	usb\usb_core\device\sources\classes\msd\usb_msc.h	64;"	d
CBW	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}CBW, *PTR_CBW ;$/;"	t	typeref:struct:_usb_msc_cbw
COMMAND_FAILED	usb\usb_core\device\sources\classes\msd\usb_msc.h	80;"	d
COMMAND_PASSED	usb\usb_core\device\sources\classes\msd\usb_msc.h	79;"	d
CSW	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}CSW, *PTR_CSW;$/;"	t	typeref:struct:_usb_msc_csw
FORMAT_UNIT_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	93;"	d
GET_MAX_LUN	usb\usb_core\device\sources\classes\msd\usb_msc.h	65;"	d
GET_REQUESTS	usb\usb_core\device\sources\classes\msd\usb_msc.h	67;"	d
IMPLEMENTING_DISK_DRIVE	usb\usb_core\device\sources\classes\msd\usb_msc.h	57;"	d
INQUIRY_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	85;"	d
LBA_INFO_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}LBA_INFO_STRUCT, * PTR_LBA_INFO_STRUCT;$/;"	t	typeref:struct:_lba_info_struct
MAX_MSC_DEVICE	usb\usb_core\device\sources\classes\msd\usb_msc.h	104;"	d
MAX_MSC_SUPPORTED_INTERFACES	usb\usb_core\device\sources\classes\msd\usb_msc.h	105;"	d
MODE_SELECT_10_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	98;"	d
MODE_SELECT_6_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	99;"	d
MODE_SENSE_10_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	96;"	d
MODE_SENSE_6_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	97;"	d
MSC_CBW_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc.h	76;"	d
MSC_CSW_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc.h	77;"	d
MSC_DEVICE_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}MSC_DEVICE_STRUCT, * MSC_DEVICE_STRUCT_PTR; $/;"	t	typeref:struct:_msc_variable_struct
MSC_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}MSC_DEVICE_STRUCT, * MSC_DEVICE_STRUCT_PTR; $/;"	t	typeref:struct:_msc_variable_struct
MSC_THIRTEEN_CASE_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}MSC_THIRTEEN_CASE_STRUCT, *PTR_MSC_THIRTEEN_CASE_STRUCT;$/;"	t	typeref:struct:_msc_thirteen_case_check
MSD_RECV_BUFFER_SIZE	usb\usb_core\device\sources\classes\msd\usb_msc.h	58;"	d
MSD_SEND_BUFFER_SIZE	usb\usb_core\device\sources\classes\msd\usb_msc.h	59;"	d
PHASE_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc.h	81;"	d
PREVENT_ALLOW_MEDIUM_REM_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	92;"	d
PTR_CBW	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}CBW, *PTR_CBW ;$/;"	t	typeref:struct:_usb_msc_cbw
PTR_CSW	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}CSW, *PTR_CSW;$/;"	t	typeref:struct:_usb_msc_csw
PTR_LBA_INFO_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}LBA_INFO_STRUCT, * PTR_LBA_INFO_STRUCT;$/;"	t	typeref:struct:_lba_info_struct
PTR_MSC_THIRTEEN_CASE_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^}MSC_THIRTEEN_CASE_STRUCT, *PTR_MSC_THIRTEEN_CASE_STRUCT;$/;"	t	typeref:struct:_msc_thirteen_case_check
PUT_REQUESTS	usb\usb_core\device\sources\classes\msd\usb_msc.h	66;"	d
READ_10_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	86;"	d
READ_12_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	87;"	d
READ_CAPACITY_10_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	94;"	d
READ_FORMAT_CAPACITIES_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	95;"	d
REQUEST_SENSE_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	88;"	d
SEND_DIAGNOSTIC_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	100;"	d
START_STOP_UNIT_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	102;"	d
TEST_UNIT_READY_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	89;"	d
USB_CBW_DIRECTION_BIT	usb\usb_core\device\sources\classes\msd\usb_msc.h	74;"	d
USB_CBW_DIRECTION_SHIFT	usb\usb_core\device\sources\classes\msd\usb_msc.h	75;"	d
USB_DCBWSIGNATURE	usb\usb_core\device\sources\classes\msd\usb_msc.h	72;"	d
USB_DCSWSIGNATURE	usb\usb_core\device\sources\classes\msd\usb_msc.h	73;"	d
USB_MSC_Bulk_Recv_Data	usb\usb_core\device\sources\classes\msd\usb_msc.h	261;"	d
USB_MSC_Bulk_Send_Data	usb\usb_core\device\sources\classes\msd\usb_msc.h	259;"	d
USB_MSD_CLASS_INFO	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^	USB_MSD_CLASS_INFO,$/;"	e	enum:__anon15
USB_MSD_DESC_INFO_T	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^ }USB_MSD_DESC_INFO_T;$/;"	t	typeref:enum:__anon15
USB_MSD_EP_COUNT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_MSD_EP_COUNT = 1,$/;"	e	enum:__anon15
USB_MSD_INTERFACE_COUNT	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_MSD_INTERFACE_COUNT,$/;"	e	enum:__anon15
VERIFY_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	101;"	d
WRITE_10_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	90;"	d
WRITE_12_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc.h	91;"	d
_USB_MSC_H	usb\usb_core\device\sources\classes\msd\usb_msc.h	36;"	d
_lba_info_struct	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^typedef struct _lba_info_struct$/;"	s
_msc_thirteen_case_check	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^typedef struct _msc_thirteen_case_check$/;"	s
_msc_variable_struct	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^typedef struct _msc_variable_struct$/;"	s
_usb_msc_cbw	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^typedef struct _usb_msc_cbw   \/* Command Block Wrapper -- 31 bytes *\/$/;"	s
_usb_msc_csw	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^typedef struct _usb_msc_csw   \/* Command Status Wrapper -- 13 bytes *\/$/;"	s
buffer_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t*             buffer_ptr;$/;"	m	struct:_msc_thirteen_case_check
bulk_in_endpoint	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t                                    bulk_in_endpoint;$/;"	m	struct:_msc_variable_struct
bulk_in_endpoint_packet_size	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t                                   bulk_in_endpoint_packet_size;$/;"	m	struct:_msc_variable_struct
bulk_out_endpoint	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t                                    bulk_out_endpoint;$/;"	m	struct:_msc_variable_struct
cb_length	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              cb_length;        \/*14   : bCBWCBLength*\/$/;"	m	struct:_usb_msc_cbw
cbw_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    PTR_CBW                                    cbw_ptr;    $/;"	m	struct:_msc_variable_struct
cbw_valid_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       cbw_valid_flag;$/;"	m	struct:_msc_variable_struct
class_handle	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_CLASS_HANDLE                           class_handle;$/;"	m	struct:_msc_variable_struct
class_specific_callback	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:_msc_variable_struct
command_block	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              command_block[16];\/*15-30 : CBWCB*\/$/;"	m	struct:_usb_msc_cbw
controller_handle	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    _usb_device_handle                         controller_handle;$/;"	m	struct:_msc_variable_struct
csw_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    PTR_CSW                                    csw_ptr;$/;"	m	struct:_msc_variable_struct
csw_residue_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t*            csw_residue_ptr;$/;"	m	struct:_msc_thirteen_case_check
csw_status	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              csw_status; \/*12 : bCSWStatus*\/$/;"	m	struct:_usb_msc_csw
csw_status_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t*             csw_status_ptr;$/;"	m	struct:_msc_thirteen_case_check
current_offset	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t                                   current_offset;$/;"	m	struct:_msc_variable_struct
data_length	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             data_length;      \/*8-11 : dCBWDataTransferLength*\/$/;"	m	struct:_usb_msc_cbw
desc_callback_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;  $/;"	m	struct:_msc_variable_struct
device_expected_data_len	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             device_expected_data_len;$/;"	m	struct:_msc_thirteen_case_check
device_expected_direction	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              device_expected_direction;$/;"	m	struct:_msc_thirteen_case_check
device_info	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    DEVICE_LBA_INFO_STRUCT                     device_info;$/;"	m	struct:_msc_variable_struct
ep	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_CLASS_MSC_ENDPOINT*                    ep;$/;"	m	struct:_msc_variable_struct
ep_desc_data	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_ENDPOINTS*                             ep_desc_data;$/;"	m	struct:_msc_variable_struct
flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              flag;             \/*12   : bmCBWFlags*\/$/;"	m	struct:_usb_msc_cbw
handle	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    _usb_device_handle   handle;$/;"	m	struct:_msc_thirteen_case_check
host_expected_data_len	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             host_expected_data_len;$/;"	m	struct:_msc_thirteen_case_check
host_expected_direction	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              host_expected_direction;$/;"	m	struct:_msc_thirteen_case_check
in_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       in_flag;$/;"	m	struct:_msc_variable_struct
in_stall_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       in_stall_flag;$/;"	m	struct:_msc_variable_struct
lba_info	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    LBA_INFO_STRUCT      lba_info;$/;"	m	struct:_msc_thirteen_case_check
lba_transfer_num	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             lba_transfer_num;\/* number of LBAs to transfer *\/    $/;"	m	struct:_lba_info_struct
lba_txrx_select	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                 lba_txrx_select;$/;"	m	struct:_msc_thirteen_case_check
lun	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t                                    lun;$/;"	m	struct:_msc_variable_struct
lun	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint8_t              lun;              \/*13   : bCBWLUN(bits 3 to 0)*\/$/;"	m	struct:_usb_msc_cbw
msc_application_callback	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_APPLICATION_CALLBACK_STRUCT            msc_application_callback;$/;"	m	struct:_msc_variable_struct
msc_endpoint_data	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_CLASS_MSC_ENDPOINT_DATA                msc_endpoint_data;$/;"	m	struct:_msc_variable_struct
msc_handle	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    MSD_HANDLE                                 msc_handle;$/;"	m	struct:_msc_variable_struct
msd_buff	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    MSD_BUFF_INFO                              msd_buff;$/;"	m	struct:_msc_variable_struct
out_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       out_flag; $/;"	m	struct:_msc_variable_struct
out_stall_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       out_stall_flag;$/;"	m	struct:_msc_variable_struct
re_stall_flag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    bool                                       re_stall_flag;$/;"	m	struct:_msc_variable_struct
residue	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             residue;   \/*8-11 : dCSWDataResidue*\/$/;"	m	struct:_usb_msc_csw
scsi_object_ptr	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    void*                                      scsi_object_ptr;$/;"	m	struct:_msc_variable_struct
signature	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             signature;        \/*0-3  : dCBWSignature*\/$/;"	m	struct:_usb_msc_cbw
signature	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             signature; \/*0-3  : dCSWSignature*\/$/;"	m	struct:_usb_msc_csw
starting_lba	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             starting_lba;\/* LBA to start transfering with *\/$/;"	m	struct:_lba_info_struct
tag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             tag;              \/*4-7  : dCBWTag*\/$/;"	m	struct:_usb_msc_cbw
tag	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t             tag;       \/*4-7 : dCSWTag*\/$/;"	m	struct:_usb_msc_csw
transfer_remaining	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t                                   transfer_remaining;$/;"	m	struct:_msc_variable_struct
usb_max_suported_interfaces	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    uint32_t                                   usb_max_suported_interfaces;$/;"	m	struct:_msc_variable_struct
user_handle	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^	uint32_t                                   user_handle;$/;"	m	struct:_msc_variable_struct
vendor_req_callback	usb\usb_core\device\sources\classes\msd\usb_msc.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback;            $/;"	m	struct:_msc_variable_struct
USB_MSC_SCSI_Deinit	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t USB_MSC_SCSI_Deinit$/;"	f
USB_MSC_SCSI_Init	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t USB_MSC_SCSI_Init$/;"	f
inquiry_info	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^INQUIRY_DATA_STRUCT inquiry_info = \/* constant *\/$/;"	v
msc_format_unit_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_format_unit_command$/;"	f
msc_inquiry_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_inquiry_command$/;"	f
msc_mode_select_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_mode_select_command$/;"	f
msc_mode_sense_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_mode_sense_command$/;"	f
msc_prevent_allow_medium_removal	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_prevent_allow_medium_removal$/;"	f
msc_read_capacity_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_read_capacity_command$/;"	f
msc_read_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_read_command $/;"	f
msc_read_format_capacity_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_read_format_capacity_command$/;"	f
msc_request_sense_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_request_sense_command $/;"	f
msc_send_diagnostic_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_send_diagnostic_command$/;"	f
msc_start_stop_unit_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_start_stop_unit_command$/;"	f
msc_test_unit_ready_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_test_unit_ready_command$/;"	f
msc_thirteen_cases_check	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_thirteen_cases_check(MSC_DEVICE_STRUCT_PTR  msc_obj_ptr,$/;"	f
msc_unsupported_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_unsupported_command$/;"	f
msc_verify_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_verify_command$/;"	f
msc_write_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.c	/^uint8_t msc_write_command$/;"	f
ABORTED_COMMAND	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	61;"	d
ADDITIONAL_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	92;"	d
BLANK_CHECK	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	59;"	d
BULK_OUT_ENDPOINT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	95;"	d
CAPACITY_LIST_HEADER_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}CAPACITY_LIST_HEADER_STRUCT, *PTR_CAPACITY_LIST_HEADER_STRUCT;$/;"	t	typeref:struct:_capacity_list_header
CURR_MAX_CAPACITY_DESC_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}CURR_MAX_CAPACITY_DESC_STRUCT, *PTR_CURR_MAX_CAPACITY_DESC_STRUCT;$/;"	t	typeref:struct:_curr_max_capacity_desc
DATA_PROTECT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	58;"	d
FORMATTABLE_CAP_DESC	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}FORMATTABLE_CAP_DESC, *PTR_FORMATTABLE_CAP_DESC;$/;"	t	typeref:struct:_formattable_cap_desc
FORMATTED_MEDIA	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	78;"	d
HARDWARE_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	55;"	d
ILLEGAL_REQUEST	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	56;"	d
INQUIRY_ALLOCATION_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	82;"	d
INQUIRY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}INQUIRY_COMMAND_STRUCT, * PTR_INQUIRY_COMMAND_STRUCT;$/;"	t	typeref:struct:_inquiry_command
INQUIRY_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} INQUIRY_DATA_STRUCT, *PTR_INQUIRY_DATA_STRUCT;$/;"	t	typeref:struct:_inquiry_data
INVALID_COMMAND_OPCODE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	66;"	d
INVALID_FIELD_IN_COMMAND_PKT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	70;"	d
LBA_OUT_OF_RANGE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	71;"	d
LOAD_EJECT_START_MASK	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	77;"	d
MEDIUM_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	54;"	d
MISCOMPARE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	63;"	d
MODE_PARAMETER_HEADER_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}MODE_PARAMETER_HEADER_STRUCT, *PTR_MODE_PARAMETER_HEADER_STRUCT;$/;"	t	typeref:struct:_mode_parameter_header
MSC_SCSI_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}MSC_SCSI_STRUCT, * MSC_SCSI_STRUCT_PTR; $/;"	t	typeref:struct:_msc_scsi_variable_struct
MSC_SCSI_STRUCT_PTR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}MSC_SCSI_STRUCT, * MSC_SCSI_STRUCT_PTR; $/;"	t	typeref:struct:_msc_scsi_variable_struct
NOT_READY	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	53;"	d
NO_CARTRIDGE_IN_DRIVE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	80;"	d
NO_SENSE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	51;"	d
PERIPHERAL_DEVICE_TYPE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	89;"	d
PERIPHERAL_QUALIFIER	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	86;"	d
PERIPHERAL_QUALIFIER_SHIFT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	87;"	d
PREVENT_ALLOW_REMOVAL_MASK	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	76;"	d
PTR_CAPACITY_LIST_HEADER_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}CAPACITY_LIST_HEADER_STRUCT, *PTR_CAPACITY_LIST_HEADER_STRUCT;$/;"	t	typeref:struct:_capacity_list_header
PTR_CURR_MAX_CAPACITY_DESC_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}CURR_MAX_CAPACITY_DESC_STRUCT, *PTR_CURR_MAX_CAPACITY_DESC_STRUCT;$/;"	t	typeref:struct:_curr_max_capacity_desc
PTR_FORMATTABLE_CAP_DESC	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}FORMATTABLE_CAP_DESC, *PTR_FORMATTABLE_CAP_DESC;$/;"	t	typeref:struct:_formattable_cap_desc
PTR_INQUIRY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}INQUIRY_COMMAND_STRUCT, * PTR_INQUIRY_COMMAND_STRUCT;$/;"	t	typeref:struct:_inquiry_command
PTR_INQUIRY_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} INQUIRY_DATA_STRUCT, *PTR_INQUIRY_DATA_STRUCT;$/;"	t	typeref:struct:_inquiry_data
PTR_MODE_PARAMETER_HEADER_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}MODE_PARAMETER_HEADER_STRUCT, *PTR_MODE_PARAMETER_HEADER_STRUCT;$/;"	t	typeref:struct:_mode_parameter_header
PTR_READ_CAPACITY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} READ_CAPACITY_COMMAND_STRUCT, *PTR_READ_CAPACITY_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_capacity_command
PTR_READ_CAPACITY_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}READ_CAPACITY_DATA_STRUCT, * PTR_READ_CAPACITY_DATA_STRUCT; $/;"	t	typeref:struct:_read_capacity_data
PTR_READ_FORMAT_CAPACITY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} READ_FORMAT_CAPACITY_COMMAND_STRUCT, *PTR_READ_FORMAT_CAPACITY_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_format_capacity_command
PTR_READ_WRITE_10_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}READ_WRITE_10_COMMAND_STRUCT, *PTR_READ_WRITE_10_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_write_10_command
PTR_REQUEST_SENSE_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}REQUEST_SENSE_COMMAND_STRUCT, * PTR_REQUEST_SENSE_COMMAND_STRUCT;$/;"	t	typeref:struct:_request_sense_command
PTR_REQUEST_SENSE_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}REQUEST_SENSE_DATA_STRUCT, *PTR_REQUEST_SENSE_DATA_STRUCT;$/;"	t	typeref:struct:_request_sense_data
READ_CAPACITY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} READ_CAPACITY_COMMAND_STRUCT, *PTR_READ_CAPACITY_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_capacity_command
READ_CAPACITY_DATA_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	84;"	d
READ_CAPACITY_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}READ_CAPACITY_DATA_STRUCT, * PTR_READ_CAPACITY_DATA_STRUCT; $/;"	t	typeref:struct:_read_capacity_data
READ_FORMAT_CAPACITY_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^} READ_FORMAT_CAPACITY_COMMAND_STRUCT, *PTR_READ_FORMAT_CAPACITY_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_format_capacity_command
READ_WRITE_10_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}READ_WRITE_10_COMMAND_STRUCT, *PTR_READ_WRITE_10_COMMAND_STRUCT;$/;"	t	typeref:struct:_read_write_10_command
RECOVERED_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	52;"	d
REMOVABLE_MEDIUM_BIT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	90;"	d
REMOVABLE_MEDIUM_BIT_SHIFT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	91;"	d
REQUEST_SENSE_COMMAND_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}REQUEST_SENSE_COMMAND_STRUCT, * PTR_REQUEST_SENSE_COMMAND_STRUCT;$/;"	t	typeref:struct:_request_sense_command
REQUEST_SENSE_DATA_STRUCT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^}REQUEST_SENSE_DATA_STRUCT, *PTR_REQUEST_SENSE_DATA_STRUCT;$/;"	t	typeref:struct:_request_sense_data
REQ_SENSE_ADDITIONAL_SENSE_LEN	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	75;"	d
REQ_SENSE_DATA_LENGTH	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	83;"	d
REQ_SENSE_VALID_ERROR_CODE	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	74;"	d
SPC_VERSION	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	88;"	d
SUPPORT_DISK_LOCKING_MECHANISM	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	93;"	d
UNFORMATTED_MEDIA	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	79;"	d
UNIT_ATTENTION	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	57;"	d
UNKNOWN_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	69;"	d
UNRECOVERED_READ_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	68;"	d
VENDOR_SPECIFIC_ERROR	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	60;"	d
VOLUME_OVERFLOW	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	62;"	d
WRITE_FAULT	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	67;"	d
_USB_MSC_SCSI_H	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	36;"	d
_capacity_list_header	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _capacity_list_header$/;"	s
_curr_max_capacity_desc	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _curr_max_capacity_desc$/;"	s
_formattable_cap_desc	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _formattable_cap_desc$/;"	s
_inquiry_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _inquiry_command$/;"	s
_inquiry_data	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _inquiry_data  \/* 36 bytes structure *\/$/;"	s
_mode_parameter_header	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _mode_parameter_header$/;"	s
_msc_scsi_variable_struct	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _msc_scsi_variable_struct$/;"	s
_read_capacity_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _read_capacity_command $/;"	s
_read_capacity_data	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _read_capacity_data  \/* 8 bytes structure *\/$/;"	s
_read_format_capacity_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _read_format_capacity_command $/;"	s
_read_write_10_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _read_write_10_command $/;"	s
_request_sense_command	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _request_sense_command$/;"	s
_request_sense_data	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^typedef struct _request_sense_data \/* 18 bytes structure *\/$/;"	s
add_sense_code	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t add_sense_code;\/*Provides additional information about the $/;"	m	struct:_request_sense_data
add_sense_code_qual	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t add_sense_code_qual;\/*Provides additional info related to additional$/;"	m	struct:_request_sense_data
add_sense_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t add_sense_len;\/*number of additional sense bytes that follow this $/;"	m	struct:_request_sense_data
additional_length	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t additional_length;\/*the number of additional bytes in the response).$/;"	m	struct:_inquiry_data
alloc_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint16_t alloc_len; \/*Allocation length (MSB) :byte 7; $/;"	m	struct:_read_format_capacity_command
alloc_length	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   alloc_length; \/* allocation length : 0x24H*\/$/;"	m	struct:_inquiry_command
alloc_length	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   alloc_length; \/* specs say it to be 252 bytes, $/;"	m	struct:_request_sense_command
block_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t block_len;\/*byte 4 : reserved; $/;"	m	struct:_formattable_cap_desc
block_size	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint32_t block_size; \/* in bytes *\/$/;"	m	struct:_read_capacity_data
bque	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t bque;\/*Bit 7: BQUE (0 = no support for basic task management) $/;"	m	struct:_inquiry_data
capacity_list_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t capacity_list_len;\/*specifies the length in bytes of the Capacity $/;"	m	struct:_capacity_list_header
command_specific_info	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t command_specific_info[4];$/;"	m	struct:_request_sense_data
desc_code_and_block_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t desc_code_and_block_len;$/;"	m	struct:_curr_max_capacity_desc
field_rep_uint_code	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t field_rep_uint_code;\/*Identifies a failed component. Set to zero if $/;"	m	struct:_request_sense_data
formatted_disk	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    bool formatted_disk;$/;"	m	struct:_msc_scsi_variable_struct
implementing_disk_drive	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t implementing_disk_drive;$/;"	m	struct:_msc_scsi_variable_struct
information	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t information[4];\/*Device-specific or command-specific info*\/$/;"	m	struct:_request_sense_data
last_logical_block_address	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint32_t last_logical_block_address;\/*last LBA number*\/$/;"	m	struct:_read_capacity_data
lba	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t lba; \/* LOgical Block Address : 4 bytes *\/$/;"	m	struct:_read_capacity_command
lba	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t lba;$/;"	m	struct:_read_write_10_command
length_of_each_lab	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t length_of_each_lab;$/;"	m	struct:_msc_scsi_variable_struct
lun	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t lun; \/* LUN : bits 7-5*\/$/;"	m	struct:_read_format_capacity_command
lun	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   lun;    \/* Logical Unit Number: bits 7-5, rest resrved *\/$/;"	m	struct:_request_sense_command
lun_adr	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t lun_adr; \/* LUN : bits 7-5, RelAdr : bit 0*\/$/;"	m	struct:_read_capacity_command
lun_dpo_fua_adr	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t lun_dpo_fua_adr;\/*LUN:bits7-5, DPO:bit4, FUA:bit3, RelAdr:bit0*\/ $/;"	m	struct:_read_write_10_command
lun_evpd	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   lun_evpd;    \/* Logical Unit Number: bits 7-5, EVPD: bit 0 *\/$/;"	m	struct:_inquiry_command
medium_type_code	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t medium_type_code;\/*specifies the inserted medium type. The value in $/;"	m	struct:_mode_parameter_header
mode_data_len	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint16_t mode_data_len;\/*for MODE SELECT command, the mode data length field$/;"	m	struct:_mode_parameter_header
num_blocks	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t num_blocks; \/*byte 0-3 = total number of addressable blocks for the $/;"	m	struct:_curr_max_capacity_desc
num_blocks	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t num_blocks;\/*byte 0-3 : fields indicates the number of addressable $/;"	m	struct:_formattable_cap_desc
opcode	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t opcode; \/* operation code : 0x23H*\/$/;"	m	struct:_read_format_capacity_command
opcode	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t opcode; \/* operation code : 0x25H*\/$/;"	m	struct:_read_capacity_command
opcode	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t opcode; \/* operation code : 0x28H(read), 0x2A(write)*\/$/;"	m	struct:_read_write_10_command
opcode	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   opcode; \/* operation code : 0x03H*\/$/;"	m	struct:_request_sense_command
opcode	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   opcode; \/* operation code : 0x12H*\/$/;"	m	struct:_inquiry_command
page_code	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   page_code; $/;"	m	struct:_inquiry_command
peripheral	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t peripheral;\/*Bits 7..5: PERIPHERAL QUALIFIER (000 = a device is $/;"	m	struct:_inquiry_data
pmi	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t pmi; \/* always set to zero for UFI devices *\/$/;"	m	struct:_read_capacity_command
product_id	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t product_id[16]; \/*PRODUCT IDENTIFICATION, MSB first*\/$/;"	m	struct:_inquiry_data
product_rev_level	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t product_rev_level[4];\/*PRODUCT REVISION LEVEL, MSB first*\/$/;"	m	struct:_inquiry_data
request_sense	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    REQUEST_SENSE_DATA_STRUCT request_sense;$/;"	m	struct:_msc_scsi_variable_struct
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1; \/* obsolete *\/$/;"	m	struct:_request_sense_data
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1;$/;"	m	struct:_read_write_10_command
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1[2]; \/* 2 bytes are reserved *\/$/;"	m	struct:_read_capacity_command
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1[3];$/;"	m	struct:_capacity_list_header
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1[4];                        $/;"	m	struct:_mode_parameter_header
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved1[5]; $/;"	m	struct:_read_format_capacity_command
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   reserved1;  \/* 1 bytes are reserved *\/$/;"	m	struct:_inquiry_command
reserved1	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   reserved1[2];  \/* 2 bytes are reserved *\/$/;"	m	struct:_request_sense_command
reserved2	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved2[3];    $/;"	m	struct:_read_format_capacity_command
reserved2	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved2[3];$/;"	m	struct:_read_write_10_command
reserved2	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t reserved2[3];\/* 3 bytes are reserved *\/$/;"	m	struct:_read_capacity_command
reserved2	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   reserved2[7];\/* reserved and pad bits *\/   $/;"	m	struct:_inquiry_command
reserved2	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^   uint8_t   reserved2[7];\/* reserved and pad bits *\/   $/;"	m	struct:_request_sense_command
response_data_format	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t response_data_format;\/*Bits 7..6: obsolete $/;"	m	struct:_inquiry_data
rmb	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t rmb;\/*Bit 7: RMB (0 = non-removable media; 1 = removable media) $/;"	m	struct:_inquiry_data
sccs	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t sccs;\/*Bit 7: SCCS (0 = no embedded storage array controller $/;"	m	struct:_inquiry_data
scsi_callback	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT scsi_callback;$/;"	m	struct:_msc_scsi_variable_struct
sense_key	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t sense_key;\/*Bit7: FILEMARK. Used by streaming devices. $/;"	m	struct:_request_sense_data
sense_key_specific	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t sense_key_specific[3];\/*If byte 15, bit7(SKSV) equals 1,remainder of$/;"	m	struct:_request_sense_data
thirteen_case_ptr	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    PTR_MSC_THIRTEEN_CASE_STRUCT thirteen_case_ptr;$/;"	m	struct:_msc_scsi_variable_struct
total_logical_add_block	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint32_t total_logical_add_block;$/;"	m	struct:_msc_scsi_variable_struct
transfer_length_lsb	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t transfer_length_lsb;$/;"	m	struct:_read_write_10_command
transfer_length_msb	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t transfer_length_msb;$/;"	m	struct:_read_write_10_command
valid_error_code	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t valid_error_code;\/*bit 7: VALID. Set to 1 if the INFORMATION field$/;"	m	struct:_request_sense_data
vendor_info	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t vendor_info[8]; \/*T10 VENDOR IDENTIFICATION, MSB first *\/$/;"	m	struct:_inquiry_data
version	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t version;\/*VERSION of SPC standard (5 = SPC-3; 4 = SPC-2) *\/     $/;"	m	struct:_inquiry_data
wbus	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t wbus;\/*Bit 7..6: obsolete $/;"	m	struct:_inquiry_data
wp_dpofua	usb\usb_core\device\sources\classes\msd\usb_msc_scsi.h	/^    uint8_t wp_dpofua;\/* bit7:wp:write protect(ignored for mode select command)$/;"	m	struct:_mode_parameter_header
USB_Class_PHDC_Cancel	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^USB_STATUS USB_Class_PHDC_Cancel$/;"	f
USB_Class_PHDC_Deinit	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^USB_STATUS USB_Class_PHDC_Deinit$/;"	f
USB_Class_PHDC_Event	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^void USB_Class_PHDC_Event$/;"	f
USB_Class_PHDC_Init	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^USB_STATUS USB_Class_PHDC_Init$/;"	f
USB_Class_PHDC_Recv_Data	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^uint8_t USB_Class_PHDC_Recv_Data$/;"	f
USB_Class_PHDC_Send_Data	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^uint8_t USB_Class_PHDC_Send_Data$/;"	f
USB_PHDC_Endpoint_Service	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^void USB_PHDC_Endpoint_Service$/;"	f
USB_PHDC_Requests	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^uint8_t USB_PHDC_Requests$/;"	f
USB_Phdc_Get_Device_Ptr	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^static PHDC_DEVICE_STRUCT_PTR USB_Phdc_Get_Device_Ptr(PHDC_HANDLE handle)$/;"	f	file:
msg_preamble_signature	usb\usb_core\device\sources\classes\phdc\usb_phdc.c	/^    static char msg_preamble_signature[17] = "PhdcQoSSignature";$/;"	v	file:
CLEAR_FEATURE_REQUEST	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	54;"	d
GET_STATUS_REQUEST	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	55;"	d
INVALID_VAL	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	56;"	d
MAX_PHDC_DEVICE	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	58;"	d
MAX_QOS_BIN_ELEMS	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	48;"	d
METADATA_HEADER_SIZE	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	119;"	d
METADATA_PREAMBLE_SIGNATURE	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	117;"	d
METADATA_QOSENCODING_VERSION	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	118;"	d
PACKED_STRUCT_END	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^PACKED_STRUCT_END;$/;"	v	typeref:struct:_usb_class_phdc_qos_bin
PHDC_DEVICE_STRUCT	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}PHDC_DEVICE_STRUCT, * PHDC_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:_phdc_struct
PHDC_DEVICE_STRUCT_PTR	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}PHDC_DEVICE_STRUCT, * PHDC_DEVICE_STRUCT_PTR;$/;"	t	typeref:struct:_phdc_struct
PHDC_RX_ENDPOINTS	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	50;"	d
PHDC_TX_ENDPOINTS	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	52;"	d
PTR_USB_APP_EVENT_METADATA_PARAMS	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_APP_EVENT_METADATA_PARAMS, *PTR_USB_APP_EVENT_METADATA_PARAMS;$/;"	t	typeref:struct:_usb_app_event_metadata_params
PTR_USB_CLASS_PHDC_ENDPOINT_DATA	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_CLASS_PHDC_ENDPOINT_DATA, *PTR_USB_CLASS_PHDC_ENDPOINT_DATA; $/;"	t	typeref:struct:_usb_class_phdc_endpoint_data
PTR_USB_CLASS_PHDC_QOS_BIN	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_class_phdc_qos_bin USB_CLASS_PHDC_QOS_BIN, *PTR_USB_CLASS_PHDC_QOS_BIN;$/;"	t	typeref:struct:
SET_FEATURE_REQUEST	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	53;"	d
USB_APP_EVENT_METADATA_PARAMS	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_APP_EVENT_METADATA_PARAMS, *PTR_USB_APP_EVENT_METADATA_PARAMS;$/;"	t	typeref:struct:_usb_app_event_metadata_params
USB_CLASS_PHDC_ENDPOINT_DATA	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_CLASS_PHDC_ENDPOINT_DATA, *PTR_USB_CLASS_PHDC_ENDPOINT_DATA; $/;"	t	typeref:struct:_usb_class_phdc_endpoint_data
USB_CLASS_PHDC_QOS_BIN	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_class_phdc_qos_bin USB_CLASS_PHDC_QOS_BIN, *PTR_USB_CLASS_PHDC_QOS_BIN;$/;"	t	typeref:struct:_usb_class_phdc_qos_bin
USB_CLASS_PHDC_RX_ENDPOINT	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_CLASS_PHDC_RX_ENDPOINT;$/;"	t	typeref:struct:_usb_class_phdc_rx_endpoint
USB_CLASS_PHDC_TX_ENDPOINT	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_CLASS_PHDC_TX_ENDPOINT;$/;"	t	typeref:struct:_usb_class_phdc_tx_endpoint
USB_META_DATA_MSG_PREAMBLE	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^}USB_META_DATA_MSG_PREAMBLE;$/;"	t	typeref:struct:_usb_meta_data_msg_preamble
USB_SET_REQUEST_MASK	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	57;"	d
_USB_PHDC_H	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	35;"	d
_phdc_struct	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _phdc_struct$/;"	s
_usb_app_event_metadata_params	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_app_event_metadata_params $/;"	s
_usb_class_phdc_endpoint_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_class_phdc_endpoint_data $/;"	s
_usb_class_phdc_qos_bin	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^struct _usb_class_phdc_qos_bin $/;"	s
_usb_class_phdc_rx_endpoint	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_class_phdc_rx_endpoint $/;"	s
_usb_class_phdc_tx_endpoint	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_class_phdc_tx_endpoint $/;"	s
_usb_meta_data_msg_preamble	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^typedef struct _usb_meta_data_msg_preamble $/;"	s
app_buff	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t*                    app_buff;   \/* buffer to send *\/$/;"	m	struct:_usb_class_phdc_qos_bin
bin_consumer	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     bin_consumer;       \/* num of dequeued transfers *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
bin_producer	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     bin_producer;       \/* num of queued transfers *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
buff_ptr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t*                    buff_ptr;$/;"	m	struct:_usb_class_phdc_rx_endpoint
buffer_size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint16_t                    buffer_size;$/;"	m	struct:_usb_class_phdc_rx_endpoint
channel	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     channel;    \/* endpoint num *\/$/;"	m	struct:_usb_class_phdc_qos_bin
channel	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     channel;$/;"	m	struct:_usb_app_event_metadata_params
class_handle	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_HANDLE                           class_handle;$/;"	m	struct:_phdc_struct
class_specific_callback	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_SPECIFIC_HANDLER_CALLBACK_STRUCT class_specific_callback;$/;"	m	struct:_phdc_struct
count_rx	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     count_rx;$/;"	m	struct:_usb_class_phdc_endpoint_data
count_tx	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     count_tx;     $/;"	m	struct:_usb_class_phdc_endpoint_data
current_qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     current_qos;        \/* from received meta data *\/    $/;"	m	struct:_usb_class_phdc_rx_endpoint
current_qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     current_qos;        \/* from received meta data *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
desc_callback_ptr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    DESC_REQUEST_NOFIFY_STRUCT_PTR             desc_callback_ptr;$/;"	m	struct:_phdc_struct
endpoint	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     endpoint;           \/* from the application *\/$/;"	m	struct:_usb_class_phdc_rx_endpoint
endpoint	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     endpoint;           \/* from the application *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
ep_desc_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_ENDPOINTS*                             ep_desc_data;$/;"	m	struct:_phdc_struct
ep_rx	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_PHDC_RX_ENDPOINT* ep_rx;  $/;"	m	struct:_usb_class_phdc_endpoint_data
ep_tx	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_PHDC_TX_ENDPOINT* ep_tx;$/;"	m	struct:_usb_class_phdc_endpoint_data
handle	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    _usb_device_handle                         handle;$/;"	m	struct:_phdc_struct
handle	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    _usb_device_handle          handle;$/;"	m	struct:_usb_class_phdc_endpoint_data
meta_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    bool                        meta_data;  \/* packet is a meta data or not *\/$/;"	m	struct:_usb_class_phdc_qos_bin
meta_data_msg_preamble	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_META_DATA_MSG_PREAMBLE                 meta_data_msg_preamble; $/;"	m	struct:_phdc_struct
metadata_ptr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t*                    metadata_ptr;$/;"	m	struct:_usb_app_event_metadata_params
num_tfr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     num_tfr;    \/* num of transfers that follow the meta data packet.$/;"	m	struct:_usb_class_phdc_qos_bin
num_tfr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     num_tfr;$/;"	m	struct:_usb_app_event_metadata_params
num_tfr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     num_tfr;$/;"	m	struct:_usb_meta_data_msg_preamble
opaque_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     opaque_data[1];$/;"	m	struct:_usb_meta_data_msg_preamble
opaque_data_size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     opaque_data_size;$/;"	m	struct:_usb_meta_data_msg_preamble
phdc_application_callback	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_APPLICATION_CALLBACK_STRUCT            phdc_application_callback;$/;"	m	struct:_phdc_struct
phdc_endpoint_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_PHDC_ENDPOINT_DATA               phdc_endpoint_data;$/;"	m	struct:_phdc_struct
phdc_ep_has_data	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint16_t                                   phdc_ep_has_data;$/;"	m	struct:_phdc_struct
phdc_metadata	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    bool                                       phdc_metadata;$/;"	m	struct:_phdc_struct
qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     qos;                \/* from the application *\/$/;"	m	struct:_usb_class_phdc_rx_endpoint
qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     qos;                \/* from the application *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     qos;        \/* qos of the transfers that follow the meta data packet *\/$/;"	m	struct:_usb_class_phdc_qos_bin
qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     qos;$/;"	m	struct:_usb_app_event_metadata_params
qos	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     qos;$/;"	m	struct:_usb_meta_data_msg_preamble
qos_bin	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_CLASS_PHDC_QOS_BIN      qos_bin[MAX_QOS_BIN_ELEMS]; $/;"	m	struct:_usb_class_phdc_tx_endpoint
service_buff_ptr	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t*                                   service_buff_ptr; $/;"	m	struct:_phdc_struct
signature	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    char                        signature[METADATA_PREAMBLE_SIGNATURE];$/;"	m	struct:_usb_meta_data_msg_preamble
size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint32_t                    size;               \/* from the application *\/$/;"	m	struct:_usb_class_phdc_rx_endpoint
size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint32_t                    size;               \/* from the application *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint32_t                    size;       \/* size of the transfer *\/$/;"	m	struct:_usb_class_phdc_qos_bin
size	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint32_t                    size;$/;"	m	struct:_usb_app_event_metadata_params
transfers_left	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     transfers_left;     \/* from application meta data *\/$/;"	m	struct:_usb_class_phdc_tx_endpoint
transfers_left	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     transfers_left;     \/* from received meta data *\/$/;"	m	struct:_usb_class_phdc_rx_endpoint
type	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     type;               \/* from the application *\/ $/;"	m	struct:_usb_class_phdc_tx_endpoint
type	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     type;               \/* from the application *\/$/;"	m	struct:_usb_class_phdc_rx_endpoint
user_handle	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint32_t                                   user_handle;$/;"	m	struct:_phdc_struct
vendor_req_callback	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    USB_VENDOR_REQ_CALLBACK_STRUCT             vendor_req_callback; $/;"	m	struct:_phdc_struct
version	usb\usb_core\device\sources\classes\phdc\usb_phdc.h	/^    uint8_t                     version;$/;"	m	struct:_usb_meta_data_msg_preamble
ERREN_ENABLE_ALL	usb\usb_core\device\sources\controller\khci\khci_dev.c	112;"	d	file:
ERRSTAT_CLEAR_ALL	usb\usb_core\device\sources\controller\khci\khci_dev.c	111;"	d	file:
INTEN_BUS_RESET_VAL	usb\usb_core\device\sources\controller\khci\khci_dev.c	113;"	d	file:
ISTAT_CLEAR_ALL	usb\usb_core\device\sources\controller\khci\khci_dev.c	110;"	d	file:
KHCI_DEBUG_LOG	usb\usb_core\device\sources\controller\khci\khci_dev.c	156;"	d	file:
KHCI_DEBUG_LOG	usb\usb_core\device\sources\controller\khci\khci_dev.c	165;"	d	file:
MAX_KHCI_DEV_NUM	usb\usb_core\device\sources\controller\khci\khci_dev.c	168;"	d	file:
_usb_khci_dev_swap_buf	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static uint8_t _usb_khci_dev_swap_buf[USBCFG_KHCI_SWAP_BUF_MAX + 4] = {0};$/;"	v	file:
_usb_khci_ep_read	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static USB_STATUS _usb_khci_ep_read$/;"	f	file:
_usb_khci_ep_write	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static USB_STATUS _usb_khci_ep_write$/;"	f	file:
_usb_khci_free_XD	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^void _usb_khci_free_XD$/;"	f
_usb_khci_isr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_isr()$/;"	f	file:
_usb_khci_next_setup_token_prep	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_next_setup_token_prep(USB_KHCI_DEV_STATE_STRUCT_PTR state_ptr)$/;"	f	file:
_usb_khci_process_receive_request	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static USB_STATUS _usb_khci_process_receive_request$/;"	f	file:
_usb_khci_process_transmit_request	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static USB_STATUS _usb_khci_process_transmit_request$/;"	f	file:
_usb_khci_reset_ep_state	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static USB_STATUS _usb_khci_reset_ep_state$/;"	f	file:
_usb_khci_service_attach_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_attach_intr$/;"	f	file:
_usb_khci_service_err_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_err_intr$/;"	f	file:
_usb_khci_service_reset_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_reset_intr$/;"	f	file:
_usb_khci_service_resume_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_resume_intr$/;"	f	file:
_usb_khci_service_sleep_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_sleep_intr$/;"	f	file:
_usb_khci_service_sof_token_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_sof_token_intr$/;"	f	file:
_usb_khci_service_stall_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_stall_intr$/;"	f	file:
_usb_khci_service_tk_dne_intr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static void _usb_khci_service_tk_dne_intr$/;"	f	file:
bdt	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    __attribute__((section(".usb_bdt"))) static uint8_t bdt[512] = { 1 };$/;"	v	file:
bdt	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    __no_init static uint8_t bdt[512] @ "USB_BDT_Z";$/;"	v	file:
bdt	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^  __declspec(usb_bdt) static uint8_t bdt[512] = { 1 };    \/\/ DO NOT REMOVE INITIALIZATION !!! bug in CW (cw 7.1) - generate wrong binary code, data$/;"	v	file:
bdt	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static uint8_t *bdt;$/;"	v	file:
bdt_buf	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^static uint8_t bdt_buf[1024] = { 1 };$/;"	v	file:
dir	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    uint8_t dir;$/;"	m	struct:tk_dne_log	file:
ep_num	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    uint8_t ep_num;$/;"	m	struct:tk_dne_log	file:
g_khci_dev	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_KHCI_DEV_STATE_STRUCT g_khci_dev[MAX_KHCI_DEV_NUM] = {0};$/;"	v
g_usb_instance	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_INSTANCE_T g_usb_instance =    $/;"	v
g_zero_pkt_send	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^bool g_zero_pkt_send = FALSE;$/;"	v
len	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    uint32_t len;$/;"	m	struct:tk_dne_log	file:
pid	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^    uint8_t pid;$/;"	m	struct:tk_dne_log	file:
tdl	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^volatile static struct tk_dne_log tdl[1024] = { 0 }; \/* note, the array is for 1024 records only *\/$/;"	v	typeref:struct:tk_dne_log	file:
tdl_index	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^volatile static uint16_t tdl_index = 0;$/;"	v	file:
tk_dne_log	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^struct tk_dne_log {$/;"	s	file:
usb_dci_khci_alloc_xd	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_alloc_xd$/;"	f
usb_dci_khci_assert_resume	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_assert_resume$/;"	f
usb_dci_khci_cancel	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_cancel$/;"	f
usb_dci_khci_deinit_endpoint	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_deinit_endpoint$/;"	f
usb_dci_khci_get_endpoint_status	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_get_endpoint_status$/;"	f
usb_dci_khci_get_status	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_get_status$/;"	f
usb_dci_khci_init	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_init$/;"	f
usb_dci_khci_init_endpoint	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_init_endpoint$/;"	f
usb_dci_khci_preinit	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_preinit$/;"	f
usb_dci_khci_recv	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_recv$/;"	f
usb_dci_khci_send	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_send$/;"	f
usb_dci_khci_set_addr	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_set_addr$/;"	f
usb_dci_khci_set_endpoint_status	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_set_endpoint_status$/;"	f
usb_dci_khci_set_status	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_set_status$/;"	f
usb_dci_khci_shutdown	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_shutdown$/;"	f
usb_dci_khci_stall_endpoint	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_stall_endpoint$/;"	f
usb_dci_khci_unstall_endpoint	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_STATUS usb_dci_khci_unstall_endpoint$/;"	f
usb_dev_global_handler	usb\usb_core\device\sources\controller\khci\khci_dev.c	/^USB_KHCI_DEV_STATE_STRUCT_PTR usb_dev_global_handler;$/;"	v
KHCI_MAX_ENDPOINT	usb\usb_core\device\sources\controller\khci\khci_dev.h	36;"	d
__khci_dev_h__	usb\usb_core\device\sources\controller\khci\khci_dev.h	34;"	d
ASSERT_RESUME_DELAY_COUNT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	37;"	d
BDT_BASE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	57;"	d
BD_ADDR	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	64;"	d
BD_ADDR_RX	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	65;"	d
BD_ADDR_TX	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	66;"	d
BD_CTRL	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	60;"	d
BD_CTRL_RX	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	61;"	d
BD_CTRL_TX	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	62;"	d
BD_PTR	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	58;"	d
BYTES_1024	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	39;"	d
BYTES_512	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	38;"	d
COMPONENT_PREPARE_SHIFT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	45;"	d
ENDPOINT_NUMBER_MASK	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	41;"	d
ENDPOINT_NUMBER_SHIFT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	40;"	d
EP_DISABLE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	36;"	d
EVEN_BUFF	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	55;"	d
FRAME_HIGH_BYTE_SHIFT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	51;"	d
MAX_FS_ISO_EP_BUFFER_SIZE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	43;"	d
MAX_FS_NON_ISO_EP_BUFFER_SIZE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	42;"	d
MAX_USB_DEVICES	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	53;"	d
ODD_BUFF	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	54;"	d
SETUP_PACKET_LENGTH	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	44;"	d
USB_BD_BC	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	70;"	d
USB_BD_DATA0	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	73;"	d
USB_BD_DATA01	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	72;"	d
USB_BD_DATA1	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	74;"	d
USB_BD_DTS	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	77;"	d
USB_BD_KEEP	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	75;"	d
USB_BD_NINC	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	76;"	d
USB_BD_OWN	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	71;"	d
USB_BD_PID	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	79;"	d
USB_BD_STALL	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	78;"	d
USB_EP_INFO_STRUCT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_EP_INFO_STRUCT, * USB_EP_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_usb_ep_info_struct
USB_EP_INFO_STRUCT_PTR	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_EP_INFO_STRUCT, * USB_EP_INFO_STRUCT_PTR;$/;"	t	typeref:struct:_usb_ep_info_struct
USB_KHCI_DEV_STATE_STRUCT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_KHCI_DEV_STATE_STRUCT, * USB_KHCI_DEV_STATE_STRUCT_PTR;$/;"	t	typeref:struct:_usb_khci_device_state_struct
USB_KHCI_DEV_STATE_STRUCT_PTR	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_KHCI_DEV_STATE_STRUCT, * USB_KHCI_DEV_STATE_STRUCT_PTR;$/;"	t	typeref:struct:_usb_khci_device_state_struct
USB_SETUP_TOKEN	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	50;"	d
USB_TOKEN_TOKENPID_IN	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	84;"	d
USB_TOKEN_TOKENPID_OUT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	83;"	d
USB_TOKEN_TOKENPID_SETUP	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	85;"	d
USB_XD_QADD	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	142;"	d
USB_XD_QGET	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	151;"	d
USB_XD_QUEUE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_XD_QUEUE, * USB_XD_QUEUE_PTR;$/;"	t	typeref:struct:_usb_xd_queue
USB_XD_QUEUE_DEQUEUE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	167;"	d
USB_XD_QUEUE_DEQUEUE_SAFE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	175;"	d
USB_XD_QUEUE_ENQUEUE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	164;"	d
USB_XD_QUEUE_ENQUEUE_SAFE	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	170;"	d
USB_XD_QUEUE_GET_HEAD	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	180;"	d
USB_XD_QUEUE_GET_TAIL	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	183;"	d
USB_XD_QUEUE_INIT	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	160;"	d
USB_XD_QUEUE_PTR	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^} USB_XD_QUEUE, * USB_XD_QUEUE_PTR;$/;"	t	typeref:struct:_usb_xd_queue
ZERO_LENGTH	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	49;"	d
__khci_dev_misc_h__	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	34;"	d
_usb_ep_info_struct	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^typedef struct _usb_ep_info_struct$/;"	s
_usb_khci_device_state_struct	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^typedef struct _usb_khci_device_state_struct $/;"	s
_usb_xd_queue	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^typedef struct _usb_xd_queue$/;"	s
controller_id	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint32_t              controller_id;       \/* Device controller ID *\/$/;"	m	struct:_usb_khci_device_state_struct
data_buffer	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t*             data_buffer;$/;"	m	struct:_usb_ep_info_struct
dev_ptr	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   void*                 dev_ptr;             \/* Device Controller Register base address *\/$/;"	m	struct:_usb_khci_device_state_struct
dev_vec	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint8_t               dev_vec;             \/* Interrupt vector number for USB OTG *\/$/;"	m	struct:_usb_khci_device_state_struct
device_address	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint8_t               device_address;                                     $/;"	m	struct:_usb_khci_device_state_struct
direction	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              direction; \/* for usb_device_call_service *\/$/;"	m	struct:_usb_ep_info_struct
endpoint_status	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint16_t             endpoint_status;$/;"	m	struct:_usb_ep_info_struct
ep_info	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   USB_EP_INFO_STRUCT    ep_info[USBCFG_DEV_MAX_ENDPOINTS];$/;"	m	struct:_usb_khci_device_state_struct
ep_init_flag	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    bool                 ep_init_flag[2]; $/;"	m	struct:_usb_ep_info_struct
errors	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              errors;$/;"	m	struct:_usb_khci_device_state_struct
fifo_length	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint16_t             fifo_length;$/;"	m	struct:_usb_ep_info_struct
max_endpoints	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint8_t               max_endpoints;       \/* Max endpoints supported by this device *\/$/;"	m	struct:_usb_khci_device_state_struct
max_packet_size	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint16_t             max_packet_size;$/;"	m	struct:_usb_ep_info_struct
rx_buf_odd	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              rx_buf_odd;   \/* next buffer is odd *\/$/;"	m	struct:_usb_ep_info_struct
rx_data0	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              rx_data0;$/;"	m	struct:_usb_ep_info_struct
save_recv_addr	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint32_t             save_recv_addr;$/;"	m	struct:_usb_ep_info_struct
scratch_struct_base	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   SCRATCH_STRUCT_PTR    scratch_struct_base;$/;"	m	struct:_usb_khci_device_state_struct
setup_buff	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint8_t *             setup_buff;$/;"	m	struct:_usb_khci_device_state_struct
speed	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint8_t               speed;               \/* Low Speed, High Speed, Full Speed *\/$/;"	m	struct:_usb_khci_device_state_struct
stall_flag	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    bool                 stall_flag;$/;"	m	struct:_usb_ep_info_struct
tx_buf_odd	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              tx_buf_odd;$/;"	m	struct:_usb_ep_info_struct
tx_data0	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              tx_data0;$/;"	m	struct:_usb_ep_info_struct
type	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    uint8_t              type;$/;"	m	struct:_usb_ep_info_struct
upper_layer_handle	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   _usb_device_handle    upper_layer_handle;$/;"	m	struct:_usb_khci_device_state_struct
usb_curr_config	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              usb_curr_config;$/;"	m	struct:_usb_khci_device_state_struct
usb_dev_state_b4_suspend	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              usb_dev_state_b4_suspend;$/;"	m	struct:_usb_khci_device_state_struct
usb_device_status	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              usb_device_status;$/;"	m	struct:_usb_khci_device_state_struct
usb_sof_count	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              usb_sof_count;$/;"	m	struct:_usb_khci_device_state_struct
usb_state	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint16_t              usb_state;$/;"	m	struct:_usb_khci_device_state_struct
xd_base	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   struct xd_struct*     xd_base;$/;"	m	struct:_usb_khci_device_state_struct	typeref:struct:_usb_khci_device_state_struct::xd_struct
xd_entries	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   uint32_t              xd_entries;$/;"	m	struct:_usb_khci_device_state_struct
xd_head	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   struct xd_struct*     xd_head;             \/* Head Transaction descriptors *\/$/;"	m	struct:_usb_khci_device_state_struct	typeref:struct:_usb_khci_device_state_struct::xd_struct
xd_head_ptr	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    struct xd_struct*    xd_head_ptr;$/;"	m	struct:_usb_xd_queue	typeref:struct:_usb_xd_queue::xd_struct
xd_queue_recv	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    USB_XD_QUEUE         xd_queue_recv;$/;"	m	struct:_usb_ep_info_struct
xd_queue_send	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    USB_XD_QUEUE         xd_queue_send;  \/* FIFO queue for all XDs on this endpoint *\/   $/;"	m	struct:_usb_ep_info_struct
xd_scratch_struct_base	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   SCRATCH_STRUCT_PTR    xd_scratch_struct_base;$/;"	m	struct:_usb_khci_device_state_struct
xd_tail	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^   struct xd_struct*     xd_tail;             \/* Tail Transaction descriptors *\/$/;"	m	struct:_usb_khci_device_state_struct	typeref:struct:_usb_khci_device_state_struct::xd_struct
xd_tail_ptr	usb\usb_core\device\sources\controller\khci\khci_dev_misc.h	/^    struct xd_struct*    xd_tail_ptr;$/;"	m	struct:_usb_xd_queue	typeref:struct:_usb_xd_queue::xd_struct
_usb_khci_dev_function_table	usb\usb_core\device\sources\controller\khci_interface.c	/^const USB_DEV_INTERFACE_FUNCTIONS_STRUCT _usb_khci_dev_function_table =$/;"	v
USB_DEV_HANDLE_FREE	usb\usb_core\device\sources\controller\usb_dev.c	43;"	d	file:
USB_DEV_HANDLE_OCCUPIED	usb\usb_core\device\sources\controller\usb_dev.c	42;"	d	file:
_usb_device_call_service	usb\usb_core\device\sources\controller\usb_dev.c	/^ USB_STATUS _usb_device_call_service$/;"	f
_usb_device_get_DCI	usb\usb_core\device\sources\controller\usb_dev.c	/^void _usb_device_get_DCI(uint8_t controller_id, USB_DEV_INTERFACE_FUNCTIONS_STRUCT_PTR* controller_if_ptr)$/;"	f
_usb_device_get_handle	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_DEV_STATE_STRUCT* _usb_device_get_handle(void)$/;"	f
_usb_device_get_status	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS _usb_device_get_status$/;"	f
_usb_device_release_handle	usb\usb_core\device\sources\controller\usb_dev.c	/^void _usb_device_release_handle(USB_DEV_STATE_STRUCT *usb_dev)$/;"	f
_usb_device_set_address	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS _usb_device_set_address$/;"	f
_usb_device_set_status	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS _usb_device_set_status$/;"	f
_usb_device_shutdown	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS _usb_device_shutdown$/;"	f
g_usb_dev	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_DEV_STATE_STRUCT g_usb_dev[USBCFG_DEV_NUM] = {0};$/;"	v
usb_device_assert_resume	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_assert_resume$/;"	f
usb_device_cancel_transfer	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_cancel_transfer$/;"	f
usb_device_deinit	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_deinit$/;"	f
usb_device_deinit_endpoint	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_deinit_endpoint$/;"	f
usb_device_init	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_init$/;"	f
usb_device_init_endpoint	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_init_endpoint$/;"	f
usb_device_recv_data	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_recv_data$/;"	f
usb_device_register_application_notify	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_register_application_notify$/;"	f
usb_device_register_desc_request_notify	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_register_desc_request_notify$/;"	f
usb_device_register_service	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_register_service$/;"	f
usb_device_register_vendor_class_request_notify	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_register_vendor_class_request_notify$/;"	f
usb_device_send_data	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_send_data$/;"	f
usb_device_stall_endpoint	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_stall_endpoint$/;"	f
usb_device_unregister_service	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_unregister_service$/;"	f
usb_device_unstall_endpoint	usb\usb_core\device\sources\controller\usb_dev.c	/^USB_STATUS usb_device_unstall_endpoint$/;"	f
SERVICE_STRUCT	usb\usb_core\device\sources\controller\usb_dev.h	/^} SERVICE_STRUCT, * SERVICE_STRUCT_PTR;$/;"	t	typeref:struct:service_struct
SERVICE_STRUCT_PTR	usb\usb_core\device\sources\controller\usb_dev.h	/^} SERVICE_STRUCT, * SERVICE_STRUCT_PTR;$/;"	t	typeref:struct:service_struct
USB_DEV_INTERFACE_FUNCTIONS_STRUCT	usb\usb_core\device\sources\controller\usb_dev.h	/^} USB_DEV_INTERFACE_FUNCTIONS_STRUCT, * USB_DEV_INTERFACE_FUNCTIONS_STRUCT_PTR;$/;"	t	typeref:struct:usb_dev_interface_functions_struct
USB_DEV_INTERFACE_FUNCTIONS_STRUCT_PTR	usb\usb_core\device\sources\controller\usb_dev.h	/^} USB_DEV_INTERFACE_FUNCTIONS_STRUCT, * USB_DEV_INTERFACE_FUNCTIONS_STRUCT_PTR;$/;"	t	typeref:struct:usb_dev_interface_functions_struct
USB_DEV_STATE_STRUCT	usb\usb_core\device\sources\controller\usb_dev.h	/^} USB_DEV_STATE_STRUCT, * USB_DEV_STATE_STRUCT_PTR;$/;"	t	typeref:struct:usb_dev_state_struct
USB_DEV_STATE_STRUCT_PTR	usb\usb_core\device\sources\controller\usb_dev.h	/^} USB_DEV_STATE_STRUCT, * USB_DEV_STATE_STRUCT_PTR;$/;"	t	typeref:struct:usb_dev_state_struct
__USB_DEV_H__	usb\usb_core\device\sources\controller\usb_dev.h	35;"	d
arg	usb\usb_core\device\sources\controller\usb_dev.h	/^   void*                            arg;$/;"	m	struct:service_struct
controller_handle	usb\usb_core\device\sources\controller\usb_dev.h	/^    _usb_device_handle              controller_handle;$/;"	m	struct:usb_dev_state_struct
controller_id	usb\usb_core\device\sources\controller\usb_dev.h	/^    uint8_t                         controller_id;       \/* Device controller ID *\/$/;"	m	struct:usb_dev_state_struct
next	usb\usb_core\device\sources\controller\usb_dev.h	/^   struct service_struct*           next;$/;"	m	struct:service_struct	typeref:struct:service_struct::service_struct
occupied	usb\usb_core\device\sources\controller\usb_dev.h	/^    uint8_t                         occupied;$/;"	m	struct:usb_dev_state_struct
service	usb\usb_core\device\sources\controller\usb_dev.h	/^   USB_EVENT_SERVICE                service;$/;"	m	struct:service_struct
service_head_ptr	usb\usb_core\device\sources\controller\usb_dev.h	/^    SERVICE_STRUCT_PTR              service_head_ptr;    \/* Head struct address of registered services *\/$/;"	m	struct:usb_dev_state_struct
service_struct	usb\usb_core\device\sources\controller\usb_dev.h	/^typedef struct service_struct $/;"	s
type	usb\usb_core\device\sources\controller\usb_dev.h	/^   uint8_t                          type;$/;"	m	struct:service_struct
usb_dev_interface	usb\usb_core\device\sources\controller\usb_dev.h	/^    void*                           usb_dev_interface;$/;"	m	struct:usb_dev_state_struct
usb_dev_interface_functions_struct	usb\usb_core\device\sources\controller\usb_dev.h	/^typedef struct usb_dev_interface_functions_struct$/;"	s
usb_dev_state_struct	usb\usb_core\device\sources\controller\usb_dev.h	/^typedef struct usb_dev_state_struct {$/;"	s
usb_framework	usb\usb_core\device\sources\controller\usb_dev.h	/^    USB_CLASS_FW_OBJECT_STRUCT      usb_framework; $/;"	m	struct:usb_dev_state_struct
USB_Control_Service	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Control_Service (void* handle, PTR_USB_EVENT_STRUCT event,void* arg )$/;"	f
USB_Control_Service_Callback	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Control_Service_Callback(PTR_USB_EVENT_STRUCT event,void* arg ) $/;"	f
USB_Control_Service_Handler	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Control_Service_Handler$/;"	f
USB_Error_Service	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Error_Service(void* handle, PTR_USB_EVENT_STRUCT event, void* arg)$/;"	f
USB_Framework_GetDesc	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Framework_GetDesc($/;"	f
USB_Framework_Periodic_Task	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Framework_Periodic_Task(void)$/;"	f
USB_Framework_Remote_wakeup	usb\usb_core\device\sources\controller\usb_framework.c	/^bool USB_Framework_Remote_wakeup(USB_CLASS_FW_HANDLE handle)$/;"	f
USB_Framework_Reset	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Framework_Reset(_usb_device_handle handle)$/;"	f
USB_Framework_SetDesc	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Framework_SetDesc($/;"	f
USB_Reset_Service	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Reset_Service(void* handle, PTR_USB_EVENT_STRUCT event, void* arg)$/;"	f
USB_Resume_Service	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Resume_Service(void* handle,PTR_USB_EVENT_STRUCT event,void* arg )$/;"	f
USB_Strd_Req_Assign_Address	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Assign_Address(USB_CLASS_FW_OBJECT_STRUCT_PTR usb_fw_ptr)$/;"	f
USB_Strd_Req_Feature	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Feature(USB_CLASS_FW_OBJECT_STRUCT_PTR usb_fw_ptr,$/;"	f
USB_Strd_Req_Get_Config	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Get_Config$/;"	f
USB_Strd_Req_Get_Descriptor	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Get_Descriptor$/;"	f
USB_Strd_Req_Get_Interface	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Get_Interface$/;"	f
USB_Strd_Req_Get_Status	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Get_Status(USB_CLASS_FW_OBJECT_STRUCT_PTR usb_fw_ptr,$/;"	f
USB_Strd_Req_Set_Address	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Set_Address$/;"	f
USB_Strd_Req_Set_Config	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Set_Config$/;"	f
USB_Strd_Req_Set_Interface	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Set_Interface$/;"	f
USB_Strd_Req_Sync_Frame	usb\usb_core\device\sources\controller\usb_framework.c	/^uint8_t USB_Strd_Req_Sync_Frame$/;"	f
USB_Suspend_Service	usb\usb_core\device\sources\controller\usb_framework.c	/^void USB_Suspend_Service(void* handle,PTR_USB_EVENT_STRUCT event,void* arg )$/;"	f
g_control_pending	usb\usb_core\device\sources\controller\usb_framework.c	/^    bool g_control_pending=FALSE;$/;"	v
g_f_event	usb\usb_core\device\sources\controller\usb_framework.c	/^    USB_EVENT_STRUCT g_f_event;$/;"	v
g_standard_request	usb\usb_core\device\sources\controller\usb_framework.c	/^USB_FW_REQ_FUNC g_standard_request[MAX_STRD_REQ] = $/;"	v
g_validate_request	usb\usb_core\device\sources\controller\usb_framework.c	/^bool g_validate_request[MAX_STRD_REQ][3] = $/;"	v
CONFIG_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	54;"	d
DEVICE_STATUS_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	52;"	d
ENDP_STATUS_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	56;"	d
FRAME_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	55;"	d
INTERFACE_STATUS_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	53;"	d
MAX_EXPECTED_CONTROL_OUT_SIZE	usb\usb_core\device\sources\controller\usb_framework.h	49;"	d
MAX_STRD_REQ	usb\usb_core\device\sources\controller\usb_framework.h	50;"	d
USB_CLASS_FW_HANDLE	usb\usb_core\device\sources\controller\usb_framework.h	/^typedef uint32_t USB_CLASS_FW_HANDLE;$/;"	t
USB_CLASS_FW_OBJECT_STRUCT	usb\usb_core\device\sources\controller\usb_framework.h	/^}USB_CLASS_FW_OBJECT_STRUCT,* USB_CLASS_FW_OBJECT_STRUCT_PTR;$/;"	t	typeref:struct:_usb_class_fw_object
USB_CLASS_FW_OBJECT_STRUCT_PTR	usb\usb_core\device\sources\controller\usb_framework.h	/^}USB_CLASS_FW_OBJECT_STRUCT,* USB_CLASS_FW_OBJECT_STRUCT_PTR;$/;"	t	typeref:struct:_usb_class_fw_object
USB_FW_REQ_FUNC	usb\usb_core\device\sources\controller\usb_framework.h	/^typedef uint8_t (_CODE_PTR_ USB_FW_REQ_FUNC)(USB_CLASS_FW_OBJECT_STRUCT_PTR usb_fw_ptr,$/;"	t
USB_SET_REQUEST_MASK	usb\usb_core\device\sources\controller\usb_framework.h	57;"	d
_USB_FRAMEWORK_H	usb\usb_core\device\sources\controller\usb_framework.h	36;"	d
_usb_class_fw_object	usb\usb_core\device\sources\controller\usb_framework.h	/^typedef struct _usb_class_fw_object$/;"	s
assigned_address	usb\usb_core\device\sources\controller\usb_framework.h	/^   uint16_t                       assigned_address;$/;"	m	struct:_usb_class_fw_object
controller_handle	usb\usb_core\device\sources\controller\usb_framework.h	/^   _usb_device_handle             controller_handle;$/;"	m	struct:_usb_class_fw_object
cur_config	usb\usb_core\device\sources\controller\usb_framework.h	/^   uint16_t                       cur_config;$/;"	m	struct:_usb_class_fw_object
desc_notify_callback	usb\usb_core\device\sources\controller\usb_framework.h	/^   DESC_REQUEST_NOFIFY_STRUCT_PTR desc_notify_callback;$/;"	m	struct:_usb_class_fw_object
desc_notify_param	usb\usb_core\device\sources\controller\usb_framework.h	/^   void*                          desc_notify_param;$/;"	m	struct:_usb_class_fw_object
dev_handle	usb\usb_core\device\sources\controller\usb_framework.h	/^   _usb_device_handle             dev_handle;$/;"	m	struct:_usb_class_fw_object
device_notify_callback	usb\usb_core\device\sources\controller\usb_framework.h	/^   USB_DEVICE_NOFIFY              device_notify_callback;$/;"	m	struct:_usb_class_fw_object
device_notify_param	usb\usb_core\device\sources\controller\usb_framework.h	/^   void*                          device_notify_param;$/;"	m	struct:_usb_class_fw_object
ext_req_to_host	usb\usb_core\device\sources\controller\usb_framework.h	/^   uint8_t*                       ext_req_to_host;$/;"	m	struct:_usb_class_fw_object
request_notify_callback	usb\usb_core\device\sources\controller\usb_framework.h	/^   USB_REQUEST_NOTIFY             request_notify_callback;$/;"	m	struct:_usb_class_fw_object
request_notify_param	usb\usb_core\device\sources\controller\usb_framework.h	/^   void*                          request_notify_param;$/;"	m	struct:_usb_class_fw_object
setup_packet	usb\usb_core\device\sources\controller\usb_framework.h	/^   USB_SETUP_STRUCT               setup_packet;$/;"	m	struct:_usb_class_fw_object
std_framework_data	usb\usb_core\device\sources\controller\usb_framework.h	/^   uint16_t                       std_framework_data;$/;"	m	struct:_usb_class_fw_object
PACKED_STRUCT_BEGIN	usb\usb_core\include\compiler.h	40;"	d
PACKED_STRUCT_BEGIN	usb\usb_core\include\compiler.h	46;"	d
PACKED_STRUCT_BEGIN	usb\usb_core\include\compiler.h	53;"	d
PACKED_STRUCT_END	usb\usb_core\include\compiler.h	41;"	d
PACKED_STRUCT_END	usb\usb_core\include\compiler.h	47;"	d
PACKED_STRUCT_END	usb\usb_core\include\compiler.h	54;"	d
PACKED_UNION_BEGIN	usb\usb_core\include\compiler.h	43;"	d
PACKED_UNION_BEGIN	usb\usb_core\include\compiler.h	49;"	d
PACKED_UNION_BEGIN	usb\usb_core\include\compiler.h	56;"	d
PACKED_UNION_END	usb\usb_core\include\compiler.h	44;"	d
PACKED_UNION_END	usb\usb_core\include\compiler.h	50;"	d
PACKED_UNION_END	usb\usb_core\include\compiler.h	57;"	d
__compiler_h__	usb\usb_core\include\compiler.h	33;"	d
FALSE	usb\usb_core\include\types.h	76;"	d
FALSE	usb\usb_core\include\types.h	78;"	d
NULL	usb\usb_core\include\types.h	87;"	d
NULL	usb\usb_core\include\types.h	89;"	d
NULL	usb\usb_core\include\types.h	92;"	d
NULL	usb\usb_core\include\types.h	94;"	d
TRUE	usb\usb_core\include\types.h	81;"	d
TRUE	usb\usb_core\include\types.h	83;"	d
UNUSED	usb\usb_core\include\types.h	97;"	d
_CODE_PTR_	usb\usb_core\include\types.h	47;"	d
_types_h__	usb\usb_core\include\types.h	33;"	d
bool	usb\usb_core\include\types.h	/^typedef unsigned long bool;  \/* Machine representation of a bool *\/$/;"	t
char_ptr	usb\usb_core\include\types.h	/^typedef char *                    char_ptr;    \/* signed character       *\/$/;"	t
int16_t	usb\usb_core\include\types.h	/^typedef          short int16_t, *  int_16_ptr;  \/* 16-bit signed integer  *\/$/;"	t
int32_t	usb\usb_core\include\types.h	/^typedef          long  int32_t, *  int_32_ptr;  \/* 32-bit signed integer  *\/$/;"	t
int8_t	usb\usb_core\include\types.h	/^typedef signed   char  int8_t, *   int_8_ptr;   \/* 8-bit signed integer   *\/$/;"	t
int_16_ptr	usb\usb_core\include\types.h	/^typedef          short int16_t, *  int_16_ptr;  \/* 16-bit signed integer  *\/$/;"	t
int_32_ptr	usb\usb_core\include\types.h	/^typedef          long  int32_t, *  int_32_ptr;  \/* 32-bit signed integer  *\/$/;"	t
int_64	usb\usb_core\include\types.h	/^typedef    long  long int_64, *  int_64_ptr;       \/* 64-bit signed   *\/$/;"	t
int_64_ptr	usb\usb_core\include\types.h	/^typedef    long  long int_64, *  int_64_ptr;       \/* 64-bit signed   *\/$/;"	t
int_8_ptr	usb\usb_core\include\types.h	/^typedef signed   char  int8_t, *   int_8_ptr;   \/* 8-bit signed integer   *\/$/;"	t
uchar	usb\usb_core\include\types.h	/^typedef unsigned char  uchar;   \/* unsigned character     *\/$/;"	t
uint16_t	usb\usb_core\include\types.h	/^typedef unsigned short uint16_t, * uint_16_ptr; \/* 16-bit unsigned integer*\/$/;"	t
uint32_t	usb\usb_core\include\types.h	/^typedef unsigned long  uint32_t, * uint_32_ptr; \/* 32-bit unsigned integer*\/$/;"	t
uint64_t	usb\usb_core\include\types.h	/^typedef unsigned long long uint64_t, * uint_64_ptr; \/* 64-bit unsigned *\/$/;"	t
uint8_t	usb\usb_core\include\types.h	/^typedef unsigned char  uint8_t;  \/* 8-bit signed integer   *\/$/;"	t
uint_16_ptr	usb\usb_core\include\types.h	/^typedef unsigned short uint16_t, * uint_16_ptr; \/* 16-bit unsigned integer*\/$/;"	t
uint_32_ptr	usb\usb_core\include\types.h	/^typedef unsigned long  uint32_t, * uint_32_ptr; \/* 32-bit unsigned integer*\/$/;"	t
uint_64_ptr	usb\usb_core\include\types.h	/^typedef unsigned long long uint64_t, * uint_64_ptr; \/* 64-bit unsigned *\/$/;"	t
__usb_h__	usb\usb_core\include\usb.h	32;"	d
ADDITIONAL_MASK	usb\usb_core\include\usb_desc.h	274;"	d
BULK_ENDPOINT	usb\usb_core\include\usb_desc.h	255;"	d
COMMON_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_common_descriptor COMMON_DESCRIPTOR, * COMMON_DESCRIPTOR_PTR;$/;"	t	typeref:struct:usb_common_descriptor
COMMON_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_common_descriptor COMMON_DESCRIPTOR, * COMMON_DESCRIPTOR_PTR;$/;"	t	typeref:struct:
CONFIGURATION_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_configuration_descriptor CONFIGURATION_DESCRIPTOR, * CONFIGURATION_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:usb_configuration_descriptor
CONFIGURATION_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_configuration_descriptor CONFIGURATION_DESCRIPTOR, * CONFIGURATION_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:
CONFIG_RES7	usb\usb_core\include\usb_desc.h	221;"	d
CONFIG_SELF_PWR	usb\usb_core\include\usb_desc.h	222;"	d
CONFIG_WAKEUP	usb\usb_core\include\usb_desc.h	223;"	d
CONTROL_ENDPOINT	usb\usb_core\include\usb_desc.h	253;"	d
DESCRIPTOR_UNION	usb\usb_core\include\usb_desc.h	/^} DESCRIPTOR_UNION, * DESCRIPTOR_UNION_PTR;$/;"	t	typeref:union:descriptor_union
DESCRIPTOR_UNION_PTR	usb\usb_core\include\usb_desc.h	/^} DESCRIPTOR_UNION, * DESCRIPTOR_UNION_PTR;$/;"	t	typeref:union:descriptor_union
DEVICE_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_device_descriptor DEVICE_DESCRIPTOR, * DEVICE_DESCRIPTOR_PTR;$/;"	t	typeref:struct:usb_device_descriptor
DEVICE_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_device_descriptor DEVICE_DESCRIPTOR, * DEVICE_DESCRIPTOR_PTR;$/;"	t	typeref:struct:
ENDPOINT_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_endpoint_descriptor ENDPOINT_DESCRIPTOR, * ENDPOINT_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:usb_endpoint_descriptor
ENDPOINT_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_endpoint_descriptor ENDPOINT_DESCRIPTOR, * ENDPOINT_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:
ENDPOINT_MASK	usb\usb_core\include\usb_desc.h	251;"	d
EP_TYPE_MASK	usb\usb_core\include\usb_desc.h	257;"	d
GET_STATUS_DEVICE_MASK	usb\usb_core\include\usb_desc.h	114;"	d
INTERFACE_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_interface_descriptor INTERFACE_DESCRIPTOR, * INTERFACE_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:usb_interface_descriptor
INTERFACE_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_interface_descriptor INTERFACE_DESCRIPTOR, * INTERFACE_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:
IN_ENDPOINT	usb\usb_core\include\usb_desc.h	249;"	d
IRRPT_ENDPOINT	usb\usb_core\include\usb_desc.h	256;"	d
ISOCH_ADAPT	usb\usb_core\include\usb_desc.h	261;"	d
ISOCH_ASYNC	usb\usb_core\include\usb_desc.h	260;"	d
ISOCH_DATA	usb\usb_core\include\usb_desc.h	263;"	d
ISOCH_ENDPOINT	usb\usb_core\include\usb_desc.h	254;"	d
ISOCH_FEEDBACK	usb\usb_core\include\usb_desc.h	264;"	d
ISOCH_IMPLICIT	usb\usb_core\include\usb_desc.h	265;"	d
ISOCH_NOSYNC	usb\usb_core\include\usb_desc.h	259;"	d
ISOCH_RESERVED	usb\usb_core\include\usb_desc.h	266;"	d
ISOCH_SYNCH	usb\usb_core\include\usb_desc.h	262;"	d
NO_ADDITONAL	usb\usb_core\include\usb_desc.h	271;"	d
ONE_ADDITIONAL	usb\usb_core\include\usb_desc.h	272;"	d
OTG_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_otg_descriptor OTG_DESCRIPTOR, * OTG_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:usb_otg_descriptor
OTG_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_otg_descriptor OTG_DESCRIPTOR, * OTG_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:
OTG_HNP_SUPPORT	usb\usb_core\include\usb_desc.h	305;"	d
OTG_SRP_SUPPORT	usb\usb_core\include\usb_desc.h	304;"	d
OUT_ENDPOINT	usb\usb_core\include\usb_desc.h	250;"	d
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_common_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_configuration_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_device_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_endpoint_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_interface_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_otg_descriptor
PACKED_STRUCT_END	usb\usb_core\include\usb_desc.h	/^} PACKED_STRUCT_END;$/;"	v	typeref:struct:usb_qualifier_descriptor
PACKET_SIZE_MASK	usb\usb_core\include\usb_desc.h	270;"	d
QUALIFIER_DESCRIPTOR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_qualifier_descriptor QUALIFIER_DESCRIPTOR, * QUALIFIER_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:usb_qualifier_descriptor
QUALIFIER_DESCRIPTOR_PTR	usb\usb_core\include\usb_desc.h	/^typedef struct usb_qualifier_descriptor QUALIFIER_DESCRIPTOR, * QUALIFIER_DESCRIPTOR_PTR;  $/;"	t	typeref:struct:
REMOTE_WAKEUP_STATUS_MASK	usb\usb_core\include\usb_desc.h	115;"	d
TWO_ADDITIONAL	usb\usb_core\include\usb_desc.h	273;"	d
USB_ALL_LANGUAGES	usb\usb_core\include\usb_desc.h	/^}USB_ALL_LANGUAGES;$/;"	t	typeref:struct:_USB_ALL_LANGUAGES
USB_BULK_PIPE	usb\usb_core\include\usb_desc.h	42;"	d
USB_CONTROL_PIPE	usb\usb_core\include\usb_desc.h	40;"	d
USB_DESC_CFG_ATTRIBUTES_D7_MASK	usb\usb_core\include\usb_desc.h	123;"	d
USB_DESC_CFG_ATTRIBUTES_D7_POS	usb\usb_core\include\usb_desc.h	125;"	d
USB_DESC_CFG_ATTRIBUTES_D7_SHIFT	usb\usb_core\include\usb_desc.h	124;"	d
USB_DESC_CFG_ATTRIBUTES_REMOTE_WAKEUP_MASK	usb\usb_core\include\usb_desc.h	131;"	d
USB_DESC_CFG_ATTRIBUTES_REMOTE_WAKEUP_POS	usb\usb_core\include\usb_desc.h	133;"	d
USB_DESC_CFG_ATTRIBUTES_REMOTE_WAKEUP_SHIFT	usb\usb_core\include\usb_desc.h	132;"	d
USB_DESC_CFG_ATTRIBUTES_SELF_POWERED_MASK	usb\usb_core\include\usb_desc.h	127;"	d
USB_DESC_CFG_ATTRIBUTES_SELF_POWERED_POS	usb\usb_core\include\usb_desc.h	129;"	d
USB_DESC_CFG_ATTRIBUTES_SELF_POWERED_SHIFT	usb\usb_core\include\usb_desc.h	128;"	d
USB_DESC_EP_ATTRIBUTES_SYNC_TYPE_MASK	usb\usb_core\include\usb_desc.h	152;"	d
USB_DESC_EP_ATTRIBUTES_SYNC_TYPE_POS	usb\usb_core\include\usb_desc.h	154;"	d
USB_DESC_EP_ATTRIBUTES_SYNC_TYPE_SHIFT	usb\usb_core\include\usb_desc.h	153;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_BULK	usb\usb_core\include\usb_desc.h	162;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_CONTROL	usb\usb_core\include\usb_desc.h	160;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_INTERRUPT	usb\usb_core\include\usb_desc.h	163;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_ISOCHRONOUS	usb\usb_core\include\usb_desc.h	161;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_MASK	usb\usb_core\include\usb_desc.h	148;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_POS	usb\usb_core\include\usb_desc.h	150;"	d
USB_DESC_EP_ATTRIBUTES_TRANSFER_TYPE_SHIFT	usb\usb_core\include\usb_desc.h	149;"	d
USB_DESC_EP_ATTRIBUTES_USAGE_TYPE_MASK	usb\usb_core\include\usb_desc.h	156;"	d
USB_DESC_EP_ATTRIBUTES_USAGE_TYPE_POS	usb\usb_core\include\usb_desc.h	158;"	d
USB_DESC_EP_ATTRIBUTES_USAGE_TYPE_SHIFT	usb\usb_core\include\usb_desc.h	157;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_DIR_IN	usb\usb_core\include\usb_desc.h	145;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_DIR_MASK	usb\usb_core\include\usb_desc.h	136;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_DIR_OUT	usb\usb_core\include\usb_desc.h	144;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_DIR_POS	usb\usb_core\include\usb_desc.h	138;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_DIR_SHIFT	usb\usb_core\include\usb_desc.h	137;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_EP_NUMBER_MASK	usb\usb_core\include\usb_desc.h	140;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_EP_NUMBER_POS	usb\usb_core\include\usb_desc.h	142;"	d
USB_DESC_EP_ENDPOINT_ADDRESS_EP_NUMBER_SHIFT	usb\usb_core\include\usb_desc.h	141;"	d
USB_DESC_LEN_CFG	usb\usb_core\include\usb_desc.h	51;"	d
USB_DESC_LEN_DEV	usb\usb_core\include\usb_desc.h	50;"	d
USB_DESC_LEN_DEV_QUALIFIER	usb\usb_core\include\usb_desc.h	55;"	d
USB_DESC_LEN_EP	usb\usb_core\include\usb_desc.h	54;"	d
USB_DESC_LEN_IF	usb\usb_core\include\usb_desc.h	53;"	d
USB_DESC_LEN_OTHER_SPEED_CFG	usb\usb_core\include\usb_desc.h	56;"	d
USB_DESC_LEN_STR	usb\usb_core\include\usb_desc.h	52;"	d
USB_DESC_TYPE_CFG	usb\usb_core\include\usb_desc.h	60;"	d
USB_DESC_TYPE_CS_ENDPOINT	usb\usb_core\include\usb_desc.h	73;"	d
USB_DESC_TYPE_CS_INTERFACE	usb\usb_core\include\usb_desc.h	72;"	d
USB_DESC_TYPE_DEV	usb\usb_core\include\usb_desc.h	59;"	d
USB_DESC_TYPE_DEV_QUALIFIER	usb\usb_core\include\usb_desc.h	64;"	d
USB_DESC_TYPE_EP	usb\usb_core\include\usb_desc.h	63;"	d
USB_DESC_TYPE_HID	usb\usb_core\include\usb_desc.h	68;"	d
USB_DESC_TYPE_IF	usb\usb_core\include\usb_desc.h	62;"	d
USB_DESC_TYPE_IF_POWER	usb\usb_core\include\usb_desc.h	66;"	d
USB_DESC_TYPE_OTG	usb\usb_core\include\usb_desc.h	67;"	d
USB_DESC_TYPE_OTHER_SPEED_CFG	usb\usb_core\include\usb_desc.h	65;"	d
USB_DESC_TYPE_REPORT	usb\usb_core\include\usb_desc.h	69;"	d
USB_DESC_TYPE_STR	usb\usb_core\include\usb_desc.h	61;"	d
USB_DEV_REQ_STD_FEATURE_SELECTOR_DEVICE_REMOTE_WAKEUP	usb\usb_core\include\usb_desc.h	169;"	d
USB_DEV_REQ_STD_FEATURE_SELECTOR_ENDPOINT_HALT	usb\usb_core\include\usb_desc.h	168;"	d
USB_DEV_REQ_STD_FEATURE_SELECTOR_MASK	usb\usb_core\include\usb_desc.h	166;"	d
USB_DEV_REQ_STD_FEATURE_SELECTOR_SHIFT	usb\usb_core\include\usb_desc.h	167;"	d
USB_DEV_REQ_STD_FEATURE_SELECTOR_TEST_MODE	usb\usb_core\include\usb_desc.h	170;"	d
USB_DEV_REQ_STD_REQUEST_CLEAR_FEATURE	usb\usb_core\include\usb_desc.h	103;"	d
USB_DEV_REQ_STD_REQUEST_GET_CONFIGURATION	usb\usb_core\include\usb_desc.h	108;"	d
USB_DEV_REQ_STD_REQUEST_GET_DESCRIPTOR	usb\usb_core\include\usb_desc.h	106;"	d
USB_DEV_REQ_STD_REQUEST_GET_INTERFACE	usb\usb_core\include\usb_desc.h	110;"	d
USB_DEV_REQ_STD_REQUEST_GET_STATUS	usb\usb_core\include\usb_desc.h	102;"	d
USB_DEV_REQ_STD_REQUEST_SET_ADDRESS	usb\usb_core\include\usb_desc.h	105;"	d
USB_DEV_REQ_STD_REQUEST_SET_CONFIGURATION	usb\usb_core\include\usb_desc.h	109;"	d
USB_DEV_REQ_STD_REQUEST_SET_DESCRIPTOR	usb\usb_core\include\usb_desc.h	107;"	d
USB_DEV_REQ_STD_REQUEST_SET_FEATURE	usb\usb_core\include\usb_desc.h	104;"	d
USB_DEV_REQ_STD_REQUEST_SET_INTERFACE	usb\usb_core\include\usb_desc.h	111;"	d
USB_DEV_REQ_STD_REQUEST_SYNCH_FRAME	usb\usb_core\include\usb_desc.h	112;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_DIR_IN	usb\usb_core\include\usb_desc.h	90;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_DIR_MASK	usb\usb_core\include\usb_desc.h	77;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_DIR_OUT	usb\usb_core\include\usb_desc.h	89;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_DIR_POS	usb\usb_core\include\usb_desc.h	79;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_DIR_SHIFT	usb\usb_core\include\usb_desc.h	78;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_DEVICE	usb\usb_core\include\usb_desc.h	96;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_ENDPOINT	usb\usb_core\include\usb_desc.h	98;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_INTERFACE	usb\usb_core\include\usb_desc.h	97;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_MASK	usb\usb_core\include\usb_desc.h	85;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_OTHER	usb\usb_core\include\usb_desc.h	99;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_POS	usb\usb_core\include\usb_desc.h	87;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_RECIPIENT_SHIFT	usb\usb_core\include\usb_desc.h	86;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_CLASS	usb\usb_core\include\usb_desc.h	93;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_MASK	usb\usb_core\include\usb_desc.h	81;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_POS	usb\usb_core\include\usb_desc.h	83;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_SHIFT	usb\usb_core\include\usb_desc.h	82;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_STANDARD	usb\usb_core\include\usb_desc.h	92;"	d
USB_DEV_REQ_STD_REQUEST_TYPE_TYPE_VENDOR	usb\usb_core\include\usb_desc.h	94;"	d
USB_INTERRUPT_PIPE	usb\usb_core\include\usb_desc.h	43;"	d
USB_ISOCHRONOUS_PIPE	usb\usb_core\include\usb_desc.h	41;"	d
USB_LANGUAGE	usb\usb_core\include\usb_desc.h	/^} USB_LANGUAGE;$/;"	t	typeref:struct:_USB_LANGUAGE
USB_RECV	usb\usb_core\include\usb_desc.h	46;"	d
USB_SEND	usb\usb_core\include\usb_desc.h	47;"	d
USB_uint_16_high	usb\usb_core\include\usb_desc.h	333;"	d
USB_uint_16_low	usb\usb_core\include\usb_desc.h	332;"	d
_USB_ALL_LANGUAGES	usb\usb_core\include\usb_desc.h	/^typedef struct _USB_ALL_LANGUAGES $/;"	s
_USB_LANGUAGE	usb\usb_core\include\usb_desc.h	/^ typedef struct _USB_LANGUAGE $/;"	s
__usb_desc_h__	usb\usb_core\include\usb_desc.h	35;"	d
bAlternateSetting	usb\usb_core\include\usb_desc.h	/^   uint8_t   bAlternateSetting;  \/* Value to select this IF *\/$/;"	m	struct:usb_interface_descriptor
bConfigurationValue	usb\usb_core\include\usb_desc.h	/^   uint8_t   bConfigurationValue;  \/* Value to set this config. *\/ $/;"	m	struct:usb_configuration_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* CONFIGURATION type = 2 or 7 *\/$/;"	m	struct:usb_common_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* CONFIGURATION type = 2 or 7 *\/$/;"	m	struct:usb_configuration_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* CONFIGURATION type = 2 or 7 *\/$/;"	m	struct:usb_otg_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* DEVICE QUALIFIER type = 6 *\/$/;"	m	struct:usb_qualifier_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* DEVICE descriptor type = 1 *\/$/;"	m	struct:usb_device_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* ENDPOINT descriptor type = 5 *\/$/;"	m	struct:usb_endpoint_descriptor
bDescriptorType	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDescriptorType;  \/* INTERFACE descriptor type = 4 *\/$/;"	m	struct:usb_interface_descriptor
bDeviceClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceClass;     \/* Class code, if 0 see interface *\/$/;"	m	struct:usb_device_descriptor
bDeviceClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceClass;     \/* Class code, if 0 see interface *\/$/;"	m	struct:usb_qualifier_descriptor
bDeviceProtocol	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceProtocol;  \/* Protocol, if 0 see interface *\/$/;"	m	struct:usb_device_descriptor
bDeviceProtocol	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceProtocol;  \/* Protocol, if 0 see interface *\/$/;"	m	struct:usb_qualifier_descriptor
bDeviceSubClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceSubClass;  \/* Sub-Class code, 0 if class = 0 *\/$/;"	m	struct:usb_device_descriptor
bDeviceSubClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bDeviceSubClass;  \/* Sub-Class code, 0 if class = 0 *\/$/;"	m	struct:usb_qualifier_descriptor
bEndpointAddress	usb\usb_core\include\usb_desc.h	/^   uint8_t   bEndpointAddress; \/* Endpoint # 0 - 15 | IN\/OUT *\/$/;"	m	struct:usb_endpoint_descriptor
bInterfaceClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bInterfaceClass;  \/* Class code, 0xFF = vendor *\/$/;"	m	struct:usb_interface_descriptor
bInterfaceNumber	usb\usb_core\include\usb_desc.h	/^   uint8_t   bInterfaceNumber; \/* Interface no.*\/$/;"	m	struct:usb_interface_descriptor
bInterfaceProtocol	usb\usb_core\include\usb_desc.h	/^   uint8_t   bInterfaceProtocol;  \/* Protocol, 0xFF = vendor *\/$/;"	m	struct:usb_interface_descriptor
bInterfaceSubClass	usb\usb_core\include\usb_desc.h	/^   uint8_t   bInterfaceSubClass;  \/* Sub-Class code, 0 if class = 0 *\/$/;"	m	struct:usb_interface_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 10 *\/$/;"	m	struct:usb_qualifier_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 18 *\/$/;"	m	struct:usb_device_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 7 *\/$/;"	m	struct:usb_endpoint_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 9 *\/$/;"	m	struct:usb_common_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 9 *\/$/;"	m	struct:usb_configuration_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 9 *\/$/;"	m	struct:usb_interface_descriptor
bLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   bLength;          \/* Descriptor size in bytes = 9 *\/$/;"	m	struct:usb_otg_descriptor
bMaxPacketSize	usb\usb_core\include\usb_desc.h	/^   uint8_t   bMaxPacketSize;   \/* Endpoint 0 max. size *\/$/;"	m	struct:usb_device_descriptor
bMaxPacketSize	usb\usb_core\include\usb_desc.h	/^   uint8_t   bMaxPacketSize;   \/* Endpoint 0 max. size *\/$/;"	m	struct:usb_qualifier_descriptor
bMaxPower	usb\usb_core\include\usb_desc.h	/^   uint8_t   bMaxPower;        \/* Max.power from bus, 2mA units *\/$/;"	m	struct:usb_configuration_descriptor
bNumConfigurations	usb\usb_core\include\usb_desc.h	/^   uint8_t   bNumConfigurations; \/* Number of possible configurations *\/ $/;"	m	struct:usb_device_descriptor
bNumConfigurations	usb\usb_core\include\usb_desc.h	/^   uint8_t   bNumConfigurations; \/* Number of possible configurations *\/$/;"	m	struct:usb_qualifier_descriptor
bNumEndpoints	usb\usb_core\include\usb_desc.h	/^   uint8_t   bNumEndpoints;    \/* Number of endpoints excluding 0 *\/$/;"	m	struct:usb_interface_descriptor
bNumInterfaces	usb\usb_core\include\usb_desc.h	/^   uint8_t   bNumInterfaces;   \/* Number of interfaces, this config. *\/$/;"	m	struct:usb_configuration_descriptor
bReserved	usb\usb_core\include\usb_desc.h	/^   uint8_t   bReserved;        \/* Reserved = 0 *\/ $/;"	m	struct:usb_qualifier_descriptor
bcdDevice	usb\usb_core\include\usb_desc.h	/^   uint8_t   bcdDevice[2];     \/* Device release # in BCD *\/$/;"	m	struct:usb_device_descriptor
bcdUSD	usb\usb_core\include\usb_desc.h	/^   uint8_t   bcdUSD[2];        \/* USB spec in BCD, e.g. 0x0200 *\/$/;"	m	struct:usb_device_descriptor
bcdUSD	usb\usb_core\include\usb_desc.h	/^   uint8_t   bcdUSD[2];        \/* USB spec in BCD, e.g. 0x0200 *\/$/;"	m	struct:usb_qualifier_descriptor
bmAttributes	usb\usb_core\include\usb_desc.h	/^   uint8_t   bmAttributes;     \/* Config. characteristics *\/$/;"	m	struct:usb_configuration_descriptor
bmAttributes	usb\usb_core\include\usb_desc.h	/^   uint8_t   bmAttributes;     \/* OTG characteristics *\/$/;"	m	struct:usb_otg_descriptor
bmAttributes	usb\usb_core\include\usb_desc.h	/^   uint8_t   bmAttributes;     \/* Transfer type *\/$/;"	m	struct:usb_endpoint_descriptor
bufr	usb\usb_core\include\usb_desc.h	/^   uint8_t *                     bufr;$/;"	m	union:descriptor_union
cfig	usb\usb_core\include\usb_desc.h	/^   CONFIGURATION_DESCRIPTOR_PTR  cfig;$/;"	m	union:descriptor_union
common	usb\usb_core\include\usb_desc.h	/^   COMMON_DESCRIPTOR_PTR         common;$/;"	m	union:descriptor_union
descriptor_union	usb\usb_core\include\usb_desc.h	/^typedef union descriptor_union$/;"	u
dvic	usb\usb_core\include\usb_desc.h	/^   DEVICE_DESCRIPTOR_PTR         dvic;$/;"	m	union:descriptor_union
iConfig	usb\usb_core\include\usb_desc.h	/^   uint8_t   iConfig;          \/* Index to configuration string *\/$/;"	m	struct:usb_configuration_descriptor
iInterface	usb\usb_core\include\usb_desc.h	/^   uint8_t   iInterface;       \/* Index to interface string *\/$/;"	m	struct:usb_interface_descriptor
iInterval	usb\usb_core\include\usb_desc.h	/^   uint8_t   iInterval;        \/* Polling interval in (micro) frames *\/$/;"	m	struct:usb_endpoint_descriptor
iManufacturer	usb\usb_core\include\usb_desc.h	/^   uint8_t   iManufacturer;    \/* Index to manufacturer string *\/$/;"	m	struct:usb_device_descriptor
iProduct	usb\usb_core\include\usb_desc.h	/^   uint8_t   iProduct;         \/* Index to product string *\/$/;"	m	struct:usb_device_descriptor
iSerialNumber	usb\usb_core\include\usb_desc.h	/^   uint8_t   iSerialNumber;    \/* Index to serial number string *\/$/;"	m	struct:usb_device_descriptor
idProduct	usb\usb_core\include\usb_desc.h	/^   uint8_t   idProduct[2];     \/* Product ID per manufacturer *\/$/;"	m	struct:usb_device_descriptor
idVendor	usb\usb_core\include\usb_desc.h	/^   uint8_t   idVendor[2];      \/* Vendor ID per USB-IF *\/$/;"	m	struct:usb_device_descriptor
intf	usb\usb_core\include\usb_desc.h	/^   INTERFACE_DESCRIPTOR_PTR      intf;$/;"	m	union:descriptor_union
lang_desc	usb\usb_core\include\usb_desc.h	/^    uint8_t ** lang_desc;$/;"	m	struct:_USB_LANGUAGE
lang_desc_size	usb\usb_core\include\usb_desc.h	/^    uint8_t * lang_desc_size;    $/;"	m	struct:_USB_LANGUAGE
language_id	usb\usb_core\include\usb_desc.h	/^    uint16_t language_id;$/;"	m	struct:_USB_LANGUAGE
languages_number	usb\usb_core\include\usb_desc.h	/^    uint8_t  languages_number;                     $/;"	m	struct:_USB_ALL_LANGUAGES
languages_supported_size	usb\usb_core\include\usb_desc.h	/^    uint8_t  languages_supported_size;$/;"	m	struct:_USB_ALL_LANGUAGES
languages_supported_string	usb\usb_core\include\usb_desc.h	/^    uint8_t *languages_supported_string;$/;"	m	struct:_USB_ALL_LANGUAGES
ndpt	usb\usb_core\include\usb_desc.h	/^   ENDPOINT_DESCRIPTOR_PTR       ndpt;$/;"	m	union:descriptor_union
otg	usb\usb_core\include\usb_desc.h	/^   OTG_DESCRIPTOR_PTR            otg;$/;"	m	union:descriptor_union
pntr	usb\usb_core\include\usb_desc.h	/^   void*                         pntr;$/;"	m	union:descriptor_union
qual	usb\usb_core\include\usb_desc.h	/^   QUALIFIER_DESCRIPTOR_PTR      qual;$/;"	m	union:descriptor_union
usb_common_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_common_descriptor$/;"	s
usb_configuration_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_configuration_descriptor$/;"	s
usb_device_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_device_descriptor$/;"	s
usb_endpoint_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_endpoint_descriptor$/;"	s
usb_interface_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_interface_descriptor$/;"	s
usb_language	usb\usb_core\include\usb_desc.h	/^    USB_LANGUAGE *usb_language;$/;"	m	struct:_USB_ALL_LANGUAGES
usb_otg_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_otg_descriptor$/;"	s
usb_qualifier_descriptor	usb\usb_core\include\usb_desc.h	/^struct usb_qualifier_descriptor$/;"	s
wMaxPacketSize	usb\usb_core\include\usb_desc.h	/^   uint8_t   wMaxPacketSize[2];   \/* Bits 10:0 = max. packet size *\/$/;"	m	struct:usb_endpoint_descriptor
wTotalLength	usb\usb_core\include\usb_desc.h	/^   uint8_t   wTotalLength[2];  \/* Length of concatenated descriptors *\/$/;"	m	struct:usb_configuration_descriptor
word	usb\usb_core\include\usb_desc.h	/^   uint32_t                      word;$/;"	m	union:descriptor_union
USBERR_ADDRESS_ALLOC_FAILED	usb\usb_core\include\usb_error.h	67;"	d
USBERR_ALLOC	usb\usb_core\include\usb_error.h	42;"	d
USBERR_ALLOC_DTD_BASE	usb\usb_core\include\usb_error.h	92;"	d
USBERR_ALLOC_EP_QUEUE_HEAD	usb\usb_core\include\usb_error.h	90;"	d
USBERR_ALLOC_SERVICE	usb\usb_core\include\usb_error.h	53;"	d
USBERR_ALLOC_STATE	usb\usb_core\include\usb_error.h	48;"	d
USBERR_ALLOC_TR	usb\usb_core\include\usb_error.h	91;"	d
USBERR_BAD_ALIGNMENT	usb\usb_core\include\usb_error.h	79;"	d
USBERR_BAD_STATUS	usb\usb_core\include\usb_error.h	43;"	d
USBERR_BANDWIDTH_ALLOC_FAILED	usb\usb_core\include\usb_error.h	65;"	d
USBERR_CLASS_DRIVER_INSTALL	usb\usb_core\include\usb_error.h	93;"	d
USBERR_CLOSED_SERVICE	usb\usb_core\include\usb_error.h	44;"	d
USBERR_DEVICE_BUSY	usb\usb_core\include\usb_error.h	74;"	d
USBERR_DEVICE_NOT_FOUND	usb\usb_core\include\usb_error.h	73;"	d
USBERR_DRIVER_INSTALL_FAILED	usb\usb_core\include\usb_error.h	49;"	d
USBERR_DRIVER_NOT_INSTALLED	usb\usb_core\include\usb_error.h	50;"	d
USBERR_ENDPOINT_STALLED	usb\usb_core\include\usb_error.h	47;"	d
USBERR_EP_DEINIT_FAILED	usb\usb_core\include\usb_error.h	63;"	d
USBERR_EP_INIT_FAILED	usb\usb_core\include\usb_error.h	62;"	d
USBERR_ERROR	usb\usb_core\include\usb_error.h	87;"	d
USBERR_GET_MEMORY_FAILED	usb\usb_core\include\usb_error.h	78;"	d
USBERR_HOST_BUSY	usb\usb_core\include\usb_error.h	70;"	d
USBERR_INIT_DATA	usb\usb_core\include\usb_error.h	58;"	d
USBERR_INIT_FAILED	usb\usb_core\include\usb_error.h	54;"	d
USBERR_INSTALL_ISR	usb\usb_core\include\usb_error.h	51;"	d
USBERR_INVALID_ANCHOR	usb\usb_core\include\usb_error.h	85;"	d
USBERR_INVALID_BMREQ_TYPE	usb\usb_core\include\usb_error.h	77;"	d
USBERR_INVALID_CFIG_NUM	usb\usb_core\include\usb_error.h	84;"	d
USBERR_INVALID_DEVICE_NUM	usb\usb_core\include\usb_error.h	52;"	d
USBERR_INVALID_MEM_TYPE	usb\usb_core\include\usb_error.h	80;"	d
USBERR_INVALID_NUM_OF_ENDPOINTS	usb\usb_core\include\usb_error.h	66;"	d
USBERR_INVALID_PARAM	usb\usb_core\include\usb_error.h	71;"	d
USBERR_INVALID_PIPE_HANDLE	usb\usb_core\include\usb_error.h	56;"	d
USBERR_INVALID_REQ_TYPE	usb\usb_core\include\usb_error.h	86;"	d
USBERR_NOT_FOUND	usb\usb_core\include\usb_error.h	69;"	d
USBERR_NO_DESCRIPTOR	usb\usb_core\include\usb_error.h	81;"	d
USBERR_NO_DEVICE_CLASS	usb\usb_core\include\usb_error.h	75;"	d
USBERR_NO_INTERFACE	usb\usb_core\include\usb_error.h	83;"	d
USBERR_NULL_CALLBACK	usb\usb_core\include\usb_error.h	82;"	d
USBERR_OPEN_PIPE_FAILED	usb\usb_core\include\usb_error.h	57;"	d
USBERR_OPEN_SERVICE	usb\usb_core\include\usb_error.h	45;"	d
USBERR_PIPE_OPENED_FAILED	usb\usb_core\include\usb_error.h	68;"	d
USBERR_RX_FAILED	usb\usb_core\include\usb_error.h	61;"	d
USBERR_SHUTDOWN	usb\usb_core\include\usb_error.h	55;"	d
USBERR_SRP_REQ_INVALID_STATE	usb\usb_core\include\usb_error.h	59;"	d
USBERR_TRANSFER_IN_PROGRESS	usb\usb_core\include\usb_error.h	46;"	d
USBERR_TR_CANCEL	usb\usb_core\include\usb_error.h	94;"	d
USBERR_TR_FAILED	usb\usb_core\include\usb_error.h	64;"	d
USBERR_TX_FAILED	usb\usb_core\include\usb_error.h	60;"	d
USBERR_UNKNOWN_ERROR	usb\usb_core\include\usb_error.h	76;"	d
USB_OK	usb\usb_core\include\usb_error.h	41;"	d
__usb_error_h__	usb\usb_core\include\usb_error.h	36;"	d
ERROR_BTOERR	usb\usb_core\include\usb_misc.h	/^    ERROR_BTOERR  = 0x10,$/;"	e	enum:__anon18
ERROR_BTSERR	usb\usb_core\include\usb_misc.h	/^    ERROR_BTSERR  = 0x80,$/;"	e	enum:__anon18
ERROR_CRC16	usb\usb_core\include\usb_misc.h	/^    ERROR_CRC16   = 0x04,$/;"	e	enum:__anon18
ERROR_CRC5EOF	usb\usb_core\include\usb_misc.h	/^    ERROR_CRC5EOF = 0x02,$/;"	e	enum:__anon18
ERROR_DFN8	usb\usb_core\include\usb_misc.h	/^    ERROR_DFN8    = 0x08,$/;"	e	enum:__anon18
ERROR_DMAERR	usb\usb_core\include\usb_misc.h	/^    ERROR_DMAERR  = 0x20,$/;"	e	enum:__anon18
ERROR_PIDERR	usb\usb_core\include\usb_misc.h	/^    ERROR_PIDERR  = 0x01,$/;"	e	enum:__anon18
ERROR_TYPE	usb\usb_core\include\usb_misc.h	/^}ERROR_TYPE;$/;"	t	typeref:enum:__anon18
INTR_ATTACH	usb\usb_core\include\usb_misc.h	/^    INTR_ATTACH = 0x40,$/;"	e	enum:__anon17
INTR_ERROR	usb\usb_core\include\usb_misc.h	/^    INTR_ERROR  = 0x02,$/;"	e	enum:__anon17
INTR_RESUME	usb\usb_core\include\usb_misc.h	/^    INTR_RESUME = 0x20,$/;"	e	enum:__anon17
INTR_SLEEP	usb\usb_core\include\usb_misc.h	/^    INTR_SLEEP  = 0x10,$/;"	e	enum:__anon17
INTR_SOFTOK	usb\usb_core\include\usb_misc.h	/^    INTR_SOFTOK = 0x04,$/;"	e	enum:__anon17
INTR_STALL	usb\usb_core\include\usb_misc.h	/^    INTR_STALL  = 0x80, $/;"	e	enum:__anon17
INTR_TOKDNE	usb\usb_core\include\usb_misc.h	/^    INTR_TOKDNE = 0x08,$/;"	e	enum:__anon17
INTR_TYPE	usb\usb_core\include\usb_misc.h	/^}INTR_TYPE;$/;"	t	typeref:enum:__anon17
INTR_USBRST	usb\usb_core\include\usb_misc.h	/^    INTR_USBRST = 0x01,$/;"	e	enum:__anon17
SCRATCH_STRUCT	usb\usb_core\include\usb_misc.h	/^} SCRATCH_STRUCT, * SCRATCH_STRUCT_PTR;$/;"	t	typeref:struct:__anon16
SCRATCH_STRUCT_PTR	usb\usb_core\include\usb_misc.h	/^} SCRATCH_STRUCT, * SCRATCH_STRUCT_PTR;$/;"	t	typeref:struct:__anon16
USB_ASSERT_BUS_RESET	usb\usb_core\include\usb_misc.h	57;"	d
USB_ASSERT_RESUME	usb\usb_core\include\usb_misc.h	59;"	d
USB_ATTACH_DEVICE_NOT_SUPPORT	usb\usb_core\include\usb_misc.h	91;"	d
USB_ATTACH_EVENT	usb\usb_core\include\usb_misc.h	86;"	d
USB_ATTACH_INTF_NOT_SUPPORT	usb\usb_core\include\usb_misc.h	90;"	d
USB_CONFIG_EVENT	usb\usb_core\include\usb_misc.h	88;"	d
USB_DEASSERT_BUS_RESET	usb\usb_core\include\usb_misc.h	58;"	d
USB_DEASSERT_RESUME	usb\usb_core\include\usb_misc.h	60;"	d
USB_DEBOUNCE_DELAY	usb\usb_core\include\usb_misc.h	39;"	d
USB_DETACH_EVENT	usb\usb_core\include\usb_misc.h	87;"	d
USB_DEVICE_DONT_ZERO_TERMINATE	usb\usb_core\include\usb_misc.h	74;"	d
USB_DMA_ALIGN	usb\usb_core\include\usb_misc.h	98;"	d
USB_DMA_ALIGN_MASK	usb\usb_core\include\usb_misc.h	99;"	d
USB_INSTANCE_T	usb\usb_core\include\usb_misc.h	/^} USB_INSTANCE_T;$/;"	t	typeref:struct:usb_instance
USB_INTF_OPENED_EVENT	usb\usb_core\include\usb_misc.h	89;"	d
USB_MAX_PKTS_PER_UFRAME	usb\usb_core\include\usb_misc.h	83;"	d
USB_MEM4_ALIGN	usb\usb_core\include\usb_misc.h	97;"	d
USB_NO_OPERATION	usb\usb_core\include\usb_misc.h	56;"	d
USB_RESET_DELAY	usb\usb_core\include\usb_misc.h	41;"	d
USB_RESET_RECOVERY_DELAY	usb\usb_core\include\usb_misc.h	40;"	d
USB_RESUME_SOF	usb\usb_core\include\usb_misc.h	62;"	d
USB_SETUP_DATA_XFER_DIRECTION	usb\usb_core\include\usb_misc.h	76;"	d
USB_SPEED_FULL	usb\usb_core\include\usb_misc.h	79;"	d
USB_SPEED_HIGH	usb\usb_core\include\usb_misc.h	81;"	d
USB_SPEED_LOW	usb\usb_core\include\usb_misc.h	80;"	d
USB_STATE_ADDRESS	usb\usb_core\include\usb_misc.h	48;"	d
USB_STATE_CONFIG	usb\usb_core\include\usb_misc.h	49;"	d
USB_STATE_DEFAULT	usb\usb_core\include\usb_misc.h	47;"	d
USB_STATE_PENDING_ADDRESS	usb\usb_core\include\usb_misc.h	45;"	d
USB_STATE_POWERED	usb\usb_core\include\usb_misc.h	46;"	d
USB_STATE_SUSPEND	usb\usb_core\include\usb_misc.h	50;"	d
USB_STATE_UNKNOWN	usb\usb_core\include\usb_misc.h	44;"	d
USB_STATUS_DISABLED	usb\usb_core\include\usb_misc.h	70;"	d
USB_STATUS_ERROR	usb\usb_core\include\usb_misc.h	69;"	d
USB_STATUS_IDLE	usb\usb_core\include\usb_misc.h	65;"	d
USB_STATUS_REMOTE_WAKEUP	usb\usb_core\include\usb_misc.h	53;"	d
USB_STATUS_SELF_POWERED	usb\usb_core\include\usb_misc.h	52;"	d
USB_STATUS_STALLED	usb\usb_core\include\usb_misc.h	66;"	d
USB_STATUS_TRANSFER_ACCEPTED	usb\usb_core\include\usb_misc.h	71;"	d
USB_STATUS_TRANSFER_IN_PROGRESS	usb\usb_core\include\usb_misc.h	68;"	d
USB_STATUS_TRANSFER_PENDING	usb\usb_core\include\usb_misc.h	67;"	d
USB_STATUS_TRANSFER_QUEUED	usb\usb_core\include\usb_misc.h	72;"	d
USB_SUSPEND_SOF	usb\usb_core\include\usb_misc.h	61;"	d
XD_STRUCT	usb\usb_core\include\usb_misc.h	/^} XD_STRUCT, * XD_STRUCT_PTR;$/;"	t	typeref:struct:xd_struct
XD_STRUCT_PTR	usb\usb_core\include\usb_misc.h	/^} XD_STRUCT, * XD_STRUCT_PTR;$/;"	t	typeref:struct:xd_struct
__usb_misc_h__	usb\usb_core\include\usb_misc.h	36;"	d
bdirection	usb\usb_core\include\usb_misc.h	/^    uint8_t            bdirection;       \/* Direction : Send\/Receive *\/$/;"	m	struct:xd_struct
bstatus	usb\usb_core\include\usb_misc.h	/^    uint8_t            bstatus;          \/* Current transfer status *\/$/;"	m	struct:xd_struct
dont_zero_terminate	usb\usb_core\include\usb_misc.h	/^    bool               dont_zero_terminate;$/;"	m	struct:xd_struct
ep_num	usb\usb_core\include\usb_misc.h	/^    uint8_t            ep_num;           \/* Endpoint number *\/$/;"	m	struct:xd_struct
ep_type	usb\usb_core\include\usb_misc.h	/^    uint8_t            ep_type;          \/* Type of the endpoint: Ctrl, Isoch, Bulk, Int *\/$/;"	m	struct:xd_struct
instance	usb\usb_core\include\usb_misc.h	/^	uint8_t 			instance;$/;"	m	struct:usb_instance
internal_dma_align	usb\usb_core\include\usb_misc.h	/^	bool	           internal_dma_align;$/;"	m	struct:xd_struct
name	usb\usb_core\include\usb_misc.h	/^	uint8_t* 			name;$/;"	m	struct:usb_instance
scratch_ptr	usb\usb_core\include\usb_misc.h	/^    SCRATCH_STRUCT_PTR scratch_ptr;$/;"	m	struct:xd_struct
usb_instance	usb\usb_core\include\usb_misc.h	/^typedef struct usb_instance$/;"	s
wmaxpacketsize	usb\usb_core\include\usb_misc.h	/^    uint16_t           wmaxpacketsize;   \/* max packet size *\/$/;"	m	struct:xd_struct
wsofar	usb\usb_core\include\usb_misc.h	/^    uint32_t           wsofar;           \/* number of bytes recv'd so far *\/$/;"	m	struct:xd_struct
wstartaddress	usb\usb_core\include\usb_misc.h	/^    uint8_t *          wstartaddress;    \/* Address of first byte *\/$/;"	m	struct:xd_struct
wtotallength	usb\usb_core\include\usb_misc.h	/^    uint32_t           wtotallength;     \/* number of bytes to send\/recv *\/$/;"	m	struct:xd_struct
xd_for_this_dtd	usb\usb_core\include\usb_misc.h	/^    void*              xd_for_this_dtd;$/;"	m	struct:__anon16
xd_struct	usb\usb_core\include\usb_misc.h	/^typedef struct xd_struct $/;"	s
SWAP2BYTE_CONST	usb\usb_core\include\usb_opt.h	41;"	d
SWAP4BYTE_CONST	usb\usb_core\include\usb_opt.h	42;"	d
USB_HOST_TO_BE_LONG	usb\usb_core\include\usb_opt.h	55;"	d
USB_HOST_TO_BE_LONG	usb\usb_core\include\usb_opt.h	91;"	d
USB_HOST_TO_BE_LONG_CONST	usb\usb_core\include\usb_opt.h	56;"	d
USB_HOST_TO_BE_LONG_CONST	usb\usb_core\include\usb_opt.h	92;"	d
USB_HOST_TO_BE_SHORT	usb\usb_core\include\usb_opt.h	45;"	d
USB_HOST_TO_BE_SHORT	usb\usb_core\include\usb_opt.h	81;"	d
USB_HOST_TO_BE_SHORT_CONST	usb\usb_core\include\usb_opt.h	46;"	d
USB_HOST_TO_BE_SHORT_CONST	usb\usb_core\include\usb_opt.h	82;"	d
USB_HOST_TO_BE_UNALIGNED_LONG	usb\usb_core\include\usb_opt.h	57;"	d
USB_HOST_TO_BE_UNALIGNED_LONG	usb\usb_core\include\usb_opt.h	93;"	d
USB_HOST_TO_LE_LONG	usb\usb_core\include\usb_opt.h	100;"	d
USB_HOST_TO_LE_LONG	usb\usb_core\include\usb_opt.h	64;"	d
USB_HOST_TO_LE_LONG_CONST	usb\usb_core\include\usb_opt.h	101;"	d
USB_HOST_TO_LE_LONG_CONST	usb\usb_core\include\usb_opt.h	65;"	d
USB_HOST_TO_LE_SHORT	usb\usb_core\include\usb_opt.h	47;"	d
USB_HOST_TO_LE_SHORT	usb\usb_core\include\usb_opt.h	83;"	d
USB_HOST_TO_LE_SHORT_CONST	usb\usb_core\include\usb_opt.h	48;"	d
USB_HOST_TO_LE_SHORT_CONST	usb\usb_core\include\usb_opt.h	84;"	d
USB_HOST_TO_LE_UNALIGNED_LONG	usb\usb_core\include\usb_opt.h	102;"	d
USB_HOST_TO_LE_UNALIGNED_LONG	usb\usb_core\include\usb_opt.h	66;"	d
USB_LONG_BE_TO_HOST	usb\usb_core\include\usb_opt.h	110;"	d
USB_LONG_BE_TO_HOST	usb\usb_core\include\usb_opt.h	73;"	d
USB_LONG_BE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	111;"	d
USB_LONG_BE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	74;"	d
USB_LONG_LE_TO_HOST	usb\usb_core\include\usb_opt.h	112;"	d
USB_LONG_LE_TO_HOST	usb\usb_core\include\usb_opt.h	75;"	d
USB_LONG_LE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	113;"	d
USB_LONG_LE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	76;"	d
USB_LONG_UNALIGNED_LE_TO_HOST	usb\usb_core\include\usb_opt.h	114;"	d
USB_LONG_UNALIGNED_LE_TO_HOST	usb\usb_core\include\usb_opt.h	77;"	d
USB_SHORT_BE_TO_HOST	usb\usb_core\include\usb_opt.h	49;"	d
USB_SHORT_BE_TO_HOST	usb\usb_core\include\usb_opt.h	85;"	d
USB_SHORT_BE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	50;"	d
USB_SHORT_BE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	86;"	d
USB_SHORT_LE_TO_HOST	usb\usb_core\include\usb_opt.h	51;"	d
USB_SHORT_LE_TO_HOST	usb\usb_core\include\usb_opt.h	87;"	d
USB_SHORT_LE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	52;"	d
USB_SHORT_LE_TO_HOST_CONST	usb\usb_core\include\usb_opt.h	88;"	d
USB_SHORT_UNALIGNED_LE_TO_HOST	usb\usb_core\include\usb_opt.h	53;"	d
USB_SHORT_UNALIGNED_LE_TO_HOST	usb\usb_core\include\usb_opt.h	89;"	d
__usb_opt_h__	usb\usb_core\include\usb_opt.h	33;"	d
UNUSED_ARGUMENT	usb\usb_core\include\usb_types.h	60;"	d
USB_STATUS	usb\usb_core\include\usb_types.h	/^typedef uint32_t USB_STATUS;$/;"	t
__usb_types_h__	usb\usb_core\include\usb_types.h	35;"	d
_usb_class_intf_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_class_intf_handle;            \/* interface state struct (general data + class driver specific data) *\/$/;"	t
_usb_device_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_device_handle;                \/* device state struct *\/$/;"	t
_usb_device_instance_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_device_instance_handle;       \/* item on host's list *\/$/;"	t
_usb_host_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_host_handle;                  \/* host state struct   *\/$/;"	t
_usb_interface_descriptor_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_interface_descriptor_handle;  \/* Chapter 9 interface descriptor *\/$/;"	t
_usb_pipe_handle	usb\usb_core\include\usb_types.h	/^typedef void* _usb_pipe_handle;                  \/* pipe or pipe-bundle *\/$/;"	t
descriptor_type	usb\usb_core\include\usb_types.h	/^typedef uint32_t descriptor_type;$/;"	t
__FSL_DEBUG_UART_H__	utilities\fsl_debug_uart.h	32;"	d
ARRAY_SIZE	utilities\fsl_misc_utilities.h	49;"	d
BSWAP_16	utilities\fsl_misc_utilities.h	52;"	d
BSWAP_32	utilities\fsl_misc_utilities.h	53;"	d
MAX	utilities\fsl_misc_utilities.h	45;"	d
MIN	utilities\fsl_misc_utilities.h	41;"	d
__FSL_MISC_UTILITIES_H__	utilities\fsl_misc_utilities.h	31;"	d
FSL_RTOS_CMSIS	utilities\fsl_os_abstraction.h	61;"	d
FSL_RTOS_FREE_RTOS	utilities\fsl_os_abstraction.h	57;"	d
FSL_RTOS_MQX	utilities\fsl_os_abstraction.h	55;"	d
FSL_RTOS_NONE	utilities\fsl_os_abstraction.h	53;"	d
FSL_RTOS_SELECTED	utilities\fsl_os_abstraction.h	47;"	d
FSL_RTOS_UCOSII	utilities\fsl_os_abstraction.h	59;"	d
FSL_RTOS_UCOSIII	utilities\fsl_os_abstraction.h	63;"	d
__FSL_OS_ABSTRACTION_H__	utilities\fsl_os_abstraction.h	31;"	d
__FSL_RTOS_MSGQ_COPY_MSG__	utilities\fsl_os_abstraction.h	50;"	d
event_clear_type	utilities\fsl_os_abstraction.h	/^}event_clear_type;$/;"	t	typeref:enum:__anon21
event_status	utilities\fsl_os_abstraction.h	/^}event_status;$/;"	t	typeref:enum:__anon20
fsl_rtos_status	utilities\fsl_os_abstraction.h	/^}fsl_rtos_status;$/;"	t	typeref:enum:__anon19
inline	utilities\fsl_os_abstraction.h	38;"	d
kError	utilities\fsl_os_abstraction.h	/^    kError,        \/*!< Functions work failed.                      *\/$/;"	e	enum:__anon19
kEventAutoClr	utilities\fsl_os_abstraction.h	/^    kEventAutoClr = 0, \/*!< The flags of the event will be cleared automatically. *\/$/;"	e	enum:__anon21
kEventManualClr	utilities\fsl_os_abstraction.h	/^    kEventManualClr    \/*!< The flags of the event will be cleared manually.      *\/$/;"	e	enum:__anon21
kFlagNotSet	utilities\fsl_os_abstraction.h	/^    kFlagNotSet = 0, \/*!< The flags checked are set.     *\/$/;"	e	enum:__anon20
kFlagSet	utilities\fsl_os_abstraction.h	/^    kFlagSet         \/*!< The flags checked are not set. *\/$/;"	e	enum:__anon20
kIdle	utilities\fsl_os_abstraction.h	/^    kIdle          \/*!< Can not get the object in non-blocking mode.*\/$/;"	e	enum:__anon19
kSuccess	utilities\fsl_os_abstraction.h	/^    kSuccess = 0,  \/*!< Functions work correctly.                   *\/$/;"	e	enum:__anon19
kTimeout	utilities\fsl_os_abstraction.h	/^    kTimeout,      \/*!< Timeout occurs while waiting for an object. *\/$/;"	e	enum:__anon19
FSL_RTOS_CURRENT_TASK	utilities\fsl_os_abstraction_bm.h	110;"	d
FSL_RTOS_TASK_DEFINE	utilities\fsl_os_abstraction_bm.h	166;"	d
MSG_QUEUE_DECLARE	utilities\fsl_os_abstraction_bm.h	217;"	d
MSG_QUEUE_DECLARE	utilities\fsl_os_abstraction_bm.h	222;"	d
POLL_MAX_NUM	utilities\fsl_os_abstraction_bm.h	248;"	d
POLL_SLOT_STRUCT	utilities\fsl_os_abstraction_bm.h	/^} POLL_SLOT_STRUCT;$/;"	t	typeref:struct:__anon26
POLL_STRUCT	utilities\fsl_os_abstraction_bm.h	/^} POLL_STRUCT;$/;"	t	typeref:struct:__anon27
__FSL_OS_ABSTRACTION_BM_H__	utilities\fsl_os_abstraction_bm.h	31;"	d
clearType	utilities\fsl_os_abstraction_bm.h	/^    event_clear_type clearType;   \/*!< Auto clear or manual clear                       *\/$/;"	m	struct:__anon24
event_group_t	utilities\fsl_os_abstraction_bm.h	/^typedef uint32_t event_group_t;$/;"	t
event_object_t	utilities\fsl_os_abstraction_bm.h	/^}event_object_t;$/;"	t	typeref:struct:__anon24
flags	utilities\fsl_os_abstraction_bm.h	/^    event_group_t    flags;       \/*!< The flags status                                 *\/$/;"	m	struct:__anon24
fsl_rtos_timeouts	utilities\fsl_os_abstraction_bm.h	/^enum fsl_rtos_timeouts$/;"	g
head	utilities\fsl_os_abstraction_bm.h	/^    uint16_t      head;          \/*!< Index of the next element to be read     *\/$/;"	m	struct:__anon25
isEmpty	utilities\fsl_os_abstraction_bm.h	/^    bool          isEmpty;       \/*!< Whether queue is empty *\/$/;"	m	struct:__anon25
isLocked	utilities\fsl_os_abstraction_bm.h	/^    bool    isLocked;   \/*!< Is the object locked or not                     *\/$/;"	m	struct:__anon23
isWaiting	utilities\fsl_os_abstraction_bm.h	/^    bool             isWaiting;   \/*!< Is any task waiting for a timeout on this event  *\/$/;"	m	struct:__anon24
isWaiting	utilities\fsl_os_abstraction_bm.h	/^    bool    isWaiting;  \/*!< Is any task waiting for a timeout on this lock  *\/$/;"	m	struct:__anon23
isWaiting	utilities\fsl_os_abstraction_bm.h	/^    bool    isWaiting; \/*!< Is any task waiting for a timeout on this object *\/$/;"	m	struct:__anon22
kSyncWaitForever	utilities\fsl_os_abstraction_bm.h	/^    kSyncWaitForever = kSwTimerMaxTimeout \/*!< Wait indefinitely  *\/$/;"	e	enum:fsl_rtos_timeouts
lock_object_declare	utilities\fsl_os_abstraction_bm.h	146;"	d
lock_object_t	utilities\fsl_os_abstraction_bm.h	/^}lock_object_t;$/;"	t	typeref:struct:__anon23
msg_queue_handler_t	utilities\fsl_os_abstraction_bm.h	/^typedef msg_queue_t*  msg_queue_handler_t;$/;"	t
msg_queue_item_t	utilities\fsl_os_abstraction_bm.h	/^typedef void*         msg_queue_item_t;$/;"	t
msg_queue_t	utilities\fsl_os_abstraction_bm.h	/^}msg_queue_t;$/;"	t	typeref:struct:__anon25
number	utilities\fsl_os_abstraction_bm.h	/^    uint16_t      number;        \/*!< Stores the elements in the queue         *\/$/;"	m	struct:__anon25
p_func	utilities\fsl_os_abstraction_bm.h	/^	task_t p_func;  \/*!< Task's entry *\/$/;"	m	struct:__anon26
p_slot	utilities\fsl_os_abstraction_bm.h	/^	POLL_SLOT_STRUCT   p_slot[POLL_MAX_NUM]; \/*!< polling function pointer array *\/$/;"	m	struct:__anon27
param	utilities\fsl_os_abstraction_bm.h	/^	void*  param;   \/*!< Task's parameter *\/$/;"	m	struct:__anon26
queueMem	utilities\fsl_os_abstraction_bm.h	/^    uint32_t     *queueMem;      \/*!< Points to the queue memory *\/$/;"	m	struct:__anon25
queueSync	utilities\fsl_os_abstraction_bm.h	/^    sync_object_t queueSync;     \/*!< Sync object wakeup tasks waiting for msg *\/$/;"	m	struct:__anon25
registered_no	utilities\fsl_os_abstraction_bm.h	/^    uint8_t            registered_no;        \/*!< number of registered function *\/$/;"	m	struct:__anon27
rtos_enter_critical	utilities\fsl_os_abstraction_bm.h	236;"	d
rtos_exit_critical	utilities\fsl_os_abstraction_bm.h	239;"	d
semCount	utilities\fsl_os_abstraction_bm.h	/^    uint8_t semCount;  \/*!< The count value of the object                    *\/$/;"	m	struct:__anon22
size	utilities\fsl_os_abstraction_bm.h	/^    uint16_t      size;          \/*!< Stores the size in words of each element *\/$/;"	m	struct:__anon25
sync_object_declare	utilities\fsl_os_abstraction_bm.h	131;"	d
sync_object_t	utilities\fsl_os_abstraction_bm.h	/^}sync_object_t;$/;"	t	typeref:struct:__anon22
tail	utilities\fsl_os_abstraction_bm.h	/^    uint16_t      tail;          \/*!< Index of the next place to write to      *\/$/;"	m	struct:__anon25
task_create	utilities\fsl_os_abstraction_bm.h	192;"	d
task_handler_t	utilities\fsl_os_abstraction_bm.h	/^typedef uint32_t task_handler_t;$/;"	t
task_stack_t	utilities\fsl_os_abstraction_bm.h	/^typedef uint32_t task_stack_t;$/;"	t
task_t	utilities\fsl_os_abstraction_bm.h	/^typedef void (* task_t)(void* param);$/;"	t
timerId	utilities\fsl_os_abstraction_bm.h	/^    uint8_t          timerId;     \/*!< The software timer channal this event bind to    *\/$/;"	m	struct:__anon24
timerId	utilities\fsl_os_abstraction_bm.h	/^    uint8_t timerId;    \/*!< The software timer channal this lock bind to    *\/$/;"	m	struct:__anon23
timerId	utilities\fsl_os_abstraction_bm.h	/^    uint8_t timerId;   \/*!< The software timer channal this object bind to   *\/$/;"	m	struct:__anon22
DebugUartState	utilities\src\fsl_debug_uart.c	/^typedef struct DebugUartState {$/;"	s	file:
__close_console	utilities\src\fsl_debug_uart.c	/^int __close_console(__file_handle handle)$/;"	f
__read	utilities\src\fsl_debug_uart.c	/^size_t __read(int handle, unsigned char * buffer, size_t size)$/;"	f
__read	utilities\src\fsl_debug_uart.c	160;"	d	file:
__read_console	utilities\src\fsl_debug_uart.c	/^int __read_console(__file_handle handle, unsigned char* buffer, size_t * count)$/;"	f
__write	utilities\src\fsl_debug_uart.c	/^size_t __write(int handle, const unsigned char * buffer, size_t size)$/;"	f
__write	utilities\src\fsl_debug_uart.c	119;"	d	file:
__write_console	utilities\src\fsl_debug_uart.c	/^int __write_console(__file_handle handle, unsigned char* buffer, size_t* count)$/;"	f
_read	utilities\src\fsl_debug_uart.c	/^int _read(int handle, char *buffer, int size)$/;"	f
_write	utilities\src\fsl_debug_uart.c	/^int _write (int handle, char *buffer, int size)$/;"	f
configure_uart_pin_mux	utilities\src\fsl_debug_uart.c	63;"	d	file:
debug_uart_init	utilities\src\fsl_debug_uart.c	/^void debug_uart_init(uint32_t uartInstance, uint32_t baudRate)$/;"	f
debug_uart_state_t	utilities\src\fsl_debug_uart.c	/^} debug_uart_state_t;$/;"	t	typeref:struct:DebugUartState	file:
instance	utilities\src\fsl_debug_uart.c	/^    uint32_t instance;  \/*!< UART instance to use for debug messages.*\/$/;"	m	struct:DebugUartState	file:
isInited	utilities\src\fsl_debug_uart.c	/^    bool isInited;      \/*!< Whether the debug UART has been initialized.*\/$/;"	m	struct:DebugUartState	file:
s_debugUart	utilities\src\fsl_debug_uart.c	/^static debug_uart_state_t s_debugUart = { 0 };$/;"	v	file:
POLL_init	utilities\src\fsl_os_abstraction_bm.c	/^void POLL_init(void) $/;"	f
Poll	utilities\src\fsl_os_abstraction_bm.c	/^void Poll(void) $/;"	f
__task_create	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status __task_create(task_t task, uint8_t *name, uint16_t stackSize,$/;"	f
event_check_flags	utilities\src\fsl_os_abstraction_bm.c	/^event_status event_check_flags(event_object_t *obj, event_group_t flag)$/;"	f
event_clear	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_clear(event_object_t *obj, event_group_t flags)$/;"	f
event_create	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_create(event_object_t *obj, event_clear_type clearType)$/;"	f
event_destroy	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_destroy(event_object_t *obj)$/;"	f
event_set	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_set(event_object_t *obj, event_group_t flags)$/;"	f
event_set_from_isr	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_set_from_isr(event_object_t *obj, event_group_t flags)$/;"	f
event_wait	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status event_wait(event_object_t *obj, uint32_t timeout, event_group_t *setFlags)$/;"	f
g_poll	utilities\src\fsl_os_abstraction_bm.c	/^POLL_STRUCT g_poll;$/;"	v
lock_create	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status lock_create(lock_object_t *obj)$/;"	f
lock_destroy	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status lock_destroy(lock_object_t *obj)$/;"	f
lock_poll	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status lock_poll(lock_object_t *obj)$/;"	f
lock_release	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status lock_release(lock_object_t *obj)$/;"	f
lock_wait	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status lock_wait(lock_object_t *obj, uint32_t timeout)$/;"	f
mem_allocate	utilities\src\fsl_os_abstraction_bm.c	/^void * mem_allocate(size_t size)$/;"	f
mem_allocate_zero	utilities\src\fsl_os_abstraction_bm.c	/^void * mem_allocate_zero(size_t size)$/;"	f
mem_free	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status mem_free(void *ptr)$/;"	f
msg_queue_create	utilities\src\fsl_os_abstraction_bm.c	/^msg_queue_handler_t msg_queue_create(msg_queue_t *queue, uint16_t number, uint16_t size)$/;"	f
msg_queue_destroy	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status msg_queue_destroy(msg_queue_handler_t handler)$/;"	f
msg_queue_flush	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status msg_queue_flush(msg_queue_handler_t handler)$/;"	f
msg_queue_get	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status msg_queue_get(msg_queue_handler_t handler, void **item, uint32_t timeout)$/;"	f
msg_queue_put	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status msg_queue_put(msg_queue_handler_t handler, void *item)$/;"	f
sync_create	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_create(sync_object_t *obj, uint8_t initValue)$/;"	f
sync_destroy	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_destroy(sync_object_t *obj)$/;"	f
sync_poll	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_poll(sync_object_t *obj)$/;"	f
sync_signal	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_signal(sync_object_t *obj)$/;"	f
sync_signal_from_isr	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_signal_from_isr(sync_object_t *obj)$/;"	f
sync_wait	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status sync_wait(sync_object_t *obj, uint32_t timeout)$/;"	f
task_destroy	utilities\src\fsl_os_abstraction_bm.c	/^fsl_rtos_status task_destroy(task_handler_t handler)$/;"	f
time_delay	utilities\src\fsl_os_abstraction_bm.c	/^void time_delay(uint32_t delay)$/;"	f
IS_TIMER_CHANNEL_RESERVED	utilities\src\sw_timer.c	55;"	d	file:
SW_TIMER_COUNT_UNIT_MS	utilities\src\sw_timer.c	50;"	d	file:
SW_TIMER_NUMBER_CHANNELS	utilities\src\sw_timer.c	47;"	d	file:
channel_enabler_t	utilities\src\sw_timer.c	/^typedef uint16_t channel_enabler_t;$/;"	t	file:
channel_enabler_t	utilities\src\sw_timer.c	/^typedef uint32_t channel_enabler_t;$/;"	t	file:
channel_enabler_t	utilities\src\sw_timer.c	/^typedef uint8_t channel_enabler_t;$/;"	t	file:
gs_areChannelsEnabled	utilities\src\sw_timer.c	/^static volatile channel_enabler_t gs_areChannelsEnabled;$/;"	v	file:
gs_channelCounters	utilities\src\sw_timer.c	/^static volatile time_counter_t gs_channelCounters[SW_TIMER_NUMBER_CHANNELS];$/;"	v	file:
gs_freeCounter	utilities\src\sw_timer.c	/^static volatile time_free_counter_t gs_freeCounter;$/;"	v	file:
kSWTimerPITChannel	utilities\src\sw_timer.c	/^static const uint8_t kSWTimerPITChannel = FSL_FEATURE_PIT_TIMER_COUNT - 1;$/;"	v	file:
sw_timer_get_channel_status	utilities\src\sw_timer.c	/^sw_timer_channel_status_t sw_timer_get_channel_status(uint8_t timerChannel)$/;"	f
sw_timer_get_free_counter	utilities\src\sw_timer.c	/^time_free_counter_t sw_timer_get_free_counter(void)$/;"	f
sw_timer_init_service	utilities\src\sw_timer.c	/^uint32_t sw_timer_init_service(void)$/;"	f
sw_timer_release_channel	utilities\src\sw_timer.c	/^uint32_t sw_timer_release_channel(uint8_t timerChannel)$/;"	f
sw_timer_reserve_channel	utilities\src\sw_timer.c	/^uint8_t sw_timer_reserve_channel(void)$/;"	f
sw_timer_shutdown_service	utilities\src\sw_timer.c	/^void sw_timer_shutdown_service(void)$/;"	f
sw_timer_start_channel	utilities\src\sw_timer.c	/^uint32_t sw_timer_start_channel(uint8_t timerChannel, time_counter_t timeout)$/;"	f
sw_timer_update_counters	utilities\src\sw_timer.c	/^void sw_timer_update_counters(void)$/;"	f
SwTimerChannelStatus	utilities\sw_timer.h	/^typedef enum SwTimerChannelStatus$/;"	g
__SW_TIMER_H__	utilities\sw_timer.h	32;"	d
_sw_timer_errors	utilities\sw_timer.h	/^enum _sw_timer_errors$/;"	g
kSwTimerChannelExpired	utilities\sw_timer.h	/^    kSwTimerChannelExpired       = 0x00, \/*!< Indicates the timer channel has counted the given ms*\/$/;"	e	enum:SwTimerChannelStatus
kSwTimerChannelIsDisable	utilities\sw_timer.h	/^    kSwTimerChannelIsDisable     = 0x02, \/*!< Indicates the timer channel is not reserved. *\/$/;"	e	enum:SwTimerChannelStatus
kSwTimerChannelNotAvailable	utilities\sw_timer.h	/^    kSwTimerChannelNotAvailable  = 0xFF  \/*!< Indicates there are not available channels to reserve$/;"	e	enum:SwTimerChannelStatus
kSwTimerChannelStillCounting	utilities\sw_timer.h	/^    kSwTimerChannelStillCounting = 0x01, \/*!< Indicates the timeout of the channel has not expired$/;"	e	enum:SwTimerChannelStatus
kSwTimerMaxTimeout	utilities\sw_timer.h	/^    kSwTimerMaxTimeout = 2147483647$/;"	e	enum:sw_timer_timeouts
kSwTimerStatusFail	utilities\sw_timer.h	/^    kSwTimerStatusFail,              \/*!< The execution failed.*\/$/;"	e	enum:_sw_timer_errors
kSwTimerStatusInvalidChannel	utilities\sw_timer.h	/^    kSwTimerStatusInvalidChannel     \/*!< The given channel is not valid. Valid channels are 0 to$/;"	e	enum:_sw_timer_errors
kSwTimerStatusSuccess	utilities\sw_timer.h	/^    kSwTimerStatusSuccess,           \/*!< The execution was successful.*\/$/;"	e	enum:_sw_timer_errors
sw_timer_channel_status_t	utilities\sw_timer.h	/^}sw_timer_channel_status_t;$/;"	t	typeref:enum:SwTimerChannelStatus
sw_timer_timeouts	utilities\sw_timer.h	/^enum sw_timer_timeouts$/;"	g
time_counter_t	utilities\sw_timer.h	/^typedef int32_t time_counter_t;$/;"	t
time_free_counter_t	utilities\sw_timer.h	/^typedef uint32_t time_free_counter_t;$/;"	t
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
